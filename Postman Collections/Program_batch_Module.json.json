{
	"info": {
		"_postman_id": "d9751842-9895-4204-a9f3-bd9e6747e340",
		"name": "Program_batch_Module",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Program Batch Module with data driven",
			"item": [
				{
					"name": "user login controller",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60010461-21c5-4863-bb87-c979b5bb8029",
								"exec": [
									"pm.test('Body matches string', function () {",
									"    pm.expect(pm.response.text()).to.include('ROLE_ADMIN');",
									"})",
									"",
									"pm.test('Content-Type header is present', () => {",
									"    pm.response.to.have.header('Content-Type');",
									"})",
									"",
									"pm.test('Content-Type header is application/json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"})",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.environment.set('programbatchmodule_tokenaccessToken', jsonData.token)",
									"",
									"console.log(jsonData.token)",
									"",
									"//Validate response time",
									"pm.test(\"Response time is less than limit\", function() {",
									"var limit = 500;",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1aa556a9-809f-4805-b6be-9865be005f4d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "create program",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Status code is 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"pm.test('programDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programDescription).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('programName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('programStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programStatus).to.not.be.empty;\r",
									"})\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"var programId = responseBody.programId;\r",
									"var programName = responseBody.programName;\r",
									"pm.environment.set('programbatch_programId', programId);\r",
									"pm.environment.set('programbatch_programname',programName);\r",
									"console.log('programId:', programId);\r",
									"console.log('program name:', programName);\r",
									"pm.test(\"validate response body datatype\",()=> {\r",
									"    pm.expect(responseBody).to.be.an(\"object\");\r",
									"    pm.expect(responseBody.programId).to.be.a('number');\r",
									"    pm.expect(responseBody.programName).to.be.a('string');\r",
									"    pm.expect(responseBody.programDescription).to.be.a('string');\r",
									"    pm.expect(responseBody.programStatus).to.be.a('string');\r",
									"    pm.expect(responseBody.creationTime).to.be.a('string');\r",
									"    pm.expect(responseBody.lastModTime).to.be.a('string');\r",
									"});\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"creationTime\");\r",
									"    pm.expect(pm.response.text()).to.include(\"lastModTime\");\r",
									"  \r",
									"});\r",
									"const schema = {\r",
									"    'type': 'object',\r",
									"    'properties': {\r",
									"        'programDescription': { 'type': 'string' },\r",
									"        'programName': { 'type': 'string' },\r",
									"        'programStatus': {\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    'required': [\r",
									"        'programDescription',\r",
									"        'programName',\r",
									"        'programStatus'\r",
									"    ]\r",
									"};\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b34bfd5d-c689-4dd3-a383-8f91d958f904",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{ProgramDescription}}\",\r\n  \"programName\": \"{{ProgramName}}\",\r\n  \"programStatus\": \"{{ProgramStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Batch Module",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"console.log(\"batch Name:\", batchName);\r",
									"console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6ea959e2-4b43-46d1-88ae-b2b2fb14b0cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{BatchDescription}}\",\r\n    \"batchName\": \"{{BatchName}}\",\r\n    \"batchNoOfClasses\": \"{{BatchNoClasses}}\",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get all programs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b716e42f-b68e-43dd-a223-da1753765ad3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 5000;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"//Validate the response body\r",
									"\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"const schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},\r",
									"            \"programDescription\": {\"type\": \"string\"},\r",
									"            \"programStatus\": {\"type\": \"string\"},\r",
									"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
									"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}\r",
									"        },\r",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d11e684b-7c35-466d-a1e4-4e6d554a5650",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "Get all programs with programId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ff10c04-18ef-4a07-8125-a3e35a6980b4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"const schema ={\r",
									" \r",
									"   \r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},\r",
									"            \"programDescription\": {\"type\": \"string\"},\r",
									"            \"programStatus\": {\"type\": \"string\"},\r",
									"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
									"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}\r",
									"        },\r",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"    \r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b37f5cf1-efb3-44ef-b55b-79a39fa2bc7b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/programs/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"programs",
								":programId"
							],
							"variable": [
								{
									"id": "c8a404d7-1275-4153-b280-60a971be259b",
									"key": "programId",
									"value": "{{programbatch_programId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all programs with users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "044689bb-73b4-4e44-8444-0bd73bedb1f2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 700;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"// Define the JSON schema\r",
									"const schema = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": { \"type\": \"number\" },\r",
									"            \"programName\": { \"type\": \"string\" },\r",
									"            \"programDescription\": { \"type\": \"string\" },\r",
									"            \"programStatus\": { \"type\": \"string\" },\r",
									"            \"creationTime\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
									"            \"lastModTime\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
									"            \"programUsers\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"userId\": { \"type\": \"string\" },\r",
									"                        \"userFirstName\": { \"type\": \"string\" },\r",
									"                        \"userLastName\": { \"type\": \"string\" },\r",
									"                        \"userMiddleName\": { \"type\": \"string\" },\r",
									"                        \"userPhoneNumber\": { \"type\": \"number\" },\r",
									"                        \"userLocation\": { \"type\": \"string\" },\r",
									"                        \"userTimeZone\": { \"type\": \"string\" },\r",
									"                        \"userLinkedinUrl\": { \"type\": \"string\"},\r",
									"                        \"userEduUg\": { \"type\": \"string\" },\r",
									"                        \"userEduPg\": { \"type\": \"string\" },\r",
									"                        \"userComments\": { \"type\": \"string\" },\r",
									"                        \"userVisaStatus\": { \"type\": \"string\" },\r",
									"                        \"userLoginEmail\": { \"type\": [\"string\", \"null\"] }\r",
									"                    },\r",
									"                    \"required\": [\"userId\", \"userFirstName\", \"userLastName\", \"userPhoneNumber\"]\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"    }\r",
									"};\r",
									"\r",
									"// Perform schema validation\r",
									"pm.test(\"Schema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "28803032-256a-4640-80e3-1e64380ea2a5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/allProgramsWithUsers"
					},
					"response": []
				},
				{
					"name": "Get all Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a50480e3-a60e-4fe3-b0dc-792a82230d07",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f062d4c6-3ebf-4021-86bb-b35c720b8c33",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get all Batches by batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96a1d597-2a84-4a35-a8c1-84612ecb0f84",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"const responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"batchId\": {\"type\": \"number\"},\r",
									"        \"batchName\": {\"type\": \"string\"},\r",
									"        \"batchDescription\": {\"type\": \"string\"},\r",
									"        \"batchStatus\": {\"type\": \"string\", \"enum\": [\"Active\", \"Inactive\",\"active\",\"inactive\"]},\r",
									"        \"batchNoOfClasses\": {\"type\": \"number\"},\r",
									"        \"programId\": {\"type\": \"number\"},\r",
									"        \"programName\": {\"type\": \"string\"}\r",
									"    },\r",
									"    \"required\": [\"batchId\", \"batchName\", \"batchDescription\", \"batchStatus\", \"batchNoOfClasses\", \"programId\", \"programName\"]\r",
									"};\r",
									"\r",
									"const responseBodySchema = pm.response.json();\r",
									"\r",
									"pm.test('Response body matches schema', function() {\r",
									"    const Ajv = require('ajv');\r",
									"    const ajv = new Ajv({allErrors: true});\r",
									"\r",
									"    const validate = ajv.compile(responseSchema);\r",
									"    const valid = validate(responseBodySchema);\r",
									"\r",
									"    pm.expect(valid).to.be.true;\r",
									"    pm.expect(validate.errors).to.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "45dc9b58-855d-4832-aaf7-5c7cc072545e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchId/:batchId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchId",
								":batchId"
							],
							"variable": [
								{
									"id": "5efe7676-8a37-4a43-b84b-939315758a57",
									"key": "batchId",
									"value": "{{programbatch_batchid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Batch Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97341be8-f7a4-4ff8-93d4-689adfaa02be",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {\"type\": \"string\"},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4dc6f02d-f2df-44b0-8ce3-a3ff8a5416fe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchName/:batchName",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchName",
								":batchName"
							],
							"variable": [
								{
									"id": "f78192ac-3159-44df-9070-72206d40f5e5",
									"key": "batchName",
									"value": "{{programbatch_batchName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Program Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6a50dd4-9f47-47ba-8a25-84938a4e0f5e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {\"type\": \"string\"},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8911ff4e-e1cb-488d-8473-36dd69771138",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/program/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"program",
								":programId"
							],
							"variable": [
								{
									"id": "a8c717de-a510-4be5-99cf-8db6b760f095",
									"key": "programId",
									"value": "{{programbatch_programId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch with batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1fb525e4-274f-40a9-8bae-0454904b8cf0",
								"exec": [
									"// Extract the request URL from environment variables\r",
									"var requestUrl = pm.variables.replaceIn(\"{{BaseURL}}/batches/{{programbatch_batchid}}\");\r",
									"\r",
									"// Check if the request URL contains the path parameter placeholder\r",
									"if (requestUrl.includes('{{programbatch_batchid}}')) {\r",
									"    // Path parameter is missing, set an error message and cancel the request\r",
									"    pm.environment.set(\"error_message\", \"Path parameter 'programbatch_batchid' is missing\");\r",
									"    pm.request.cancel = true;\r",
									"}\r",
									"// Get the request URL\r",
									"const requestUrl = pm.request.url.toString();\r",
									"\r",
									"// Get the protocol and host part of the URL\r",
									"const urlParts = requestUrl.split('/');\r",
									"const baseUrl = urlParts.slice(0, 3).join('/');\r",
									"\r",
									"// Append the remaining path parts to form the complete URL\r",
									"const remainingPath = urlParts.slice(3).join('/');\r",
									"const completeUrl = baseUrl + '/' + remainingPath;\r",
									"console.log(\"Complete URL:\", completeUrl);\r",
									"// Set the request URL\r",
									"pm.request.url = completeUrl;\r",
									"//console.log(\"Complete URL:\", completeUrl);\r",
									"// Define the path parameter value\r",
									"var pathParamValue =pm.environment.get(\"programbatch_programId\");\r",
									"\r",
									"// Validate the path parameter value\r",
									"if (!pathParamValue) {\r",
									"    throw new Error(\"Path parameter value is missing\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e5226f3d-3933-4397-89e0-a9d9daa679b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{Update_BatchDescription}}\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": {{UpdateNoClasses}},\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Delete by program Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42f5d782-fea1-44fe-a194-e95ad9f572d5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "47f96a89-91bc-4780-a647-1f94184f3400",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programbatch_programId}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch with batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7dba0151-facf-4892-aad3-c7dd1872b9a3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "User logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff6f3489-6755-4c59-9729-9b914da29989",
								"exec": [
									"//Validate response time\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f3907f51-3c05-493d-a4b7-01607cf8e18b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/logoutlms"
					},
					"response": []
				}
			],
			"id": "aeb5e63a-acc8-4d40-832a-751c34775a7e"
		},
		{
			"name": "Program Batch Module with data driven invalid",
			"item": [
				{
					"name": "user login controller",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60010461-21c5-4863-bb87-c979b5bb8029",
								"exec": [
									"pm.test('Body matches string', function () {",
									"    pm.expect(pm.response.text()).to.include('ROLE_ADMIN');",
									"})",
									"",
									"pm.test('Content-Type header is present', () => {",
									"    pm.response.to.have.header('Content-Type');",
									"})",
									"",
									"pm.test('Content-Type header is application/json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"})",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.environment.set('programbatchmodule_tokenaccessToken', jsonData.token)",
									"",
									"console.log(jsonData.token)",
									"",
									"//Validate response time",
									"pm.test(\"Response time is less than limit\", function() {",
									"var limit = 500;",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5e7b7296-5243-41fd-8224-658e560e7c2b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Create Batch Module",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is  400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});\r",
									"}\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"//pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"console.log(\"batch Name:\", batchName);\r",
									"console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ed1db1f1-83ae-4e9f-87cc-a0fbeabb114e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{BatchDescription}}\",\r\n    \"batchName\": \"{{BatchName}}\",\r\n    \"batchNoOfClasses\": \"{{BatchNoClasses}}\",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"{{ProgramId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get all Batches by batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96a1d597-2a84-4a35-a8c1-84612ecb0f84",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"batchId\": {\"type\": \"number\"},\r",
									"        \"batchName\": {\"type\": \"string\"},\r",
									"        \"batchDescription\": {\"type\": \"string\"},\r",
									"        \"batchStatus\": {\"type\": \"string\", \"enum\": [\"Active\", \"Inactive\",\"active\",\"inactive\"]},\r",
									"        \"batchNoOfClasses\": {\"type\": \"number\"},\r",
									"        \"programId\": {\"type\": \"number\"},\r",
									"        \"programName\": {\"type\": \"string\"}\r",
									"    },\r",
									"    \"required\": [\"batchId\", \"batchName\", \"batchDescription\", \"batchStatus\", \"batchNoOfClasses\", \"programId\", \"programName\"]\r",
									"};\r",
									"\r",
									"const responseBodySchema = pm.response.json();\r",
									"\r",
									"pm.test('Response body matches schema', function() {\r",
									"    const Ajv = require('ajv');\r",
									"    const ajv = new Ajv({allErrors: true});\r",
									"\r",
									"    const validate = ajv.compile(responseSchema);\r",
									"    const valid = validate(responseBodySchema);\r",
									"\r",
									"    pm.expect(valid).to.be.true;\r",
									"    pm.expect(validate.errors).to.be.null;\r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f39e8d4c-2221-41dd-af35-f3b27e464981",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchId/:batchId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchId",
								":batchId"
							],
							"variable": [
								{
									"id": "5efe7676-8a37-4a43-b84b-939315758a57",
									"key": "batchId",
									"value": "{{programbatch_batchid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Batch Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97341be8-f7a4-4ff8-93d4-689adfaa02be",
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"// Perform schema validation\r",
									"if (pm.response.code === 201){\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {\"type\": \"string\"},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"  \r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f3a9fb88-23cf-4824-a097-ffa59938357b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchName/:batchName",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchName",
								":batchName"
							],
							"variable": [
								{
									"key": "batchName",
									"value": "{{programbatch_batchName_invalid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Program Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6a50dd4-9f47-47ba-8a25-84938a4e0f5e",
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {\"type\": \"string\"},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"  \r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bcbdfc31-843a-4c62-b6df-73db73ac8ade",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/program/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"program",
								":programId"
							],
							"variable": [
								{
									"key": "programId",
									"value": "{{programbatch_programId_invalidforget}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch with batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"//pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is  400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201) {\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "72e224e1-40a1-482f-82ce-5809ac6d4558",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{Update_BatchDescription}}\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": {{UpdateNoClasses}},\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Delete by program Id invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42f5d782-fea1-44fe-a194-e95ad9f572d5",
								"exec": [
									"pm.test(\"Status code is 404 Not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8b8361b1-b354-446c-969c-ebe857c6edf5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programbatch_programId_invalidforget}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch with batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "de53cef2-f984-4a97-aab5-695e478c4558",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "User logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff6f3489-6755-4c59-9729-9b914da29989",
								"exec": [
									"//Validate response time\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3922d916-ff73-43e0-83f8-548c671c42ec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/logoutlms"
					},
					"response": []
				}
			],
			"id": "07b20ddc-7a07-4b28-89cc-c176ca348f71"
		},
		{
			"name": "Program Batch Module with data driven invalid Copy",
			"item": [
				{
					"name": "user login controller",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60010461-21c5-4863-bb87-c979b5bb8029",
								"exec": [
									"pm.test('Body matches string', function () {",
									"    pm.expect(pm.response.text()).to.include('ROLE_ADMIN');",
									"})",
									"",
									"pm.test('Content-Type header is present', () => {",
									"    pm.response.to.have.header('Content-Type');",
									"})",
									"",
									"pm.test('Content-Type header is application/json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"})",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.environment.set('programbatchmodule_tokenaccessToken', jsonData.token)",
									"",
									"console.log(jsonData.token)",
									"",
									"//Validate response time",
									"pm.test(\"Response time is less than limit\", function() {",
									"var limit = 500;",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "165623a6-0f30-412f-a910-468176255148",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "create program Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Status code is 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"pm.test('programDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programDescription).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('programName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('programStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programStatus).to.not.be.empty;\r",
									"})\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"var programId = responseBody.programId;\r",
									"var programName = responseBody.programName;\r",
									"pm.environment.set('programbatch_programId', programId);\r",
									"pm.environment.set('programbatch_programname',programName);\r",
									"console.log('programId:', programId);\r",
									"console.log('program name:', programName);\r",
									"pm.test(\"validate response body datatype\",()=> {\r",
									"    pm.expect(responseBody).to.be.an(\"object\");\r",
									"    pm.expect(responseBody.programId).to.be.a('number');\r",
									"    pm.expect(responseBody.programName).to.be.a('string');\r",
									"    pm.expect(responseBody.programDescription).to.be.a('string');\r",
									"    pm.expect(responseBody.programStatus).to.be.a('string');\r",
									"    pm.expect(responseBody.creationTime).to.be.a('string');\r",
									"    pm.expect(responseBody.lastModTime).to.be.a('string');\r",
									"});\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"creationTime\");\r",
									"    pm.expect(pm.response.text()).to.include(\"lastModTime\");\r",
									"  \r",
									"});\r",
									"const schema = {\r",
									"    'type': 'object',\r",
									"    'properties': {\r",
									"        'programDescription': { 'type': 'string' },\r",
									"        'programName': { 'type': 'string' },\r",
									"        'programStatus': {\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    'required': [\r",
									"        'programDescription',\r",
									"        'programName',\r",
									"        'programStatus'\r",
									"    ]\r",
									"};\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e60e1867-a3ac-4c71-9cfe-381c9a8a401b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{ProgramDescription}}\",\r\n  \"programName\": \"{{ProgramName}}\",\r\n  \"programStatus\": \"{{ProgramStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Batch Module",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is  400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});\r",
									"}\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"//pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"console.log(\"batch Name:\", batchName);\r",
									"console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "969f99be-c015-4aad-8881-8c304e50b831",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{BatchDescription}}\",\r\n    \"batchName\": \"{{BatchName}}\",\r\n    \"batchNoOfClasses\": \"{{BatchNoClasses}}\",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"{{ProgramId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get all Batches by batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96a1d597-2a84-4a35-a8c1-84612ecb0f84",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"batchId\": {\"type\": \"number\"},\r",
									"        \"batchName\": {\"type\": \"string\"},\r",
									"        \"batchDescription\": {\"type\": \"string\"},\r",
									"        \"batchStatus\": {\"type\": \"string\", \"enum\": [\"Active\", \"Inactive\",\"active\",\"inactive\"]},\r",
									"        \"batchNoOfClasses\": {\"type\": \"number\"},\r",
									"        \"programId\": {\"type\": \"number\"},\r",
									"        \"programName\": {\"type\": \"string\"}\r",
									"    },\r",
									"    \"required\": [\"batchId\", \"batchName\", \"batchDescription\", \"batchStatus\", \"batchNoOfClasses\", \"programId\", \"programName\"]\r",
									"};\r",
									"\r",
									"const responseBodySchema = pm.response.json();\r",
									"\r",
									"pm.test('Response body matches schema', function() {\r",
									"    const Ajv = require('ajv');\r",
									"    const ajv = new Ajv({allErrors: true});\r",
									"\r",
									"    const validate = ajv.compile(responseSchema);\r",
									"    const valid = validate(responseBodySchema);\r",
									"\r",
									"    pm.expect(valid).to.be.true;\r",
									"    pm.expect(validate.errors).to.be.null;\r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "718344ea-2746-436d-afb0-b75652c54b78",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchId/:batchId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchId",
								":batchId"
							],
							"variable": [
								{
									"id": "5efe7676-8a37-4a43-b84b-939315758a57",
									"key": "batchId",
									"value": "{{programbatch_batchid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Batch Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97341be8-f7a4-4ff8-93d4-689adfaa02be",
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"// Perform schema validation\r",
									"if (pm.response.code === 201){\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {\"type\": \"string\"},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"  \r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "048117fe-5e49-481e-af4c-e05f7832b688",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchName/:batchName",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchName",
								":batchName"
							],
							"variable": [
								{
									"id": "6cc30d1c-eb10-4a5b-abe0-f00f04388480",
									"key": "batchName",
									"value": "{{programbatch_batchName_invalid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Program Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6a50dd4-9f47-47ba-8a25-84938a4e0f5e",
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {\"type\": \"string\"},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"  \r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3e6c3831-b874-4550-925e-8ce515e1287f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/program/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"program",
								":programId"
							],
							"variable": [
								{
									"id": "824d420d-952c-4d16-ba3a-dc81fa04a62a",
									"key": "programId",
									"value": "{{programbatch_programId_invalidforget}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch with batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"//pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is  400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201) {\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fb942821-8dd9-4f86-8f14-e3fbeb1a1ed5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{Update_BatchDescription}}\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": {{UpdateNoClasses}},\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Delete by program Id invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42f5d782-fea1-44fe-a194-e95ad9f572d5",
								"exec": [
									"pm.test(\"Status code is 404 Not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5b1181ca-2b7a-4e7a-8742-047d118742b5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programbatch_programId_invalidforget}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch with batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3a6d3e49-6f6a-49c1-9141-1a2e4e18425d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "User logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff6f3489-6755-4c59-9729-9b914da29989",
								"exec": [
									"//Validate response time\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6a661b54-2f6d-4dae-a8c1-b3476d3804f5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/logoutlms"
					},
					"response": []
				}
			],
			"id": "783441e4-2faa-44c3-bf11-bdd4dcb3ea49"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7e4612a2-a725-4951-a1e3-e4eac7dcc070",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "ddc5b2c5-5d90-4bcf-9477-150b070f9d7e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "accessToken",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyc0BnbWFpbC5jb20iLCJpYXQiOjE3MDk3NzU3MjIsImV4cCI6MTcwOTgwNDUyMn0.Yd6LE_-FOX7b92D-ao-5DfMbDEq2QaiOQxbtHyt6ssYFURvkK9NITwfKqR3xSdKfrXiSXrIzN2Wx2TH84RmEZA",
			"disabled": true
		},
		{
			"key": "programId",
			"value": "16387",
			"type": "string",
			"disabled": true
		},
		{
			"key": "programId",
			"value": "",
			"disabled": true
		},
		{
			"key": "batchId",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "batchName",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "batchId",
			"value": "",
			"disabled": true
		},
		{
			"key": "batchName",
			"value": "",
			"disabled": true
		},
		{
			"key": "batchId",
			"value": ""
		},
		{
			"key": "batchName",
			"value": ""
		}
	]
}