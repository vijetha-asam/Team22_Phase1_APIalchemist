{
	"info": {
		"_postman_id": "d9751842-9895-4204-a9f3-bd9e6747e340",
		"name": "Program_batch_Module",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Program Batch Module without data driven",
			"item": [
				{
					"name": "user login controller",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60010461-21c5-4863-bb87-c979b5bb8029",
								"exec": [
									"pm.test('Body matches string', function () {",
									"    pm.expect(pm.response.text()).to.include('ROLE_ADMIN');",
									"})",
									"",
									"pm.test('Content-Type header is present', () => {",
									"    pm.response.to.have.header('Content-Type');",
									"})",
									"",
									"pm.test('Content-Type header is application/json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"})",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.environment.set('programbatchmodule_tokenaccessToken', jsonData.token)",
									"",
									"console.log(jsonData.token)",
									"",
									"//Validate response time",
									"pm.test(\"Response time is less than limit\", function() {",
									"var limit = 500;",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "558e7fe8-09e2-4509-a3f5-850deb57129f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "create program",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Status code is 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"pm.test('programDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programDescription).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('programName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('programStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programStatus).to.not.be.empty;\r",
									"})\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"var programId = responseBody.programId;\r",
									"var programName = responseBody.programName;\r",
									"pm.environment.set('programbatch_programId', programId);\r",
									"pm.environment.set('programbatch_programname',programName);\r",
									"console.log('programId:', programId);\r",
									"console.log('program name:', programName);\r",
									"pm.test(\"validate response body datatype\",()=> {\r",
									"    pm.expect(responseBody).to.be.an(\"object\");\r",
									"    pm.expect(responseBody.programId).to.be.a('number');\r",
									"    pm.expect(responseBody.programName).to.be.a('string');\r",
									"    pm.expect(responseBody.programDescription).to.be.a('string');\r",
									"    pm.expect(responseBody.programStatus).to.be.a('string');\r",
									"    pm.expect(responseBody.creationTime).to.be.a('string');\r",
									"    pm.expect(responseBody.lastModTime).to.be.a('string');\r",
									"});\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"creationTime\");\r",
									"    pm.expect(pm.response.text()).to.include(\"lastModTime\");\r",
									"  \r",
									"});\r",
									"const schema = {\r",
									"    'type': 'object',\r",
									"    'properties': {\r",
									"        'programDescription': { 'type': 'string' },\r",
									"        'programName': { 'type': 'string' },\r",
									"        'programStatus': {\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    'required': [\r",
									"        'programDescription',\r",
									"        'programName',\r",
									"        'programStatus'\r",
									"    ]\r",
									"};\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b7a51e41-a04e-4919-a2d1-40a8d93ba94c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"To learn about Postman\",\r\n  \"programName\": \"March24-APIAlchemist-SDET-039\",\r\n  \"programStatus\": \"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Batch Module",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"console.log(\"batch Name:\", batchName);\r",
									"console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "814e6a0d-1216-4909-b977-b5580c141992",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"New batch for sdet to learn about api\",\r\n    \"batchName\": \"March24-API_Alchemist-Post1healthcare21-SDET120-010\",\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get all programs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b716e42f-b68e-43dd-a223-da1753765ad3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 1000;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"//Validate the response body\r",
									"\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"const schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},\r",
									"            \"programDescription\": {\"type\": \"string\"},\r",
									"            \"programStatus\": {\"type\": \"string\"},\r",
									"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
									"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}\r",
									"        },\r",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3f9c2fdc-1d09-4987-a8f5-a07515b00d6f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "Get all programs with programId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ff10c04-18ef-4a07-8125-a3e35a6980b4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ba9bb90b-4a6c-42a4-9a10-6dcef2e5a95f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/programs/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"programs",
								":programId"
							],
							"variable": [
								{
									"key": "programId",
									"value": "{{programbatch_programId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all programs with users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "044689bb-73b4-4e44-8444-0bd73bedb1f2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 700;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"// Define the JSON schema\r",
									"const schema = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": { \"type\": \"number\" },\r",
									"            \"programName\": { \"type\": \"string\" },\r",
									"            \"programDescription\": { \"type\": \"string\" },\r",
									"            \"programStatus\": { \"type\": \"string\" },\r",
									"            \"creationTime\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
									"            \"lastModTime\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
									"            \"programUsers\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"userId\": { \"type\": \"string\" },\r",
									"                        \"userFirstName\": { \"type\": \"string\" },\r",
									"                        \"userLastName\": { \"type\": \"string\" },\r",
									"                        \"userMiddleName\": { \"type\": \"string\" },\r",
									"                        \"userPhoneNumber\": { \"type\": \"number\" },\r",
									"                        \"userLocation\": { \"type\": \"string\" },\r",
									"                        \"userTimeZone\": { \"type\": \"string\" },\r",
									"                        \"userLinkedinUrl\": { \"type\": \"string\"},\r",
									"                        \"userEduUg\": { \"type\": \"string\" },\r",
									"                        \"userEduPg\": { \"type\": \"string\" },\r",
									"                        \"userComments\": { \"type\": \"string\" },\r",
									"                        \"userVisaStatus\": { \"type\": \"string\" },\r",
									"                        \"userLoginEmail\": { \"type\": [\"string\", \"null\"] }\r",
									"                    },\r",
									"                    \"required\": [\"userId\", \"userFirstName\", \"userLastName\", \"userPhoneNumber\"]\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"    }\r",
									"};\r",
									"\r",
									"// Perform schema validation\r",
									"pm.test(\"Schema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "97ac9bdf-6ea2-40fd-8893-c220a839ea82",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/allProgramsWithUsers"
					},
					"response": []
				},
				{
					"name": "Get all Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a50480e3-a60e-4fe3-b0dc-792a82230d07",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {\"type\": \"string\"},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"   pm.test(\"batchDescription is null or string\", function() {\r",
									"    pm.expect(responseBody.batchDescription).to.satisfy(function (value) {\r",
									"        return value === null || typeof value === 'string';\r",
									"    });\r",
									"});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8d95b815-479e-4c85-86ab-832966f642f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get all Batches by batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96a1d597-2a84-4a35-a8c1-84612ecb0f84",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8156a5f8-b08a-49d0-822e-42aeac074361",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchId/:batchId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchId",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "{{programbatch_batchid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Batch Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97341be8-f7a4-4ff8-93d4-689adfaa02be",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e5d52b5c-78a6-4b47-afea-3d30de3bae16",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchName/:batchName",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchName",
								":batchName"
							],
							"variable": [
								{
									"key": "batchName",
									"value": "{{programbatch_batchName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Program Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6a50dd4-9f47-47ba-8a25-84938a4e0f5e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f5ac41eb-6ce8-4629-bf09-bac524599baf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/program/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"program",
								":programId"
							],
							"variable": [
								{
									"key": "programId",
									"value": "{{programbatch_programId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch with batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fd925bc3-6725-40cd-bd68-028f28c7cc59",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"Newbatch for SDET\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": 5,\r\n    \"batchStatus\": \"Inactive\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"UpdatedPost1healthcare21\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Delete by program name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab00110c-d515-4998-bf68-595abe1bf7ab",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f545f688-f2ec-451f-b9f9-b60ac6eb8b36",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogname/{{programbatch_programname}}"
					},
					"response": []
				},
				{
					"name": "Delete by program name Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab00110c-d515-4998-bf68-595abe1bf7ab",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "29c51e8f-c60e-4921-b65a-0d1100220162",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogname/{{programbatch_programname}}"
					},
					"response": []
				},
				{
					"name": "Delete by program Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42f5d782-fea1-44fe-a194-e95ad9f572d5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3b83879f-e5c2-4d15-a720-6287fe4e761a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programbatch_programId}}"
					},
					"response": []
				},
				{
					"name": "create program Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Status code is 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"pm.test('programDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programDescription).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('programName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('programStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programStatus).to.not.be.empty;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"var programId = responseBody.programId;\r",
									"var programName = responseBody.programName;\r",
									"pm.environment.set('programbatch_programId', programId)\r",
									"pm.environment.set('programbatch_programname',programName)\r",
									"console.log('programId:', programId)\r",
									"\r",
									"pm.test(\"validate response body datatype\",()=> {\r",
									"    pm.expect(responseBody).to.be.an(\"object\");\r",
									"    pm.expect(responseBody.programId).to.be.a('number');\r",
									"    pm.expect(responseBody.programName).to.be.a('string');\r",
									"    pm.expect(responseBody.programDescription).to.be.a('string');\r",
									"    pm.expect(responseBody.programStatus).to.be.a('string');\r",
									"    pm.expect(responseBody.creationTime).to.be.a('string');\r",
									"    pm.expect(responseBody.lastModTime).to.be.a('string');\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    'type': 'object',\r",
									"    'properties': {\r",
									"        'programDescription': { 'type': 'string' },\r",
									"        'programName': { 'type': 'string' },\r",
									"        'programStatus': {\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    'required': [\r",
									"        'programDescription',\r",
									"        'programName',\r",
									"        'programStatus'\r",
									"    ]\r",
									"};\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d7fe30e7-9c0c-4cd9-9e46-64399fa962a1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"To learn about Postman\",\r\n  \"programName\": \"March24-APIAlchemist-SDET-030\",\r\n  \"programStatus\": \"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Delete Batch with batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6d79f764-d7fd-4d1b-b981-0f0e9aee77dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "User logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff6f3489-6755-4c59-9729-9b914da29989",
								"exec": [
									"//Validate response time\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d7fced60-c4a0-4e35-9c64-c9a96b9a2cb2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/logoutlms"
					},
					"response": []
				}
			],
			"id": "82042d22-0015-4d26-8e14-ea4087dcd2a0"
		},
		{
			"name": "Program_BatchModule_invalid",
			"item": [
				{
					"name": "user login controller Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60010461-21c5-4863-bb87-c979b5bb8029",
								"exec": [
									"pm.test('Body matches string', function () {",
									"    pm.expect(pm.response.text()).to.include('ROLE_ADMIN');",
									"})",
									"",
									"pm.test('Content-Type header is present', () => {",
									"    pm.response.to.have.header('Content-Type');",
									"})",
									"",
									"pm.test('Content-Type header is application/json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"})",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.environment.set('programbatchmodule_tokenaccessToken', jsonData.token)",
									"",
									"console.log(jsonData.token)",
									"",
									"//Validate response time",
									"pm.test(\"Response time is less than limit\", function() {",
									"var limit = 500;",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "562ac0c7-a222-4978-a33e-b8a5172a8da5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "create program Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Status code is 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"pm.test('programDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programDescription).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('programName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('programStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programStatus).to.not.be.empty;\r",
									"})\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"var programId = responseBody.programId;\r",
									"var programName = responseBody.programName;\r",
									"pm.environment.set('programbatch_programId', programId);\r",
									"pm.environment.set('programbatch_programname',programName);\r",
									"console.log('programId:', programId);\r",
									"console.log('program name:', programName);\r",
									"pm.test(\"validate response body datatype\",()=> {\r",
									"    pm.expect(responseBody).to.be.an(\"object\");\r",
									"    pm.expect(responseBody.programId).to.be.a('number');\r",
									"    pm.expect(responseBody.programName).to.be.a('string');\r",
									"    pm.expect(responseBody.programDescription).to.be.a('string');\r",
									"    pm.expect(responseBody.programStatus).to.be.a('string');\r",
									"    pm.expect(responseBody.creationTime).to.be.a('string');\r",
									"    pm.expect(responseBody.lastModTime).to.be.a('string');\r",
									"});\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"creationTime\");\r",
									"    pm.expect(pm.response.text()).to.include(\"lastModTime\");\r",
									"  \r",
									"});\r",
									"const schema = {\r",
									"    'type': 'object',\r",
									"    'properties': {\r",
									"        'programDescription': { 'type': 'string' },\r",
									"        'programName': { 'type': 'string' },\r",
									"        'programStatus': {\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    'required': [\r",
									"        'programDescription',\r",
									"        'programName',\r",
									"        'programStatus'\r",
									"    ]\r",
									"};\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9d719545-65d4-4242-9138-3e3b263e1030",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"To learn about Postman\",\r\n  \"programName\": \"March24-APIAlchemist-SDET-039\",\r\n  \"programStatus\": \"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Batch Module Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"console.log(\"batch Name:\", batchName);\r",
									"console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ccdc9032-6e2b-4447-bbf4-5a7b34cd67eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"New batch for sdet to learn about api\",\r\n    \"batchName\": \"March24-API_Alchemist-Post1healthcare21-SDET120-010\",\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get all programs Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b716e42f-b68e-43dd-a223-da1753765ad3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 1000;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"//Validate the response body\r",
									"\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"const schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},\r",
									"            \"programDescription\": {\"type\": \"string\"},\r",
									"            \"programStatus\": {\"type\": \"string\"},\r",
									"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
									"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}\r",
									"        },\r",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2c7e01fb-833d-4e94-aaa9-ce55956e1c4f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "Get all Batches Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a50480e3-a60e-4fe3-b0dc-792a82230d07",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {\"type\": \"string\"},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"   pm.test(\"batchDescription is null or string\", function() {\r",
									"    pm.expect(responseBody.batchDescription).to.satisfy(function (value) {\r",
									"        return value === null || typeof value === 'string';\r",
									"    });\r",
									"});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f662b6b9-38d4-49fb-b05d-2b20ab3d7c0a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get all Batches by batch Id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96a1d597-2a84-4a35-a8c1-84612ecb0f84",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "03c85029-cfa4-47cc-8bb7-f136271d6ffe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchId/:batchId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchId",
								":batchId"
							],
							"variable": [
								{
									"id": "79052540-6d3b-485a-9760-be0f91bbdf8f",
									"key": "batchId",
									"value": "{{programbatch_batchid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Batch Name Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97341be8-f7a4-4ff8-93d4-689adfaa02be",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "aa848989-f96f-4130-9f10-de1932fb1806",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchName/:batchName",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchName",
								":batchName"
							],
							"variable": [
								{
									"id": "ee53b001-3245-4b87-8ebf-fc589c8d7de2",
									"key": "batchName",
									"value": "{{programbatch_batchName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Program Id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6a50dd4-9f47-47ba-8a25-84938a4e0f5e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9ec2ab67-9b6c-4a01-a51b-24513e710f77",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/program/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"program",
								":programId"
							],
							"variable": [
								{
									"id": "5f9fb099-f885-4d37-9a47-d27305e74b4f",
									"key": "programId",
									"value": "{{programbatch_programId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch with batch Id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6fe09b30-0529-44d6-85a5-6bc06f9a9620",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"Newbatch for SDET\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": 5,\r\n    \"batchStatus\": \"Inactive\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"UpdatedPost1healthcare21\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				}
			],
			"id": "b403bd7c-bd68-48eb-b7e0-a233f3180176"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7e4612a2-a725-4951-a1e3-e4eac7dcc070",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "ddc5b2c5-5d90-4bcf-9477-150b070f9d7e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "accessToken",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyc0BnbWFpbC5jb20iLCJpYXQiOjE3MDk3NzU3MjIsImV4cCI6MTcwOTgwNDUyMn0.Yd6LE_-FOX7b92D-ao-5DfMbDEq2QaiOQxbtHyt6ssYFURvkK9NITwfKqR3xSdKfrXiSXrIzN2Wx2TH84RmEZA",
			"disabled": true
		},
		{
			"key": "programId",
			"value": "16387",
			"type": "string",
			"disabled": true
		},
		{
			"key": "programId",
			"value": "",
			"disabled": true
		},
		{
			"key": "batchId",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "batchName",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "batchId",
			"value": "",
			"disabled": true
		},
		{
			"key": "batchName",
			"value": "",
			"disabled": true
		},
		{
			"key": "batchId",
			"value": ""
		},
		{
			"key": "batchName",
			"value": ""
		}
	]
}