{
	"info": {
		"_postman_id": "d9751842-9895-4204-a9f3-bd9e6747e340",
		"name": "Program_batch_Module",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Program Batch Module with data driven Final ETE",
			"item": [
				{
					"name": "2.Pre requisites",
					"item": [
						{
							"name": "user login controller",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60010461-21c5-4863-bb87-c979b5bb8029",
										"exec": [
											"pm.test('Body matches string', function () {",
											"    pm.expect(pm.response.text()).to.include('ROLE_ADMIN');",
											"})",
											"",
											"pm.test('Content-Type header is present', () => {",
											"    pm.response.to.have.header('Content-Type');",
											"})",
											"",
											"pm.test('Content-Type header is application/json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"",
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Response is valid JSON', function () {",
											"    pm.response.to.be.json;",
											"})",
											"",
											"",
											"",
											"const jsonData = JSON.parse(responseBody);",
											"",
											"pm.environment.set('programbatchmodule_tokenaccessToken', jsonData.token)",
											"",
											"console.log(jsonData.token)",
											"",
											"//Validate response time",
											"pm.test(\"Response time is less than limit\", function() {",
											"var limit = 500;",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "826271ff-127a-42c4-8d13-037df0231c16",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{Password}}\",\r\n  \"userLoginEmailId\": \"{{userlogin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/login"
							},
							"response": []
						},
						{
							"name": "create program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"\r",
											"pm.test('Status code is 201', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Created');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"\r",
											"var requestBody = pm.request.body.raw;\r",
											"\r",
											"pm.test('programDescription  is not empty', function () {\r",
											"    pm.expect(pm.response.json().programDescription).to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('programName  is not empty', function () {\r",
											"    pm.expect(pm.response.json().programName).to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('programStatus  is not empty', function () {\r",
											"    pm.expect(pm.response.json().programStatus).to.not.be.empty;\r",
											"})\r",
											"\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"var programId = responseBody.programId;\r",
											"var programName = responseBody.programName;\r",
											"pm.environment.set('programbatch_programId', programId);\r",
											"pm.environment.set('programbatch_programname',programName);\r",
											"console.log('programId:', programId);\r",
											"console.log('program name:', programName);\r",
											"pm.test(\"validate response body datatype\",()=> {\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"    pm.expect(responseBody.programId).to.be.a('number');\r",
											"    pm.expect(responseBody.programName).to.be.a('string');\r",
											"    pm.expect(responseBody.programDescription).to.be.a('string');\r",
											"    pm.expect(responseBody.programStatus).to.be.a('string');\r",
											"    pm.expect(responseBody.creationTime).to.be.a('string');\r",
											"    pm.expect(responseBody.lastModTime).to.be.a('string');\r",
											"});\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"creationTime\");\r",
											"    pm.expect(pm.response.text()).to.include(\"lastModTime\");\r",
											"  \r",
											"});\r",
											"const schema = {\r",
											"    'type': 'object',\r",
											"    'properties': {\r",
											"        'programDescription': { 'type': 'string' },\r",
											"        'programName': { 'type': 'string' },\r",
											"        'programStatus': {\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]\r",
											"        }\r",
											"    },\r",
											"    'required': [\r",
											"        'programDescription',\r",
											"        'programName',\r",
											"        'programStatus'\r",
											"    ]\r",
											"};\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cc518394-3ca5-42c9-b9a8-a156652bf0aa",
										"exec": [
											"//var progName= \"March24-APIAlchemist-SDET5DA1-\" + pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"//pm.environment.set(\"programName\",programName);\r",
											"//const randomSerialNumber = Math.floor(Math.random() * 90000) + 10000;\r",
											"//pm.environment.set(\"programBatchmodule_randomNumber\",randomSerialNumber);\r",
											"\r",
											"//var random = Math.random().toString(36).substring(2);\r",
											"\r",
											"//var ProgramName= \"March24-APIAlchemist-SDET5DA1-\" + pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"// Generate a random integer\r",
											"const randomInt = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"\r",
											"// Construct the ProgramName variable\r",
											"const ProgramName = `March24-APIAlchemist-SDETDA-${randomInt}`;\r",
											"\r",
											"// Set the generated ProgramName as an environment variable\r",
											"pm.environment.set(\"ProgramName_Batch\", ProgramName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c5c6882c-cc93-4e9a-94f7-ffed7bb61d66",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"{{ProgramDescription}}\",\r\n  \"programName\": \"{{ProgramName_Batch}}\",\r\n  \"programStatus\": \"{{ProgramStatus}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/saveprogram"
							},
							"response": []
						},
						{
							"name": "Get all programs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b716e42f-b68e-43dd-a223-da1753765ad3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 5000;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test(\"count of records with staus active\", function(){\r",
											"    const jsonData = pm.response.json();\r",
											"    var count=jsonData.length;\r",
											"    console.log(count);\r",
											" });\r",
											"//Validate the response body\r",
											"\r",
											"// Perform schema validation\r",
											"pm.test(\"Validate Response Schema\", function() {\r",
											"    // Define the JSON schema\r",
											"const schema ={\r",
											"    \"type\": \"array\",\r",
											"    \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"programId\": {\"type\": \"number\"},\r",
											"            \"programName\": {\"type\": \"string\"},\r",
											"            \"programDescription\": {\"type\": \"string\"},\r",
											"            \"programStatus\": {\"type\": \"string\"},\r",
											"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
											"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}\r",
											"        },\r",
											"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
											"    }\r",
											"}\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d8ba9101-949b-4e4c-b610-55f14aedfbc7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/allPrograms"
							},
							"response": []
						},
						{
							"name": "Get all programs with users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "044689bb-73b4-4e44-8444-0bd73bedb1f2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 700;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"// Define the JSON schema\r",
											"const schema = {\r",
											"    \"type\": \"array\",\r",
											"    \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"programId\": { \"type\": \"number\" },\r",
											"            \"programName\": { \"type\": \"string\" },\r",
											"            \"programDescription\": { \"type\": \"string\" },\r",
											"            \"programStatus\": { \"type\": \"string\" },\r",
											"            \"creationTime\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
											"            \"lastModTime\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
											"            \"programUsers\": {\r",
											"                \"type\": \"array\",\r",
											"                \"items\": {\r",
											"                    \"type\": \"object\",\r",
											"                    \"properties\": {\r",
											"                        \"userId\": { \"type\": \"string\" },\r",
											"                        \"userFirstName\": { \"type\": \"string\" },\r",
											"                        \"userLastName\": { \"type\": \"string\" },\r",
											"                        \"userMiddleName\": { \"type\": \"string\" },\r",
											"                        \"userPhoneNumber\": { \"type\": \"number\" },\r",
											"                        \"userLocation\": { \"type\": \"string\" },\r",
											"                        \"userTimeZone\": { \"type\": \"string\" },\r",
											"                        \"userLinkedinUrl\": { \"type\": \"string\"},\r",
											"                        \"userEduUg\": { \"type\": \"string\" },\r",
											"                        \"userEduPg\": { \"type\": \"string\" },\r",
											"                        \"userComments\": { \"type\": \"string\" },\r",
											"                        \"userVisaStatus\": { \"type\": \"string\" },\r",
											"                        \"userLoginEmail\": { \"type\": [\"string\", \"null\"] }\r",
											"                    },\r",
											"                    \"required\": [\"userId\", \"userFirstName\", \"userLastName\", \"userPhoneNumber\"]\r",
											"                }\r",
											"            }\r",
											"        },\r",
											"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
											"    }\r",
											"};\r",
											"\r",
											"// Perform schema validation\r",
											"pm.test(\"Schema Validation\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6b8603f5-49f4-4d23-b5e9-6b1a550245a2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/allProgramsWithUsers"
							},
							"response": []
						},
						{
							"name": "Get all programs with programId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ff10c04-18ef-4a07-8125-a3e35a6980b4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test(\"Validate Response Schema\", function() {\r",
											"    // Define the JSON schema\r",
											"const schema ={\r",
											" \r",
											"   \r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"programId\": {\"type\": \"number\"},\r",
											"            \"programName\": {\"type\": \"string\"},\r",
											"            \"programDescription\": {\"type\": \"string\"},\r",
											"            \"programStatus\": {\"type\": \"string\"},\r",
											"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
											"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}\r",
											"        },\r",
											"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
											"    \r",
											"}\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0b1b6f35-bd60-4fc1-a551-41afe9dff2f6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/programs/:programId",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"programs",
										":programId"
									],
									"variable": [
										{
											"id": "c8a404d7-1275-4153-b280-60a971be259b",
											"key": "programId",
											"value": "{{programbatch_programId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "945e6c63-87b3-41d4-8344-59ef5701f0d4"
				},
				{
					"name": "3.Positive Scenario for Batch",
					"item": [
						{
							"name": "Create Batch Module",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Created');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"var requestBody = pm.request.body.raw;\r",
											"\r",
											"pm.test('batchDescription  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchName  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchStatus  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
											"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"//pm.collectionVariables.set(\"batchId\", batchId);\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"console.log(\"batch Name:\", batchName);\r",
											"console.log(\"batchId:\", batchId);\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3f31e915-4670-4bf5-baa9-2c756efeb64d",
										"exec": [
											"const randomInt = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"\r",
											"// Construct the ProgramName variable\r",
											"const BatchName = `March24-APIAlchemist-SDETDA-SDET120-${randomInt}`;\r",
											"\r",
											"// Set the generated ProgramName as an environment variable\r",
											"pm.environment.set(\"BatchName_ProgramBatch\", BatchName);\r",
											"\r",
											"// Array of predefined batch descriptions\r",
											"const batchDescriptions = [\r",
											"    \"A new batch started for Postman Functional testing\",\r",
											"    \"A new batch started for API Functional testing\",\r",
											"    \"A new batch started for Rest assured Automated testing\"\r",
											"];\r",
											"\r",
											"// Select a random batch description from the array\r",
											"const randomIndex = Math.floor(Math.random() * batchDescriptions.length);\r",
											"const batchDescription = batchDescriptions[randomIndex];\r",
											"\r",
											"// Set the generated batch description as an environment variable\r",
											"pm.environment.set(\"ProgramBatch_batch_description\", batchDescription);\r",
											"// Generate a random number of classes within a specified range\r",
											"const minClasses = 2; // Minimum number of classes\r",
											"const maxClasses = 10; // Maximum number of classes\r",
											"\r",
											"const numberOfClasses = Math.floor(Math.random() * (maxClasses - minClasses + 1)) + minClasses;\r",
											"\r",
											"// Set the generated number of classes as an environment variable\r",
											"pm.environment.set(\"ProgramBatch_batch_no_of_classes\", numberOfClasses);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "29424b80-559d-41e4-a1df-6540a1af4b36",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{ProgramBatch_batch_description}}\",\r\n    \"batchName\": \"{{BatchName_ProgramBatch}}\",\r\n    \"batchNoOfClasses\": \"{{ProgramBatch_batch_no_of_classes}}\",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Get all Batches",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a50480e3-a60e-4fe3-b0dc-792a82230d07",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"// Perform schema validation\r",
											"pm.test(\"Validate Response Schema\", function() {\r",
											"    // Define the JSON schema\r",
											"var schema ={\r",
											"    \"type\": \"array\",\r",
											"    \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"batchId\": {\"type\": \"number\"},\r",
											"            \"batchName\": {\"type\": \"string\"},\r",
											"            \"batchDescription\": {},\r",
											"            \"batchStatus\": {\"type\": \"string\"},\r",
											"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
											"  \t        \"programId\": {\"type\": \"number\"},\r",
											"            \"programName\": {\"type\": \"string\"},  \r",
											"        },\r",
											"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
											"    }\r",
											"}\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "891a31fc-1d3f-469c-96c2-6d25490daad7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Get all Batches by batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96a1d597-2a84-4a35-a8c1-84612ecb0f84",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"batchId\": {\"type\": \"number\"},\r",
											"        \"batchName\": {\"type\": \"string\"},\r",
											"        \"batchDescription\": {\"type\": \"string\"},\r",
											"        \"batchStatus\": {\"type\": \"string\", \"enum\": [\"Active\", \"Inactive\",\"active\",\"inactive\"]},\r",
											"        \"batchNoOfClasses\": {\"type\": \"number\"},\r",
											"        \"programId\": {\"type\": \"number\"},\r",
											"        \"programName\": {\"type\": \"string\"}\r",
											"    },\r",
											"    \"required\": [\"batchId\", \"batchName\", \"batchDescription\", \"batchStatus\", \"batchNoOfClasses\", \"programId\", \"programName\"]\r",
											"};\r",
											"\r",
											"const responseBodySchema = pm.response.json();\r",
											"\r",
											"pm.test('Response body matches schema', function() {\r",
											"    const Ajv = require('ajv');\r",
											"    const ajv = new Ajv({allErrors: true});\r",
											"\r",
											"    const validate = ajv.compile(responseSchema);\r",
											"    const valid = validate(responseBodySchema);\r",
											"\r",
											"    pm.expect(valid).to.be.true;\r",
											"    pm.expect(validate.errors).to.be.null;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d528f3c9-bc6a-4383-b6db-03db62b2e54e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches/batchId/:batchId",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"batchId",
										":batchId"
									],
									"variable": [
										{
											"id": "5efe7676-8a37-4a43-b84b-939315758a57",
											"key": "batchId",
											"value": "{{programbatch_batchid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Batches by Batch Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97341be8-f7a4-4ff8-93d4-689adfaa02be",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"// Perform schema validation\r",
											"pm.test(\"Validate Response Schema\", function() {\r",
											"    // Define the JSON schema\r",
											"var schema ={\r",
											"    \"type\": \"array\",\r",
											"    \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"batchId\": {\"type\": \"number\"},\r",
											"            \"batchName\": {\"type\": \"string\"},\r",
											"            \"batchDescription\": {\"type\": \"string\"},\r",
											"            \"batchStatus\": {\"type\": \"string\"},\r",
											"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
											"  \t        \"programId\": {\"type\": \"number\"},\r",
											"            \"programName\": {\"type\": \"string\"},  \r",
											"        },\r",
											"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
											"    }\r",
											"}\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8ab1bc26-e896-4542-acd7-8222b0948f97",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches/batchName/:batchName",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"batchName",
										":batchName"
									],
									"variable": [
										{
											"id": "f78192ac-3159-44df-9070-72206d40f5e5",
											"key": "batchName",
											"value": "{{programbatch_batchName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Batches by Program Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6a50dd4-9f47-47ba-8a25-84938a4e0f5e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"\r",
											"// Perform schema validation\r",
											"pm.test(\"Validate Response Schema\", function() {\r",
											"    // Define the JSON schema\r",
											"var schema ={\r",
											"    \"type\": \"array\",\r",
											"    \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"batchId\": {\"type\": \"number\"},\r",
											"            \"batchName\": {\"type\": \"string\"},\r",
											"            \"batchDescription\": {\"type\": \"string\"},\r",
											"            \"batchStatus\": {\"type\": \"string\"},\r",
											"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
											"  \t        \"programId\": {\"type\": \"number\"},\r",
											"            \"programName\": {\"type\": \"string\"},  \r",
											"        },\r",
											"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
											"    }\r",
											"}\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "535924f3-3a22-40e8-b886-520659bd1366",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches/program/:programId",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"program",
										":programId"
									],
									"variable": [
										{
											"id": "a8c717de-a510-4be5-99cf-8db6b760f095",
											"key": "programId",
											"value": "{{programbatch_programId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Batch with batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"// Log the programId to the console (optional)\r",
											"console.log(\"batchId:\", batchId);\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('batchDescription  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchName  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchStatus  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
											"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"if (pm.response.code === 200) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fb525e4-274f-40a9-8bae-0454904b8cf0",
										"exec": [
											"const randomInt = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"\r",
											"// Construct the ProgramName variable\r",
											"const BatchName = `March24-APIAlchemist-SDETDA-SDET021-${randomInt}`;\r",
											"\r",
											"// Set the generated ProgramName as an environment variable\r",
											"pm.environment.set(\"BatchName_ProgramBatch_update\", BatchName);\r",
											"// Array of predefined batch descriptions\r",
											"const batchDescriptions = [\r",
											"    \"A new batch started for Postman Functional testing\",\r",
											"    \"A new batch started for API Functional testing\",\r",
											"    \"A new batch started for Rest assured Automated testing\"\r",
											"];\r",
											"\r",
											"// Select a random batch description from the array\r",
											"const randomIndex = Math.floor(Math.random() * batchDescriptions.length);\r",
											"const batchDescription = batchDescriptions[randomIndex];\r",
											"\r",
											"// Set the generated batch description as an environment variable\r",
											"pm.environment.set(\"Update_ProgramBatch_batch_description\", batchDescription);\r",
											"// Generate a random number of classes within a specified range\r",
											"const minClasses = 2; // Minimum number of classes\r",
											"const maxClasses = 10; // Maximum number of classes\r",
											"\r",
											"const numberOfClasses = Math.floor(Math.random() * (maxClasses - minClasses + 1)) + minClasses;\r",
											"\r",
											"// Set the generated number of classes as an environment variable\r",
											"pm.environment.set(\"Update_ProgramBatch_batch_no_of_classes\", numberOfClasses);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "12b4d631-7021-4e9a-9b70-0420d67dfc11",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{Update_ProgramBatch_batch_description}}\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{BatchName_ProgramBatch_update}}\",\r\n    \"batchNoOfClasses\": {{Update_ProgramBatch_batch_no_of_classes}},\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						},
						{
							"name": "Delete Batch with batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b8ea7941-3c0a-495d-b417-feb0587a21ab",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						}
					],
					"id": "6f42f660-989d-475d-bb80-219d864bd72b"
				},
				{
					"name": "4.Negative scenario For Batch Module",
					"item": [
						{
							"name": "Get all Batches invalid end point",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a50480e3-a60e-4fe3-b0dc-792a82230d07",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Not Found');\r",
											"})\r",
											"\r",
											"/*\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})*/\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 1000;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"/*\r",
											"// Perform schema validation\r",
											"pm.test(\"Validate Response Schema\", function() {\r",
											"    // Define the JSON schema\r",
											"var schema ={\r",
											"    \"type\": \"array\",\r",
											"    \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"batchId\": {\"type\": \"number\"},\r",
											"            \"batchName\": {\"type\": \"string\"},\r",
											"            \"batchDescription\": {},\r",
											"            \"batchStatus\": {\"type\": \"string\"},\r",
											"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
											"  \t        \"programId\": {\"type\": \"number\"},\r",
											"            \"programName\": {\"type\": \"string\"},  \r",
											"        },\r",
											"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
											"    }\r",
											"}\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"  \r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7325aef4-320f-4039-a5ba-7f30da60642e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batche"
							},
							"response": []
						},
						{
							"name": "Get all Batches invalid URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a50480e3-a60e-4fe3-b0dc-792a82230d07",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"/*pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})*/\r",
											"/*\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})*/\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 1000;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Not Found');\r",
											"})\r",
											"/*\r",
											"// Perform schema validation\r",
											"pm.test(\"Validate Response Schema\", function() {\r",
											"    // Define the JSON schema\r",
											"var schema ={\r",
											"    \"type\": \"array\",\r",
											"    \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"batchId\": {\"type\": \"number\"},\r",
											"            \"batchName\": {\"type\": \"string\"},\r",
											"            \"batchDescription\": {},\r",
											"            \"batchStatus\": {\"type\": \"string\"},\r",
											"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
											"  \t        \"programId\": {\"type\": \"number\"},\r",
											"            \"programName\": {\"type\": \"string\"},  \r",
											"        },\r",
											"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
											"    }\r",
											"}\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"  \r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "37ff5335-a3e0-4ef5-9ccd-0ad81cfc8ac7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{invalid_BUrl}}/batches"
							},
							"response": []
						},
						{
							"name": "Create Batch Module Missing program Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"    var limit = 2000;\r",
											"    pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"/*\r",
											"pm.test(\"validate response body properties\", function () {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"batchDescription\": { \"type\": \"string\" },\r",
											"        \"batchName\": { \"type\": \"string\" },\r",
											"        \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"        \"batchStatus\":{\r",
											"                'type': 'string',\r",
											"                'enum': [\r",
											"                    'active',\r",
											"                    'inactive'\r",
											"                ]},\r",
											"        \"programId\": { \"type\": \"integer\"}\r",
											"    },\r",
											"    \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema validation', function () {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});*/\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3b82eda5-ba4d-4ad7-b501-258af2e9ccd6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{BatchDescription}}\",\r\n    \"batchName\": \"{{BatchName}}\",\r\n    \"batchNoOfClasses\": \"{{BatchNoClasses}}\",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\" \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Create Batch Module Missing batch no of classes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"/*pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Created');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"var requestBody = pm.request.body.raw;\r",
											"\r",
											"pm.test('batchDescription  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchName  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchStatus  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
											"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"//pm.collectionVariables.set(\"batchId\", batchId);\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"console.log(\"batch Name:\", batchName);\r",
											"console.log(\"batchId:\", batchId);\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "17995205-1a01-4b6c-9e8d-d195f5f4368d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{BatchDescription}}\",\r\n    \"batchName\": \"{{BatchName}}\",\r\n    \"batchNoOfClasses\": \" \",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Create Batch Module invalid program Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"    var limit = 2000;\r",
											"    pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"/*\r",
											"pm.test(\"validate response body properties\", function () {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"batchDescription\": { \"type\": \"string\" },\r",
											"        \"batchName\": { \"type\": \"string\" },\r",
											"        \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"        \"batchStatus\":{\r",
											"                'type': 'string',\r",
											"                'enum': [\r",
											"                    'active',\r",
											"                    'inactive'\r",
											"                ]},\r",
											"        \"programId\": { \"type\": \"integer\"}\r",
											"    },\r",
											"    \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema validation', function () {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});*/\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "db595c00-f85e-4c4c-8681-92a7955a32bf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{BatchDescription}}\",\r\n    \"batchName\": \"{{BatchName}}\",\r\n    \"batchNoOfClasses\": \"{{BatchNoClasses}}\",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Create Batch Module invalid batch status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"//pm.collectionVariables.set(\"batchId\", batchId);\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"console.log(\"batch Name:\", batchName);\r",
											"console.log(\"batchId:\", batchId);\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"if (pm.response.code === 201) {\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "da17c1b7-b362-4b48-bedc-b4164fd3a294",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{BatchDescription}}\",\r\n    \"batchName\": \"{{BatchName}}\",\r\n    \"batchNoOfClasses\": \"{{BatchNoClasses}}\",\r\n    \"batchStatus\": \"foo\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Create Batch Module Missing batch status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"//pm.collectionVariables.set(\"batchId\", batchId);\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"console.log(\"batch Name:\", batchName);\r",
											"console.log(\"batchId:\", batchId);\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"if (pm.response.code === 201) {\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "77bd078f-b4db-4f96-9994-0674498d06d8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{BatchDescription}}\",\r\n    \"batchName\": \"{{BatchName}}\",\r\n    \"batchNoOfClasses\": \"{{BatchNoClasses}}\",\r\n    \"batchStatus\": \" \",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Create Batch Module batch no of classes is Zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"/*pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Created');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"var requestBody = pm.request.body.raw;\r",
											"\r",
											"pm.test('batchDescription  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchName  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchStatus  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
											"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"//pm.collectionVariables.set(\"batchId\", batchId);\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"console.log(\"batch Name:\", batchName);\r",
											"console.log(\"batchId:\", batchId);\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b37c634c-94bc-4f59-bdaa-f5e2b320a450",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{BatchDescription}}\",\r\n    \"batchName\": \"{{BatchName}}\",\r\n    \"batchNoOfClasses\": \"0\",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Create Batch Module batch no of classes is alphabets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"/*pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Created');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"var requestBody = pm.request.body.raw;\r",
											"\r",
											"pm.test('batchDescription  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchName  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchStatus  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
											"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"//pm.collectionVariables.set(\"batchId\", batchId);\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"console.log(\"batch Name:\", batchName);\r",
											"console.log(\"batchId:\", batchId);\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9b6867e4-a832-454b-89c0-658871ea079a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{BatchDescription}}\",\r\n    \"batchName\": \"{{BatchName}}\",\r\n    \"batchNoOfClasses\": \"qqq\",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Create Batch Module batch no of classes is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"/*pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Created');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"var requestBody = pm.request.body.raw;\r",
											"\r",
											"pm.test('batchDescription  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchName  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchStatus  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
											"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"//pm.collectionVariables.set(\"batchId\", batchId);\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"console.log(\"batch Name:\", batchName);\r",
											"console.log(\"batchId:\", batchId);\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "eda3df3b-d737-4f54-8592-ac16933ccd10",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{BatchDescription}}\",\r\n    \"batchName\": \"{{BatchName}}\",\r\n    \"batchNoOfClasses\": null,\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Create Batch Module batch status is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"//pm.collectionVariables.set(\"batchId\", batchId);\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"console.log(\"batch Name:\", batchName);\r",
											"console.log(\"batchId:\", batchId);\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"if (pm.response.code === 201) {\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2dfe0775-473a-446c-983c-0f98ade43559",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{BatchDescription}}\",\r\n    \"batchName\": \"{{BatchName}}\",\r\n    \"batchNoOfClasses\": \"{{BatchNoClasses}}\",\r\n    \"batchStatus\": \"null\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Create Batch Module Missing batchName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"/*\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Created');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"var requestBody = pm.request.body.raw;\r",
											"\r",
											"pm.test('batchDescription  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchName  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchStatus  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
											"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"//pm.collectionVariables.set(\"batchId\", batchId);\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"console.log(\"batch Name:\", batchName);\r",
											"console.log(\"batchId:\", batchId);\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "638b09bd-ae03-4a48-b5e2-3f7cee19a075",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{BatchDescription}}\",\r\n    \"batchName\": \" \",\r\n    \"batchNoOfClasses\": \"{{BatchNoClasses}}\",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Create Batch Module batchName is numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"/*\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Created');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"var requestBody = pm.request.body.raw;\r",
											"\r",
											"pm.test('batchDescription  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchName  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchStatus  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
											"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"//pm.collectionVariables.set(\"batchId\", batchId);\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"console.log(\"batch Name:\", batchName);\r",
											"console.log(\"batchId:\", batchId);\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3794ccdd-ec12-4bc6-aec7-393e2543d935",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{BatchDescription}}\",\r\n    \"batchName\": \"2222\",\r\n    \"batchNoOfClasses\": \"{{BatchNoClasses}}\",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Create Batch Module batchName is Special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"/*\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Created');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"var requestBody = pm.request.body.raw;\r",
											"\r",
											"pm.test('batchDescription  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchName  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchStatus  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
											"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"//pm.collectionVariables.set(\"batchId\", batchId);\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"console.log(\"batch Name:\", batchName);\r",
											"console.log(\"batchId:\", batchId);\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6d79fd9c-f149-4957-8772-c027ff3056bd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{BatchDescription}}\",\r\n    \"batchName\": \"2222\",\r\n    \"batchNoOfClasses\": \"{{BatchNoClasses}}\",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Create Batch Module Missing batch description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"/*pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Created');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"var requestBody = pm.request.body.raw;\r",
											"\r",
											"pm.test('batchDescription  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchName  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchStatus  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
											"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"//pm.collectionVariables.set(\"batchId\", batchId);\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"console.log(\"batch Name:\", batchName);\r",
											"console.log(\"batchId:\", batchId);\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3dfe3e56-cfba-4399-bf16-c392608808ad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \" \",\r\n    \"batchName\": \"{{BatchName}}\",\r\n    \"batchNoOfClasses\": \"{{BatchNoClasses}}\",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Create Batch Module batch description numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"/*pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Created');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"var requestBody = pm.request.body.raw;\r",
											"\r",
											"pm.test('batchDescription  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchName  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchStatus  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
											"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"//pm.collectionVariables.set(\"batchId\", batchId);\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"console.log(\"batch Name:\", batchName);\r",
											"console.log(\"batchId:\", batchId);\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "99e62c05-b69f-4dda-bfe3-edb3b5d97627",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": 111,\r\n    \"batchName\": \"{{BatchName}}\",\r\n    \"batchNoOfClasses\": \"{{BatchNoClasses}}\",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Create Batch Module batch description is Special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"/*pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Created');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"var requestBody = pm.request.body.raw;\r",
											"\r",
											"pm.test('batchDescription  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchName  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchStatus  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
											"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"//pm.collectionVariables.set(\"batchId\", batchId);\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"console.log(\"batch Name:\", batchName);\r",
											"console.log(\"batchId:\", batchId);\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9066119f-3d4f-4d70-ae71-c130fc1f0061",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"@#$%\",\r\n    \"batchName\": \"{{BatchName}}\",\r\n    \"batchNoOfClasses\": \"{{BatchNoClasses}}\",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Update Batch with batch Id Batch name is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"// Log the programId to the console (optional)\r",
											"console.log(\"batchId:\", batchId);\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"/*\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"\r",
											"\r",
											"*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fb525e4-274f-40a9-8bae-0454904b8cf0",
										"exec": [
											"// Extract the request URL from environment variables\r",
											"var requestUrl = pm.variables.replaceIn(\"{{BaseURL}}/batches/{{programbatch_batchid}}\");\r",
											"\r",
											"// Check if the request URL contains the path parameter placeholder\r",
											"if (requestUrl.includes('{{programbatch_batchid}}')) {\r",
											"    // Path parameter is missing, set an error message and cancel the request\r",
											"    pm.environment.set(\"error_message\", \"Path parameter 'programbatch_batchid' is missing\");\r",
											"    pm.request.cancel = true;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "629e4106-6af3-422d-9688-278d116714a5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{Update_BatchDescription}}\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \" \",\r\n    \"batchNoOfClasses\": {{UpdateNoClasses}},\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						},
						{
							"name": "Update Batch with batch Id Batch name is Special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"// Log the programId to the console (optional)\r",
											"console.log(\"batchId:\", batchId);\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"/*\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"\r",
											"\r",
											"*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fb525e4-274f-40a9-8bae-0454904b8cf0",
										"exec": [
											"// Extract the request URL from environment variables\r",
											"var requestUrl = pm.variables.replaceIn(\"{{BaseURL}}/batches/{{programbatch_batchid}}\");\r",
											"\r",
											"// Check if the request URL contains the path parameter placeholder\r",
											"if (requestUrl.includes('{{programbatch_batchid}}')) {\r",
											"    // Path parameter is missing, set an error message and cancel the request\r",
											"    pm.environment.set(\"error_message\", \"Path parameter 'programbatch_batchid' is missing\");\r",
											"    pm.request.cancel = true;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ce8595d2-146b-4876-bb6e-0a5ff76b2c18",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{Update_BatchDescription}}\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"$$$\",\r\n    \"batchNoOfClasses\": {{UpdateNoClasses}},\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						},
						{
							"name": "Update Batch with batch Id Batch name is numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"// Log the programId to the console (optional)\r",
											"console.log(\"batchId:\", batchId);\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"/*\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"\r",
											"\r",
											"*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fb525e4-274f-40a9-8bae-0454904b8cf0",
										"exec": [
											"// Extract the request URL from environment variables\r",
											"var requestUrl = pm.variables.replaceIn(\"{{BaseURL}}/batches/{{programbatch_batchid}}\");\r",
											"\r",
											"// Check if the request URL contains the path parameter placeholder\r",
											"if (requestUrl.includes('{{programbatch_batchid}}')) {\r",
											"    // Path parameter is missing, set an error message and cancel the request\r",
											"    pm.environment.set(\"error_message\", \"Path parameter 'programbatch_batchid' is missing\");\r",
											"    pm.request.cancel = true;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a6e12a88-62f8-42ec-a5d7-5f59a8d2cabb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{Update_BatchDescription}}\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": 11,\r\n    \"batchNoOfClasses\": {{UpdateNoClasses}},\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						},
						{
							"name": "Update Batch with batch Id Missing batch description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"/*\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"// Log the programId to the console (optional)\r",
											"console.log(\"batchId:\", batchId);\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);*/\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"\r",
											"/*pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fb525e4-274f-40a9-8bae-0454904b8cf0",
										"exec": [
											"// Extract the request URL from environment variables\r",
											"var requestUrl = pm.variables.replaceIn(\"{{BaseURL}}/batches/{{programbatch_batchid}}\");\r",
											"\r",
											"// Check if the request URL contains the path parameter placeholder\r",
											"if (requestUrl.includes('{{programbatch_batchid}}')) {\r",
											"    // Path parameter is missing, set an error message and cancel the request\r",
											"    pm.environment.set(\"error_message\", \"Path parameter 'programbatch_batchid' is missing\");\r",
											"    pm.request.cancel = true;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a9ff3b63-faf5-4b66-920e-3c2165cbbc37",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \" \",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": {{UpdateNoClasses}},\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						},
						{
							"name": "Update Batch with batch Id batch description is special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"/*\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"// Log the programId to the console (optional)\r",
											"console.log(\"batchId:\", batchId);\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);*/\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"/*pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fb525e4-274f-40a9-8bae-0454904b8cf0",
										"exec": [
											"// Extract the request URL from environment variables\r",
											"var requestUrl = pm.variables.replaceIn(\"{{BaseURL}}/batches/{{programbatch_batchid}}\");\r",
											"\r",
											"// Check if the request URL contains the path parameter placeholder\r",
											"if (requestUrl.includes('{{programbatch_batchid}}')) {\r",
											"    // Path parameter is missing, set an error message and cancel the request\r",
											"    pm.environment.set(\"error_message\", \"Path parameter 'programbatch_batchid' is missing\");\r",
											"    pm.request.cancel = true;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fe2e92b4-b3fe-477d-9b82-c915724dc286",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"@@@@\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": {{UpdateNoClasses}},\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						},
						{
							"name": "Update Batch with batch Id batch description is numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"/*\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"// Log the programId to the console (optional)\r",
											"console.log(\"batchId:\", batchId);\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);*/\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"/*pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fb525e4-274f-40a9-8bae-0454904b8cf0",
										"exec": [
											"// Extract the request URL from environment variables\r",
											"var requestUrl = pm.variables.replaceIn(\"{{BaseURL}}/batches/{{programbatch_batchid}}\");\r",
											"\r",
											"// Check if the request URL contains the path parameter placeholder\r",
											"if (requestUrl.includes('{{programbatch_batchid}}')) {\r",
											"    // Path parameter is missing, set an error message and cancel the request\r",
											"    pm.environment.set(\"error_message\", \"Path parameter 'programbatch_batchid' is missing\");\r",
											"    pm.request.cancel = true;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e43f91d7-b46f-42d8-bcbe-6b1b69428d19",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"1111\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": {{UpdateNoClasses}},\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						},
						{
							"name": "Update Batch with No of classes Missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"\r",
											"// Parse the response body as JSON\r",
											"/*var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"// Log the programId to the console (optional)\r",
											"console.log(\"batchId:\", batchId);\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);*/\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"\r",
											"/*pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fb525e4-274f-40a9-8bae-0454904b8cf0",
										"exec": [
											"// Extract the request URL from environment variables\r",
											"var requestUrl = pm.variables.replaceIn(\"{{BaseURL}}/batches/{{programbatch_batchid}}\");\r",
											"\r",
											"// Check if the request URL contains the path parameter placeholder\r",
											"if (requestUrl.includes('{{programbatch_batchid}}')) {\r",
											"    // Path parameter is missing, set an error message and cancel the request\r",
											"    pm.environment.set(\"error_message\", \"Path parameter 'programbatch_batchid' is missing\");\r",
											"    pm.request.cancel = true;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2a6b974a-6bbb-44a5-9952-1f238ecadb88",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{Update_BatchDescription}}\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": \" \",\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						},
						{
							"name": "Update Batch with No of classes are alphabets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"\r",
											"// Parse the response body as JSON\r",
											"/*var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"// Log the programId to the console (optional)\r",
											"console.log(\"batchId:\", batchId);\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);*/\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"/*pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fb525e4-274f-40a9-8bae-0454904b8cf0",
										"exec": [
											"// Extract the request URL from environment variables\r",
											"var requestUrl = pm.variables.replaceIn(\"{{BaseURL}}/batches/{{programbatch_batchid}}\");\r",
											"\r",
											"// Check if the request URL contains the path parameter placeholder\r",
											"if (requestUrl.includes('{{programbatch_batchid}}')) {\r",
											"    // Path parameter is missing, set an error message and cancel the request\r",
											"    pm.environment.set(\"error_message\", \"Path parameter 'programbatch_batchid' is missing\");\r",
											"    pm.request.cancel = true;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f2daef80-fee2-443d-b4fb-5e7d1f28a077",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{Update_BatchDescription}}\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": \"aa\",\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						},
						{
							"name": "Update Batch with No of classes are Special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"\r",
											"// Parse the response body as JSON\r",
											"/*var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"// Log the programId to the console (optional)\r",
											"console.log(\"batchId:\", batchId);\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);*/\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"\r",
											"/*pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fb525e4-274f-40a9-8bae-0454904b8cf0",
										"exec": [
											"// Extract the request URL from environment variables\r",
											"var requestUrl = pm.variables.replaceIn(\"{{BaseURL}}/batches/{{programbatch_batchid}}\");\r",
											"\r",
											"// Check if the request URL contains the path parameter placeholder\r",
											"if (requestUrl.includes('{{programbatch_batchid}}')) {\r",
											"    // Path parameter is missing, set an error message and cancel the request\r",
											"    pm.environment.set(\"error_message\", \"Path parameter 'programbatch_batchid' is missing\");\r",
											"    pm.request.cancel = true;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f068bd8c-15fc-435b-9c65-63176a11e6c6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{Update_BatchDescription}}\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": \"$$$\",\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						},
						{
							"name": "Update Batch with batch Id batch status is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"\r",
											"// Parse the response body as JSON\r",
											"//var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"//var batchId = responseBody.batchId;\r",
											"////var batchName = responseBody.batchName;\r",
											"// Log the programId to the console (optional)\r",
											"//console.log(\"batchId:\", batchId);\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"//pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"//pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"\r",
											"/*pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fb525e4-274f-40a9-8bae-0454904b8cf0",
										"exec": [
											"// Extract the request URL from environment variables\r",
											"var requestUrl = pm.variables.replaceIn(\"{{BaseURL}}/batches/{{programbatch_batchid}}\");\r",
											"\r",
											"// Check if the request URL contains the path parameter placeholder\r",
											"if (requestUrl.includes('{{programbatch_batchid}}')) {\r",
											"    // Path parameter is missing, set an error message and cancel the request\r",
											"    pm.environment.set(\"error_message\", \"Path parameter 'programbatch_batchid' is missing\");\r",
											"    pm.request.cancel = true;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "de923791-26d5-433f-b7e2-c79ca92fdda0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{Update_BatchDescription}}\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": {{UpdateNoClasses}},\r\n    \"batchStatus\": \" \",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						},
						{
							"name": "Update Batch with batch Id batch status is invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"\r",
											"// Parse the response body as JSON\r",
											"//var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"//var batchId = responseBody.batchId;\r",
											"////var batchName = responseBody.batchName;\r",
											"// Log the programId to the console (optional)\r",
											"//console.log(\"batchId:\", batchId);\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"//pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"//pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"\r",
											"/*pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fb525e4-274f-40a9-8bae-0454904b8cf0",
										"exec": [
											"// Extract the request URL from environment variables\r",
											"var requestUrl = pm.variables.replaceIn(\"{{BaseURL}}/batches/{{programbatch_batchid}}\");\r",
											"\r",
											"// Check if the request URL contains the path parameter placeholder\r",
											"if (requestUrl.includes('{{programbatch_batchid}}')) {\r",
											"    // Path parameter is missing, set an error message and cancel the request\r",
											"    pm.environment.set(\"error_message\", \"Path parameter 'programbatch_batchid' is missing\");\r",
											"    pm.request.cancel = true;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e27c3a51-5ff2-4dab-94ab-be5168df9a92",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{Update_BatchDescription}}\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": {{UpdateNoClasses}},\r\n    \"batchStatus\": \"not active\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						},
						{
							"name": "Update Batch with batch Id Program Id is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"\r",
											"// Parse the response body as JSON\r",
											"/*var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"// Log the programId to the console (optional)\r",
											"console.log(\"batchId:\", batchId);\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);*/\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"/*\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fb525e4-274f-40a9-8bae-0454904b8cf0",
										"exec": [
											"// Extract the request URL from environment variables\r",
											"var requestUrl = pm.variables.replaceIn(\"{{BaseURL}}/batches/{{programbatch_batchid}}\");\r",
											"\r",
											"// Check if the request URL contains the path parameter placeholder\r",
											"if (requestUrl.includes('{{programbatch_batchid}}')) {\r",
											"    // Path parameter is missing, set an error message and cancel the request\r",
											"    pm.environment.set(\"error_message\", \"Path parameter 'programbatch_batchid' is missing\");\r",
											"    pm.request.cancel = true;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "421d6899-4970-496c-a823-afd048c74fa9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{Update_BatchDescription}}\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": {{UpdateNoClasses}},\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": \" \",\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						},
						{
							"name": "Update Batch with batch Id Program Id is not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"\r",
											"// Parse the response body as JSON\r",
											"/*var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"// Log the programId to the console (optional)\r",
											"console.log(\"batchId:\", batchId);\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);*/\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"/*\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fb525e4-274f-40a9-8bae-0454904b8cf0",
										"exec": [
											"// Extract the request URL from environment variables\r",
											"var requestUrl = pm.variables.replaceIn(\"{{BaseURL}}/batches/{{programbatch_batchid}}\");\r",
											"\r",
											"// Check if the request URL contains the path parameter placeholder\r",
											"if (requestUrl.includes('{{programbatch_batchid}}')) {\r",
											"    // Path parameter is missing, set an error message and cancel the request\r",
											"    pm.environment.set(\"error_message\", \"Path parameter 'programbatch_batchid' is missing\");\r",
											"    pm.request.cancel = true;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3e0ca684-ea70-461e-9e74-89a1b46eb596",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{Update_BatchDescription}}\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": {{UpdateNoClasses}},\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": \"1\",\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						},
						{
							"name": "Delete Batch with batch Id with invalid end point/ empty batchid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Bad Request');\r",
											"})\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "30c82734-f866-4fd5-91cc-ec26fe6da273",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/batches/{{ }}"
							},
							"response": []
						},
						{
							"name": "Delete Batch with batch Id with invalid batchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"/*pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})*/\r",
											"\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Not Found');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e785d717-87c7-4183-a0f0-cfa6077c5f94",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/batches/{{programbatch_batchid-invalid}}"
							},
							"response": []
						},
						{
							"name": "Create Batch Module Bug- Batch description should not be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Created');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"var requestBody = pm.request.body.raw;\r",
											"\r",
											"pm.test('batchDescription  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchName  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchStatus  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
											"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"//pm.collectionVariables.set(\"batchId\", batchId);\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"console.log(\"batch Name:\", batchName);\r",
											"console.log(\"batchId:\", batchId);\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3f31e915-4670-4bf5-baa9-2c756efeb64d",
										"exec": [
											"const randomInt = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"\r",
											"// Construct the ProgramName variable\r",
											"const BatchName = `March24-APIAlchemist-SDETDA-SDET120-${randomInt}`;\r",
											"\r",
											"// Set the generated ProgramName as an environment variable\r",
											"pm.environment.set(\"BatchName_ProgramBatch\", BatchName);\r",
											"// Array of predefined batch descriptions\r",
											"const batchDescriptions = [\r",
											"    \"A new batch started for Postman Functional testing\",\r",
											"    \"A new batch started for API Functional testing\",\r",
											"    \"A new batch started for Rest assured Automated testing\"\r",
											"];\r",
											"\r",
											"// Select a random batch description from the array\r",
											"const randomIndex = Math.floor(Math.random() * batchDescriptions.length);\r",
											"const batchDescription = batchDescriptions[randomIndex];\r",
											"\r",
											"// Set the generated batch description as an environment variable\r",
											"pm.environment.set(\"ProgramBatch_batch_description\", batchDescription);\r",
											"// Generate a random number of classes within a specified range\r",
											"const minClasses = 2; // Minimum number of classes\r",
											"const maxClasses = 10; // Maximum number of classes\r",
											"\r",
											"const numberOfClasses = Math.floor(Math.random() * (maxClasses - minClasses + 1)) + minClasses;\r",
											"\r",
											"// Set the generated number of classes as an environment variable\r",
											"pm.environment.set(\"ProgramBatch_batch_no_of_classes\", numberOfClasses);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "302a58ac-f963-4703-9210-40e01c985e60",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": null,\r\n    \"batchName\": \"{{BatchName_ProgramBatch}}\",\r\n    \"batchNoOfClasses\": \"{{ProgramBatch_batch_no_of_classes}}\",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Update Batch with batch Id  Bug- Batch description should not be null",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"// Log the programId to the console (optional)\r",
											"console.log(\"batchId:\", batchId);\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"pm.test('batchDescription  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchName  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchStatus  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
											"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
											"});\r",
											"if (pm.response.code === 200) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fb525e4-274f-40a9-8bae-0454904b8cf0",
										"exec": [
											"const randomInt = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"\r",
											"// Construct the ProgramName variable\r",
											"const BatchName = `March24-APIAlchemist-SDETDA-SDET021-${randomInt}`;\r",
											"\r",
											"// Set the generated ProgramName as an environment variable\r",
											"pm.environment.set(\"BatchName_ProgramBatch_update\", BatchName);\r",
											"// Set the generated ProgramName as an environment variable\r",
											"\r",
											"const batchDescriptions = [\r",
											"    \"A new batch started for Postman Functional testing\",\r",
											"    \"A new batch started for API Functional testing\",\r",
											"    \"A new batch started for Rest assured Automated testing\"\r",
											"];\r",
											"\r",
											"// Select a random batch description from the array\r",
											"const randomIndex = Math.floor(Math.random() * batchDescriptions.length);\r",
											"const batchDescription = batchDescriptions[randomIndex];\r",
											"\r",
											"// Set the generated batch description as an environment variable\r",
											"pm.environment.set(\"Update_ProgramBatch_batch_description\", batchDescription);\r",
											"// Generate a random number of classes within a specified range\r",
											"const minClasses = 2; // Minimum number of classes\r",
											"const maxClasses = 10; // Maximum number of classes\r",
											"\r",
											"const numberOfClasses = Math.floor(Math.random() * (maxClasses - minClasses + 1)) + minClasses;\r",
											"\r",
											"// Set the generated number of classes as an environment variable\r",
											"pm.environment.set(\"Update_ProgramBatch_batch_no_of_classes\", numberOfClasses);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "25b085cf-805d-4aca-a5d2-c4e9591c8501",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": null,\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{BatchName_ProgramBatch_update}}\",\r\n    \"batchNoOfClasses\": {{Update_ProgramBatch_batch_no_of_classes}},\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						},
						{
							"name": "Delete Batch with batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7444f0e6-2ccf-432f-ac70-1cc06d8eb809",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						},
						{
							"name": "Delete by program Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42f5d782-fea1-44fe-a194-e95ad9f572d5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "efc62419-6d13-453e-9db9-92b65e9ca158",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/deletebyprogid/{{programbatch_programId}}"
							},
							"response": []
						},
						{
							"name": "User logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff6f3489-6755-4c59-9729-9b914da29989",
										"exec": [
											"//Validate response time\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('OK');\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ac2f549d-37b5-45e5-917b-6018c3cc0062",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/logoutlms"
							},
							"response": []
						}
					],
					"id": "dc5c0863-ce6c-4e96-9805-b96cbe1602d7"
				},
				{
					"name": "1.Unauthorized",
					"item": [
						{
							"name": "Create Batch Module",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"/*\r",
											"var requestBody = pm.request.body.raw;\r",
											"\r",
											"pm.test('batchDescription  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchName  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchStatus  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
											"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"//pm.collectionVariables.set(\"batchId\", batchId);\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"console.log(\"batch Name:\", batchName);\r",
											"console.log(\"batchId:\", batchId);\r",
											"if (pm.response.code === 201) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3f31e915-4670-4bf5-baa9-2c756efeb64d",
										"exec": [
											"const randomInt = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"\r",
											"// Construct the ProgramName variable\r",
											"const BatchName = `March24-APIAlchemist-SDETDA-SDET120-${randomInt}`;\r",
											"\r",
											"// Set the generated ProgramName as an environment variable\r",
											"pm.environment.set(\"BatchName_ProgramBatch\", BatchName);\r",
											"\r",
											"// Array of predefined batch descriptions\r",
											"const batchDescriptions = [\r",
											"    \"A new batch started for Postman Functional testing\",\r",
											"    \"A new batch started for API Functional testing\",\r",
											"    \"A new batch started for Rest assured Automated testing\"\r",
											"];\r",
											"\r",
											"// Select a random batch description from the array\r",
											"const randomIndex = Math.floor(Math.random() * batchDescriptions.length);\r",
											"const batchDescription = batchDescriptions[randomIndex];\r",
											"\r",
											"// Set the generated batch description as an environment variable\r",
											"pm.environment.set(\"ProgramBatch_batch_description\", batchDescription);\r",
											"// Generate a random number of classes within a specified range\r",
											"const minClasses = 2; // Minimum number of classes\r",
											"const maxClasses = 10; // Maximum number of classes\r",
											"\r",
											"const numberOfClasses = Math.floor(Math.random() * (maxClasses - minClasses + 1)) + minClasses;\r",
											"\r",
											"// Set the generated number of classes as an environment variable\r",
											"pm.environment.set(\"ProgramBatch_batch_no_of_classes\", numberOfClasses);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8240c63e-7e93-40d5-b838-60497e3785e6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": ""
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{ProgramBatch_batch_description}}\",\r\n    \"batchName\": \"{{BatchName_ProgramBatch}}\",\r\n    \"batchNoOfClasses\": \"{{ProgramBatch_batch_no_of_classes}}\",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Get all Batches",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a50480e3-a60e-4fe3-b0dc-792a82230d07",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 2000;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"})\r",
											"/*\r",
											"// Perform schema validation\r",
											"pm.test(\"Validate Response Schema\", function() {\r",
											"    // Define the JSON schema\r",
											"var schema ={\r",
											"    \"type\": \"array\",\r",
											"    \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"batchId\": {\"type\": \"number\"},\r",
											"            \"batchName\": {\"type\": \"string\"},\r",
											"            \"batchDescription\": {},\r",
											"            \"batchStatus\": {\"type\": \"string\"},\r",
											"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
											"  \t        \"programId\": {\"type\": \"number\"},\r",
											"            \"programName\": {\"type\": \"string\"},  \r",
											"        },\r",
											"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
											"    }\r",
											"}\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"  \r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "eb61564f-ba59-4daa-b4af-a2ed0a8dd491",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": ""
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"response": []
						},
						{
							"name": "Get all Batches by batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96a1d597-2a84-4a35-a8c1-84612ecb0f84",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"})\r",
											"/*//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"batchId\": {\"type\": \"number\"},\r",
											"        \"batchName\": {\"type\": \"string\"},\r",
											"        \"batchDescription\": {\"type\": \"string\"},\r",
											"        \"batchStatus\": {\"type\": \"string\", \"enum\": [\"Active\", \"Inactive\",\"active\",\"inactive\"]},\r",
											"        \"batchNoOfClasses\": {\"type\": \"number\"},\r",
											"        \"programId\": {\"type\": \"number\"},\r",
											"        \"programName\": {\"type\": \"string\"}\r",
											"    },\r",
											"    \"required\": [\"batchId\", \"batchName\", \"batchDescription\", \"batchStatus\", \"batchNoOfClasses\", \"programId\", \"programName\"]\r",
											"};\r",
											"\r",
											"const responseBodySchema = pm.response.json();\r",
											"\r",
											"pm.test('Response body matches schema', function() {\r",
											"    const Ajv = require('ajv');\r",
											"    const ajv = new Ajv({allErrors: true});\r",
											"\r",
											"    const validate = ajv.compile(responseSchema);\r",
											"    const valid = validate(responseBodySchema);\r",
											"\r",
											"    pm.expect(valid).to.be.true;\r",
											"    pm.expect(validate.errors).to.be.null;\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d4e47afb-51f9-4ddb-b905-bc954d334172",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": ""
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches/batchId/:batchId",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"batchId",
										":batchId"
									],
									"variable": [
										{
											"id": "5efe7676-8a37-4a43-b84b-939315758a57",
											"key": "batchId",
											"value": "{{programbatch_batchid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Batches by Batch Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97341be8-f7a4-4ff8-93d4-689adfaa02be",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"})\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"/*\r",
											"// Perform schema validation\r",
											"pm.test(\"Validate Response Schema\", function() {\r",
											"    // Define the JSON schema\r",
											"var schema ={\r",
											"    \"type\": \"array\",\r",
											"    \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"batchId\": {\"type\": \"number\"},\r",
											"            \"batchName\": {\"type\": \"string\"},\r",
											"            \"batchDescription\": {\"type\": \"string\"},\r",
											"            \"batchStatus\": {\"type\": \"string\"},\r",
											"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
											"  \t        \"programId\": {\"type\": \"number\"},\r",
											"            \"programName\": {\"type\": \"string\"},  \r",
											"        },\r",
											"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
											"    }\r",
											"}\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"  \r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "88087164-0fee-4e43-92f7-ed5d17a5677a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": ""
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches/batchName/:batchName",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"batchName",
										":batchName"
									],
									"variable": [
										{
											"id": "f78192ac-3159-44df-9070-72206d40f5e5",
											"key": "batchName",
											"value": "{{programbatch_batchName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Batches by Program Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6a50dd4-9f47-47ba-8a25-84938a4e0f5e",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 1000;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"/*\r",
											"// Perform schema validation\r",
											"pm.test(\"Validate Response Schema\", function() {\r",
											"    // Define the JSON schema\r",
											"var schema ={\r",
											"    \"type\": \"array\",\r",
											"    \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"batchId\": {\"type\": \"number\"},\r",
											"            \"batchName\": {\"type\": \"string\"},\r",
											"            \"batchDescription\": {\"type\": \"string\"},\r",
											"            \"batchStatus\": {\"type\": \"string\"},\r",
											"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
											"  \t        \"programId\": {\"type\": \"number\"},\r",
											"            \"programName\": {\"type\": \"string\"},  \r",
											"        },\r",
											"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
											"    }\r",
											"}\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"  \r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "52a3a69d-2ad9-4a7d-b7df-97da84a37d52",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": ""
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches/program/:programId",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"program",
										":programId"
									],
									"variable": [
										{
											"id": "a8c717de-a510-4be5-99cf-8db6b760f095",
											"key": "programId",
											"value": "{{programbatch_programId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Batch with batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"})\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"/*// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the programId\r",
											"var batchId = responseBody.batchId;\r",
											"var batchName = responseBody.batchName;\r",
											"// Log the programId to the console (optional)\r",
											"console.log(\"batchId:\", batchId);\r",
											"\r",
											"// Store the programId in an environment or global variable for later use (optional)\r",
											"pm.environment.set(\"programbatch_batchName\", batchName);\r",
											"pm.environment.set(\"programbatch_batchid\",batchId);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});\r",
											"pm.test('batchDescription  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchName  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test('batchStatus  is not empty', function () {\r",
											"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
											"})\r",
											"\r",
											"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
											"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"if (pm.response.code === 200) {\r",
											"pm.test(\"validate response body properties\", () => {\r",
											"    // Check the expected properties exist\r",
											"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
											"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
											"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
											"  \r",
											"});\r",
											"\r",
											"const schema ={\r",
											"\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchDescription\": { \"type\": \"string\" },\r",
											"    \"batchName\": { \"type\": \"string\" },\r",
											"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
											"    \"batchStatus\":{\r",
											"            'type': 'string',\r",
											"            'enum': [\r",
											"                'active',\r",
											"                'inactive'\r",
											"            ]},\r",
											"    \"programId\": { \"type\": \"integer\"}\r",
											"  },\r",
											"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
											"};\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"}\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fb525e4-274f-40a9-8bae-0454904b8cf0",
										"exec": [
											"const randomInt = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"\r",
											"// Construct the ProgramName variable\r",
											"const BatchName = `March24-APIAlchemist-SDETDA-SDET021-${randomInt}`;\r",
											"\r",
											"// Set the generated ProgramName as an environment variable\r",
											"pm.environment.set(\"BatchName_ProgramBatch_update\", BatchName);\r",
											"// Array of predefined batch descriptions\r",
											"const batchDescriptions = [\r",
											"    \"A new batch started for Postman Functional testing\",\r",
											"    \"A new batch started for API Functional testing\",\r",
											"    \"A new batch started for Rest assured Automated testing\"\r",
											"];\r",
											"\r",
											"// Select a random batch description from the array\r",
											"const randomIndex = Math.floor(Math.random() * batchDescriptions.length);\r",
											"const batchDescription = batchDescriptions[randomIndex];\r",
											"\r",
											"// Set the generated batch description as an environment variable\r",
											"pm.environment.set(\"Update_ProgramBatch_batch_description\", batchDescription);\r",
											"// Generate a random number of classes within a specified range\r",
											"const minClasses = 2; // Minimum number of classes\r",
											"const maxClasses = 10; // Maximum number of classes\r",
											"\r",
											"const numberOfClasses = Math.floor(Math.random() * (maxClasses - minClasses + 1)) + minClasses;\r",
											"\r",
											"// Set the generated number of classes as an environment variable\r",
											"pm.environment.set(\"Update_ProgramBatch_batch_no_of_classes\", numberOfClasses);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4f46c7ab-cbca-4f72-a13a-ee90bf700c88",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchDescription\": \"{{Update_ProgramBatch_batch_description}}\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{BatchName_ProgramBatch_update}}\",\r\n    \"batchNoOfClasses\": {{Update_ProgramBatch_batch_no_of_classes}},\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						},
						{
							"name": "Delete Batch with batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73bae510-17d2-44de-9871-c4223eac25d2",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"})\r",
											"pm.test('Check Status Text', () => {\r",
											"    pm.response.to.have.status('Unauthorized');\r",
											"})\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.response.to.be.json;\r",
											"})\r",
											"//Validate response time\r",
											"pm.test(\"Response time is less than limit\", function() {\r",
											"var limit = 500;\r",
											"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a546c933-ac5c-4611-b173-55bbb12ff0d8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programbatchmodule_tokenaccessToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
							},
							"response": []
						}
					],
					"id": "aa13c743-2e01-4dd5-9e57-ce337bf30093"
				}
			],
			"id": "e8bbb583-4c21-40ca-94c9-56d82255e0da"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7e4612a2-a725-4951-a1e3-e4eac7dcc070",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "ddc5b2c5-5d90-4bcf-9477-150b070f9d7e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "accessToken",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyc0BnbWFpbC5jb20iLCJpYXQiOjE3MDk3NzU3MjIsImV4cCI6MTcwOTgwNDUyMn0.Yd6LE_-FOX7b92D-ao-5DfMbDEq2QaiOQxbtHyt6ssYFURvkK9NITwfKqR3xSdKfrXiSXrIzN2Wx2TH84RmEZA",
			"disabled": true
		},
		{
			"key": "programId",
			"value": "16387",
			"type": "string",
			"disabled": true
		},
		{
			"key": "programId",
			"value": "",
			"disabled": true
		},
		{
			"key": "batchId",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "batchName",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "batchId",
			"value": "",
			"disabled": true
		},
		{
			"key": "batchName",
			"value": "",
			"disabled": true
		},
		{
			"key": "batchId",
			"value": ""
		},
		{
			"key": "batchName",
			"value": ""
		}
	]
}