{
	"info": {
		"_postman_id": "d9751842-9895-4204-a9f3-bd9e6747e340",
		"name": "Program_batch_Module",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Program Batch Module without data driven",
			"item": [
				{
					"name": "user login controller",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60010461-21c5-4863-bb87-c979b5bb8029",
								"exec": [
									"pm.test('Body matches string', function () {",
									"    pm.expect(pm.response.text()).to.include('ROLE_ADMIN');",
									"})",
									"",
									"pm.test('Content-Type header is present', () => {",
									"    pm.response.to.have.header('Content-Type');",
									"})",
									"",
									"pm.test('Content-Type header is application/json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"})",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.environment.set('programbatchmodule_tokenaccessToken', jsonData.token)",
									"",
									"console.log(jsonData.token)",
									"",
									"//Validate response time",
									"pm.test(\"Response time is less than limit\", function() {",
									"var limit = 500;",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "558e7fe8-09e2-4509-a3f5-850deb57129f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "create program",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Status code is 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"pm.test('programDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programDescription).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('programName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('programStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programStatus).to.not.be.empty;\r",
									"})\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"var programId = responseBody.programId;\r",
									"var programName = responseBody.programName;\r",
									"pm.environment.set('programbatch_programId', programId);\r",
									"pm.environment.set('programbatch_programname',programName);\r",
									"console.log('programId:', programId);\r",
									"console.log('program name:', programName);\r",
									"pm.test(\"validate response body datatype\",()=> {\r",
									"    pm.expect(responseBody).to.be.an(\"object\");\r",
									"    pm.expect(responseBody.programId).to.be.a('number');\r",
									"    pm.expect(responseBody.programName).to.be.a('string');\r",
									"    pm.expect(responseBody.programDescription).to.be.a('string');\r",
									"    pm.expect(responseBody.programStatus).to.be.a('string');\r",
									"    pm.expect(responseBody.creationTime).to.be.a('string');\r",
									"    pm.expect(responseBody.lastModTime).to.be.a('string');\r",
									"});\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"creationTime\");\r",
									"    pm.expect(pm.response.text()).to.include(\"lastModTime\");\r",
									"  \r",
									"});\r",
									"const schema = {\r",
									"    'type': 'object',\r",
									"    'properties': {\r",
									"        'programDescription': { 'type': 'string' },\r",
									"        'programName': { 'type': 'string' },\r",
									"        'programStatus': {\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    'required': [\r",
									"        'programDescription',\r",
									"        'programName',\r",
									"        'programStatus'\r",
									"    ]\r",
									"};\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b7a51e41-a04e-4919-a2d1-40a8d93ba94c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"To learn about Postman\",\r\n  \"programName\": \"March24-APIAlchemist-SDET-0139\",\r\n  \"programStatus\": \"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Batch Module",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"console.log(\"batch Name:\", batchName);\r",
									"console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "814e6a0d-1216-4909-b977-b5580c141992",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"New batch for sdet to learn about api\",\r\n    \"batchName\": \"March24-API_Alchemist-Post1healthcare21-SDET120-010\",\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get all programs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b716e42f-b68e-43dd-a223-da1753765ad3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 1000;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"//Validate the response body\r",
									"\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"const schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},\r",
									"            \"programDescription\": {\"type\": \"string\"},\r",
									"            \"programStatus\": {\"type\": \"string\"},\r",
									"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
									"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}\r",
									"        },\r",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3f9c2fdc-1d09-4987-a8f5-a07515b00d6f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "Get all programs with programId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ff10c04-18ef-4a07-8125-a3e35a6980b4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"const schema ={\r",
									" \r",
									"   \r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},\r",
									"            \"programDescription\": {\"type\": \"string\"},\r",
									"            \"programStatus\": {\"type\": \"string\"},\r",
									"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
									"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}\r",
									"        },\r",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"    \r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ba9bb90b-4a6c-42a4-9a10-6dcef2e5a95f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/programs/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"programs",
								":programId"
							],
							"variable": [
								{
									"key": "programId",
									"value": "{{programbatch_programId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all programs with users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "044689bb-73b4-4e44-8444-0bd73bedb1f2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 700;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"// Define the JSON schema\r",
									"const schema = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": { \"type\": \"number\" },\r",
									"            \"programName\": { \"type\": \"string\" },\r",
									"            \"programDescription\": { \"type\": \"string\" },\r",
									"            \"programStatus\": { \"type\": \"string\" },\r",
									"            \"creationTime\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
									"            \"lastModTime\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
									"            \"programUsers\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"userId\": { \"type\": \"string\" },\r",
									"                        \"userFirstName\": { \"type\": \"string\" },\r",
									"                        \"userLastName\": { \"type\": \"string\" },\r",
									"                        \"userMiddleName\": { \"type\": \"string\" },\r",
									"                        \"userPhoneNumber\": { \"type\": \"number\" },\r",
									"                        \"userLocation\": { \"type\": \"string\" },\r",
									"                        \"userTimeZone\": { \"type\": \"string\" },\r",
									"                        \"userLinkedinUrl\": { \"type\": \"string\"},\r",
									"                        \"userEduUg\": { \"type\": \"string\" },\r",
									"                        \"userEduPg\": { \"type\": \"string\" },\r",
									"                        \"userComments\": { \"type\": \"string\" },\r",
									"                        \"userVisaStatus\": { \"type\": \"string\" },\r",
									"                        \"userLoginEmail\": { \"type\": [\"string\", \"null\"] }\r",
									"                    },\r",
									"                    \"required\": [\"userId\", \"userFirstName\", \"userLastName\", \"userPhoneNumber\"]\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"    }\r",
									"};\r",
									"\r",
									"// Perform schema validation\r",
									"pm.test(\"Schema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "97ac9bdf-6ea2-40fd-8893-c220a839ea82",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/allProgramsWithUsers"
					},
					"response": []
				},
				{
					"name": "Get all Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a50480e3-a60e-4fe3-b0dc-792a82230d07",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8d95b815-479e-4c85-86ab-832966f642f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get all Batches by batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96a1d597-2a84-4a35-a8c1-84612ecb0f84",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"    var limit = 500;\r",
									"    pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"const responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"batchId\": {\"type\": \"number\"},\r",
									"        \"batchName\": {\"type\": \"string\"},\r",
									"        \"batchDescription\": {\"type\": \"string\"},\r",
									"        \"batchStatus\": {\"type\": \"string\", \"enum\": [\"Active\", \"Inactive\",\"active\",\"inactive\"]},\r",
									"        \"batchNoOfClasses\": {\"type\": \"number\"},\r",
									"        \"programId\": {\"type\": \"number\"},\r",
									"        \"programName\": {\"type\": \"string\"}\r",
									"    },\r",
									"    \"required\": [\"batchId\", \"batchName\", \"batchDescription\", \"batchStatus\", \"batchNoOfClasses\", \"programId\", \"programName\"]\r",
									"};\r",
									"\r",
									"const responseBodySchema = pm.response.json();\r",
									"\r",
									"pm.test('Response body matches schema', function() {\r",
									"    const Ajv = require('ajv');\r",
									"    const ajv = new Ajv({allErrors: true});\r",
									"\r",
									"    const validate = ajv.compile(responseSchema);\r",
									"    const valid = validate(responseBodySchema);\r",
									"\r",
									"    pm.expect(valid).to.be.true;\r",
									"    pm.expect(validate.errors).to.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8156a5f8-b08a-49d0-822e-42aeac074361",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchId/:batchId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchId",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "{{programbatch_batchid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Batch Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97341be8-f7a4-4ff8-93d4-689adfaa02be",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {\"type\": \"string\"},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e5d52b5c-78a6-4b47-afea-3d30de3bae16",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchName/:batchName",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchName",
								":batchName"
							],
							"variable": [
								{
									"key": "batchName",
									"value": "{{programbatch_batchName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Program Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6a50dd4-9f47-47ba-8a25-84938a4e0f5e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {\"type\": \"string\"},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f5ac41eb-6ce8-4629-bf09-bac524599baf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/program/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"program",
								":programId"
							],
							"variable": [
								{
									"key": "programId",
									"value": "{{programbatch_programId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch with batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fd925bc3-6725-40cd-bd68-028f28c7cc59",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"Newbatch for SDET\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": 5,\r\n    \"batchStatus\": \"active\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"March24-APIAlchemist-SDET-API09-029\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Delete by program Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42f5d782-fea1-44fe-a194-e95ad9f572d5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3b83879f-e5c2-4d15-a720-6287fe4e761a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programbatch_programId}}"
					},
					"response": []
				},
				{
					"name": "create program Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Status code is 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"pm.test('programDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programDescription).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('programName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('programStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programStatus).to.not.be.empty;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"var programId = responseBody.programId;\r",
									"var programName = responseBody.programName;\r",
									"pm.environment.set('programbatch_programId', programId)\r",
									"pm.environment.set('programbatch_programname',programName)\r",
									"console.log('programId:', programId)\r",
									"\r",
									"pm.test(\"validate response body datatype\",()=> {\r",
									"    pm.expect(responseBody).to.be.an(\"object\");\r",
									"    pm.expect(responseBody.programId).to.be.a('number');\r",
									"    pm.expect(responseBody.programName).to.be.a('string');\r",
									"    pm.expect(responseBody.programDescription).to.be.a('string');\r",
									"    pm.expect(responseBody.programStatus).to.be.a('string');\r",
									"    pm.expect(responseBody.creationTime).to.be.a('string');\r",
									"    pm.expect(responseBody.lastModTime).to.be.a('string');\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    'type': 'object',\r",
									"    'properties': {\r",
									"        'programDescription': { 'type': 'string' },\r",
									"        'programName': { 'type': 'string' },\r",
									"        'programStatus': {\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    'required': [\r",
									"        'programDescription',\r",
									"        'programName',\r",
									"        'programStatus'\r",
									"    ]\r",
									"};\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d7fe30e7-9c0c-4cd9-9e46-64399fa962a1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"To learn about Postman\",\r\n  \"programName\": \"March24-APIAlchemist-SDET-030\",\r\n  \"programStatus\": \"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Delete by program name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab00110c-d515-4998-bf68-595abe1bf7ab",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f545f688-f2ec-451f-b9f9-b60ac6eb8b36",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogname/{{programbatch_programname}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch with batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6d79f764-d7fd-4d1b-b981-0f0e9aee77dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "User logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff6f3489-6755-4c59-9729-9b914da29989",
								"exec": [
									"//Validate response time\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d7fced60-c4a0-4e35-9c64-c9a96b9a2cb2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/logoutlms"
					},
					"response": []
				}
			],
			"id": "82042d22-0015-4d26-8e14-ea4087dcd2a0"
		},
		{
			"name": "Program Batch Module with data driven",
			"item": [
				{
					"name": "user login controller",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60010461-21c5-4863-bb87-c979b5bb8029",
								"exec": [
									"pm.test('Body matches string', function () {",
									"    pm.expect(pm.response.text()).to.include('ROLE_ADMIN');",
									"})",
									"",
									"pm.test('Content-Type header is present', () => {",
									"    pm.response.to.have.header('Content-Type');",
									"})",
									"",
									"pm.test('Content-Type header is application/json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"})",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.environment.set('programbatchmodule_tokenaccessToken', jsonData.token)",
									"",
									"console.log(jsonData.token)",
									"",
									"//Validate response time",
									"pm.test(\"Response time is less than limit\", function() {",
									"var limit = 500;",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1aa556a9-809f-4805-b6be-9865be005f4d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "create program",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Status code is 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"pm.test('programDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programDescription).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('programName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('programStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programStatus).to.not.be.empty;\r",
									"})\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"var programId = responseBody.programId;\r",
									"var programName = responseBody.programName;\r",
									"pm.environment.set('programbatch_programId', programId);\r",
									"pm.environment.set('programbatch_programname',programName);\r",
									"console.log('programId:', programId);\r",
									"console.log('program name:', programName);\r",
									"pm.test(\"validate response body datatype\",()=> {\r",
									"    pm.expect(responseBody).to.be.an(\"object\");\r",
									"    pm.expect(responseBody.programId).to.be.a('number');\r",
									"    pm.expect(responseBody.programName).to.be.a('string');\r",
									"    pm.expect(responseBody.programDescription).to.be.a('string');\r",
									"    pm.expect(responseBody.programStatus).to.be.a('string');\r",
									"    pm.expect(responseBody.creationTime).to.be.a('string');\r",
									"    pm.expect(responseBody.lastModTime).to.be.a('string');\r",
									"});\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"creationTime\");\r",
									"    pm.expect(pm.response.text()).to.include(\"lastModTime\");\r",
									"  \r",
									"});\r",
									"const schema = {\r",
									"    'type': 'object',\r",
									"    'properties': {\r",
									"        'programDescription': { 'type': 'string' },\r",
									"        'programName': { 'type': 'string' },\r",
									"        'programStatus': {\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    'required': [\r",
									"        'programDescription',\r",
									"        'programName',\r",
									"        'programStatus'\r",
									"    ]\r",
									"};\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b34bfd5d-c689-4dd3-a383-8f91d958f904",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{ProgramDescription}}\",\r\n  \"programName\": \"{{ProgramName}}\",\r\n  \"programStatus\": \"{{ProgramStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Batch Module",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"console.log(\"batch Name:\", batchName);\r",
									"console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6ea959e2-4b43-46d1-88ae-b2b2fb14b0cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{BatchDescription}}\",\r\n    \"batchName\": \"{{BatchName}}\",\r\n    \"batchNoOfClasses\": \"{{BatchNoClasses}}\",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get all programs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b716e42f-b68e-43dd-a223-da1753765ad3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 1000;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"//Validate the response body\r",
									"\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"const schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},\r",
									"            \"programDescription\": {\"type\": \"string\"},\r",
									"            \"programStatus\": {\"type\": \"string\"},\r",
									"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
									"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}\r",
									"        },\r",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d11e684b-7c35-466d-a1e4-4e6d554a5650",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "Get all programs with programId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ff10c04-18ef-4a07-8125-a3e35a6980b4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"const schema ={\r",
									" \r",
									"   \r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},\r",
									"            \"programDescription\": {\"type\": \"string\"},\r",
									"            \"programStatus\": {\"type\": \"string\"},\r",
									"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
									"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}\r",
									"        },\r",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"    \r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b37f5cf1-efb3-44ef-b55b-79a39fa2bc7b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/programs/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"programs",
								":programId"
							],
							"variable": [
								{
									"id": "c8a404d7-1275-4153-b280-60a971be259b",
									"key": "programId",
									"value": "{{programbatch_programId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all programs with users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "044689bb-73b4-4e44-8444-0bd73bedb1f2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 700;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"// Define the JSON schema\r",
									"const schema = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": { \"type\": \"number\" },\r",
									"            \"programName\": { \"type\": \"string\" },\r",
									"            \"programDescription\": { \"type\": \"string\" },\r",
									"            \"programStatus\": { \"type\": \"string\" },\r",
									"            \"creationTime\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
									"            \"lastModTime\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
									"            \"programUsers\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"userId\": { \"type\": \"string\" },\r",
									"                        \"userFirstName\": { \"type\": \"string\" },\r",
									"                        \"userLastName\": { \"type\": \"string\" },\r",
									"                        \"userMiddleName\": { \"type\": \"string\" },\r",
									"                        \"userPhoneNumber\": { \"type\": \"number\" },\r",
									"                        \"userLocation\": { \"type\": \"string\" },\r",
									"                        \"userTimeZone\": { \"type\": \"string\" },\r",
									"                        \"userLinkedinUrl\": { \"type\": \"string\"},\r",
									"                        \"userEduUg\": { \"type\": \"string\" },\r",
									"                        \"userEduPg\": { \"type\": \"string\" },\r",
									"                        \"userComments\": { \"type\": \"string\" },\r",
									"                        \"userVisaStatus\": { \"type\": \"string\" },\r",
									"                        \"userLoginEmail\": { \"type\": [\"string\", \"null\"] }\r",
									"                    },\r",
									"                    \"required\": [\"userId\", \"userFirstName\", \"userLastName\", \"userPhoneNumber\"]\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"    }\r",
									"};\r",
									"\r",
									"// Perform schema validation\r",
									"pm.test(\"Schema Validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "28803032-256a-4640-80e3-1e64380ea2a5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/allProgramsWithUsers"
					},
					"response": []
				},
				{
					"name": "Get all Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a50480e3-a60e-4fe3-b0dc-792a82230d07",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f062d4c6-3ebf-4021-86bb-b35c720b8c33",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get all Batches by batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96a1d597-2a84-4a35-a8c1-84612ecb0f84",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"const responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"batchId\": {\"type\": \"number\"},\r",
									"        \"batchName\": {\"type\": \"string\"},\r",
									"        \"batchDescription\": {\"type\": \"string\"},\r",
									"        \"batchStatus\": {\"type\": \"string\", \"enum\": [\"Active\", \"Inactive\",\"active\",\"inactive\"]},\r",
									"        \"batchNoOfClasses\": {\"type\": \"number\"},\r",
									"        \"programId\": {\"type\": \"number\"},\r",
									"        \"programName\": {\"type\": \"string\"}\r",
									"    },\r",
									"    \"required\": [\"batchId\", \"batchName\", \"batchDescription\", \"batchStatus\", \"batchNoOfClasses\", \"programId\", \"programName\"]\r",
									"};\r",
									"\r",
									"const responseBodySchema = pm.response.json();\r",
									"\r",
									"pm.test('Response body matches schema', function() {\r",
									"    const Ajv = require('ajv');\r",
									"    const ajv = new Ajv({allErrors: true});\r",
									"\r",
									"    const validate = ajv.compile(responseSchema);\r",
									"    const valid = validate(responseBodySchema);\r",
									"\r",
									"    pm.expect(valid).to.be.true;\r",
									"    pm.expect(validate.errors).to.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "45dc9b58-855d-4832-aaf7-5c7cc072545e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchId/:batchId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchId",
								":batchId"
							],
							"variable": [
								{
									"id": "5efe7676-8a37-4a43-b84b-939315758a57",
									"key": "batchId",
									"value": "{{programbatch_batchid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Batch Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97341be8-f7a4-4ff8-93d4-689adfaa02be",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {\"type\": \"string\"},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4dc6f02d-f2df-44b0-8ce3-a3ff8a5416fe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchName/:batchName",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchName",
								":batchName"
							],
							"variable": [
								{
									"id": "f78192ac-3159-44df-9070-72206d40f5e5",
									"key": "batchName",
									"value": "{{programbatch_batchName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Program Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6a50dd4-9f47-47ba-8a25-84938a4e0f5e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {\"type\": \"string\"},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8911ff4e-e1cb-488d-8473-36dd69771138",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/program/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"program",
								":programId"
							],
							"variable": [
								{
									"id": "a8c717de-a510-4be5-99cf-8db6b760f095",
									"key": "programId",
									"value": "{{programbatch_programId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch with batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e5226f3d-3933-4397-89e0-a9d9daa679b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{Update_BatchDescription}}\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": {{UpdateNoClasses}},\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Delete by program Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42f5d782-fea1-44fe-a194-e95ad9f572d5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "47f96a89-91bc-4780-a647-1f94184f3400",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programbatch_programId}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch with batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7dba0151-facf-4892-aad3-c7dd1872b9a3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "User logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff6f3489-6755-4c59-9729-9b914da29989",
								"exec": [
									"//Validate response time\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f3907f51-3c05-493d-a4b7-01607cf8e18b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/logoutlms"
					},
					"response": []
				}
			],
			"id": "aeb5e63a-acc8-4d40-832a-751c34775a7e"
		},
		{
			"name": "Program Batch Module with data driven invalid",
			"item": [
				{
					"name": "user login controller",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60010461-21c5-4863-bb87-c979b5bb8029",
								"exec": [
									"pm.test('Body matches string', function () {",
									"    pm.expect(pm.response.text()).to.include('ROLE_ADMIN');",
									"})",
									"",
									"pm.test('Content-Type header is present', () => {",
									"    pm.response.to.have.header('Content-Type');",
									"})",
									"",
									"pm.test('Content-Type header is application/json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"})",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.environment.set('programbatchmodule_tokenaccessToken', jsonData.token)",
									"",
									"console.log(jsonData.token)",
									"",
									"//Validate response time",
									"pm.test(\"Response time is less than limit\", function() {",
									"var limit = 500;",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5e7b7296-5243-41fd-8224-658e560e7c2b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Create Batch Module",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is  400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});\r",
									"}\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"console.log(\"batch Name:\", batchName);\r",
									"console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ed1db1f1-83ae-4e9f-87cc-a0fbeabb114e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{BatchDescription}}\",\r\n    \"batchName\": \"{{BatchName}}\",\r\n    \"batchNoOfClasses\": \"{{BatchNoClasses}}\",\r\n    \"batchStatus\": \"{{BatchStatus}}\",\r\n    \"programId\":\"{{ProgramId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get all programs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b716e42f-b68e-43dd-a223-da1753765ad3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 1000;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"//Validate the response body\r",
									"\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"const schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},\r",
									"            \"programDescription\": {\"type\": \"string\"},\r",
									"            \"programStatus\": {\"type\": \"string\"},\r",
									"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
									"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}\r",
									"        },\r",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eac290ad-e919-47c6-8754-c0b14acb2687",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "Get all Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a50480e3-a60e-4fe3-b0dc-792a82230d07",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "848670ba-1773-4870-8a40-e7f42b26a5cb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get all Batches by batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96a1d597-2a84-4a35-a8c1-84612ecb0f84",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const responseSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"batchId\": {\"type\": \"number\"},\r",
									"        \"batchName\": {\"type\": \"string\"},\r",
									"        \"batchDescription\": {\"type\": \"string\"},\r",
									"        \"batchStatus\": {\"type\": \"string\", \"enum\": [\"Active\", \"Inactive\",\"active\",\"inactive\"]},\r",
									"        \"batchNoOfClasses\": {\"type\": \"number\"},\r",
									"        \"programId\": {\"type\": \"number\"},\r",
									"        \"programName\": {\"type\": \"string\"}\r",
									"    },\r",
									"    \"required\": [\"batchId\", \"batchName\", \"batchDescription\", \"batchStatus\", \"batchNoOfClasses\", \"programId\", \"programName\"]\r",
									"};\r",
									"\r",
									"const responseBodySchema = pm.response.json();\r",
									"\r",
									"pm.test('Response body matches schema', function() {\r",
									"    const Ajv = require('ajv');\r",
									"    const ajv = new Ajv({allErrors: true});\r",
									"\r",
									"    const validate = ajv.compile(responseSchema);\r",
									"    const valid = validate(responseBodySchema);\r",
									"\r",
									"    pm.expect(valid).to.be.true;\r",
									"    pm.expect(validate.errors).to.be.null;\r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f39e8d4c-2221-41dd-af35-f3b27e464981",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchId/:batchId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchId",
								":batchId"
							],
							"variable": [
								{
									"id": "5efe7676-8a37-4a43-b84b-939315758a57",
									"key": "batchId",
									"value": "{{programbatch_batchid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Batch Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97341be8-f7a4-4ff8-93d4-689adfaa02be",
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"// Perform schema validation\r",
									"if (pm.response.code === 201){\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {\"type\": \"string\"},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"  \r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f3a9fb88-23cf-4824-a097-ffa59938357b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchName/:batchName",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchName",
								":batchName"
							],
							"variable": [
								{
									"id": "f78192ac-3159-44df-9070-72206d40f5e5",
									"key": "batchName",
									"value": "{{programbatch_batchName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Program Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6a50dd4-9f47-47ba-8a25-84938a4e0f5e",
								"exec": [
									"pm.test(\"Status code is 400 Not Found\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {\"type\": \"string\"},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"  \r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bcbdfc31-843a-4c62-b6df-73db73ac8ade",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/program/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"program",
								":programId"
							],
							"variable": [
								{
									"id": "a8c717de-a510-4be5-99cf-8db6b760f095",
									"key": "programId",
									"value": "{{programbatch_programId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch with batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is  400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201) {\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "72e224e1-40a1-482f-82ce-5809ac6d4558",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"{{Update_BatchDescription}}\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": {{UpdateNoClasses}},\r\n    \"batchStatus\": \"{{Update_BatchStatus}}\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"{{programbatch_programname}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Delete by program Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42f5d782-fea1-44fe-a194-e95ad9f572d5",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8b8361b1-b354-446c-969c-ebe857c6edf5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programbatch_programId}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch with batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "de53cef2-f984-4a97-aab5-695e478c4558",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "User logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff6f3489-6755-4c59-9729-9b914da29989",
								"exec": [
									"//Validate response time\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3922d916-ff73-43e0-83f8-548c671c42ec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/logoutlms"
					},
					"response": []
				}
			],
			"id": "07b20ddc-7a07-4b28-89cc-c176ca348f71"
		},
		{
			"name": "Program_BatchModule_invalid",
			"item": [
				{
					"name": "user login controller",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60010461-21c5-4863-bb87-c979b5bb8029",
								"exec": [
									"pm.test('Body matches string', function () {",
									"    pm.expect(pm.response.text()).to.include('ROLE_ADMIN');",
									"})",
									"",
									"pm.test('Content-Type header is present', () => {",
									"    pm.response.to.have.header('Content-Type');",
									"})",
									"",
									"pm.test('Content-Type header is application/json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"})",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.response.to.be.json;",
									"})",
									"",
									"",
									"",
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.environment.set('programbatchmodule_tokenaccessToken', jsonData.token)",
									"",
									"console.log(jsonData.token)",
									"",
									"//Validate response time",
									"pm.test(\"Response time is less than limit\", function() {",
									"var limit = 500;",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "562ac0c7-a222-4978-a33e-b8a5172a8da5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "create program Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Status code is 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"pm.test('programDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programDescription).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('programName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('programStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().programStatus).to.not.be.empty;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"var programId = responseBody.programId;\r",
									"var programName = responseBody.programName;\r",
									"pm.environment.set('programbatch_programId', programId)\r",
									"pm.environment.set('programbatch_programname',programName)\r",
									"console.log('programId:', programId)\r",
									"\r",
									"pm.test(\"validate response body datatype\",()=> {\r",
									"    pm.expect(responseBody).to.be.an(\"object\");\r",
									"    pm.expect(responseBody.programId).to.be.a('number');\r",
									"    pm.expect(responseBody.programName).to.be.a('string');\r",
									"    pm.expect(responseBody.programDescription).to.be.a('string');\r",
									"    pm.expect(responseBody.programStatus).to.be.a('string');\r",
									"    pm.expect(responseBody.creationTime).to.be.a('string');\r",
									"    pm.expect(responseBody.lastModTime).to.be.a('string');\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    'type': 'object',\r",
									"    'properties': {\r",
									"        'programDescription': { 'type': 'string' },\r",
									"        'programName': { 'type': 'string' },\r",
									"        'programStatus': {\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    'required': [\r",
									"        'programDescription',\r",
									"        'programName',\r",
									"        'programStatus'\r",
									"    ]\r",
									"};\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "35ae1850-9117-400f-8c92-875aec552fc4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"To learn about Postman\",\r\n  \"programName\": \"March24-APIAlchemist-SDET-030\",\r\n  \"programStatus\": \"active\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Batch Module Bad credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5f05355f-b87d-4b36-9719-8e7ec8d9263b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"New batch for sdet to learn about api\",\r\n    \"batchName\": \" \",\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\"{{programbatch_programId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module with special character as  first letter in Batch description",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"console.log(\"batch Name:\", batchName);\r",
									"console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ccdc9032-6e2b-4447-bbf4-5a7b34cd67eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"&$%&()\",\r\n    \"batchName\": \"March24-API_Alchemist-Post1healthcare21-SDET120-010\",\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\"16226\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module with null Batch description",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"console.log(\"batch Name:\", batchName);\r",
									"console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "84f5e272-21af-4992-994b-66871cc2b84c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": null,\r\n    \"batchName\": \"March24-API_Alchemist-Post1healthcare21-SDET120-010\",\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\"16226\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module_invalid Batch description Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"console.log(\"batch Name:\", batchName);\r",
									"console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "37990664-2984-4caf-9897-7c65d026f864",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"&New batch for sdet to learn about api\",\r\n    \"batchName\": \"March24-API_Alchemist-Post1healthcare21-SDET120-010\",\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\"16226\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module_with empty batch desription",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"console.log(\"batch Name:\", batchName);\r",
									"console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2c4aaed7-f110-4bf8-befc-2106f68ac56f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \" \",\r\n    \"batchName\": \"March24-API_Alchemist-Post1healthcare21-SDET120-010\",\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\"16226\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module_with numeric values as batch desription",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"console.log(\"batch Name:\", batchName);\r",
									"console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "edd2ad40-3110-42d8-b145-d776b30505c0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"New batch with updated\",\r\n    \"batchName\": \"March24-API_Alchemist-March24-APIAlchemist-SDET-039-SDET120-100\",\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\"16226\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module_ empty batch Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"console.log(\"batch Name:\", batchName);\r",
									"console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e727a94b-71c7-47d7-bd85-0a0984640a50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"New batch for sdet to learn about api\",\r\n    \"batchName\": \" \",\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\"16226\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module_ with numeric batch Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"console.log(\"batch Name:\", batchName);\r",
									"console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ceccf5e3-a87d-4c24-9e67-6cf94a202d6a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\":\"New batch for sdet to learn about api\",\r\n    \"batchName\": 1111,\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\"16226\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module_ with Special characters batch Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"console.log(\"batch Name:\", batchName);\r",
									"console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c58ede28-8361-4024-af7b-a05a3d65302d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\":\"New batch for sdet to learn about api\",\r\n    \"batchName\": \"#&&@1A\",\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\"16226\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module_ with batch name as null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 500 internal server error\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Internal Server Error');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"//pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"//pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"//console.log(\"batch Name:\", batchName);\r",
									"//console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ff60d8a2-f02a-4dd9-9307-5538fd987c0e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\":\"New batch for sdet to learn about api\",\r\n    \"batchName\": null,\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\"16226\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module_ with batchNoOfClasses as zero",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 Bad  request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"//pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"//pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"//console.log(\"batch Name:\", batchName);\r",
									"//console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a59af8e6-3335-4c23-9b02-9ff2dc4f04ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\":\"New batch for sdet to learn about api\",\r\n    \"batchName\": \"March24-APIAlchemist-SDET-029\",\r\n    \"batchNoOfClasses\": \"0\",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\"16226\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module_ with batchNoOfClasses as special characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 Bad  request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"//pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"//pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"//console.log(\"batch Name:\", batchName);\r",
									"//console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fb45b7b2-f185-486d-86c6-8c12bd667c90",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\":\"New batch for sdet to learn about api\",\r\n    \"batchName\": \"March24-APIAlchemist-SDET-029\",\r\n    \"batchNoOfClasses\": \"$$\",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\"17355\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module_ with batchNoOfClasses as empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 Bad  request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"//pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"//pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"//console.log(\"batch Name:\", batchName);\r",
									"//console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "76b19dca-e50f-47f3-a366-5ff1c44acaf0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\":\"New batch for sdet to learn about api\",\r\n    \"batchName\": \"March24-APIAlchemist-SDET-029\",\r\n    \"batchNoOfClasses\": \" \",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\"17355\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module_ with batchNoOfClasses as Alphabets",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 Bad  request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"//pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"//pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"//console.log(\"batch Name:\", batchName);\r",
									"//console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a05fb21a-3c22-4106-8315-103bc5567760",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\":\"New batch for sdet to learn about api\",\r\n    \"batchName\": \"March24-APIAlchemist-SDET-029\",\r\n    \"batchNoOfClasses\": \"aaa\",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\"17355\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module_ with Batch status as empty Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 Bad  request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"//pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"//pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"//console.log(\"batch Name:\", batchName);\r",
									"//console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1fd14a3b-c94c-423c-8c2d-b88b0b26f0db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\":\"New batch for sdet to learn about api\",\r\n    \"batchName\": \"March24-APIAlchemist-SDET-029\",\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\": \" \",\r\n    \"programId\":\"17355\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module_ with Batch status as numeric values",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 \", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"//pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"//pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"//console.log(\"batch Name:\", batchName);\r",
									"//console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eaa2e18a-3b2f-47cb-98b6-d1dfd5d54022",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\":\"New batch for sdet to learn about api\",\r\n    \"batchName\": \"March24-APIAlchemist-SDET-029\",\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\": 4,\r\n    \"programId\":\"17355\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module_ with Batch status as Special characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 \", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"//pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"//pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"//console.log(\"batch Name:\", batchName);\r",
									"//console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cd0f13b1-f66e-4982-b577-c69d0f644170",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\":\"New batch for sdet to learn about api\",\r\n    \"batchName\": \"March24-APIAlchemist-SDET-029\",\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\":\"%^&\",\r\n    \"programId\":\"17355\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module_ with Invalid Batch status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400 \", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"//pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"//pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"//console.log(\"batch Name:\", batchName);\r",
									"//console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7405b86a-186c-4ae0-b447-2d613c336954",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\":\"New batch for sdet to learn about api\",\r\n    \"batchName\": \"March24-APIAlchemist-SDET-029\",\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\":\"AAA\",\r\n    \"programId\":\"17355\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module_ with invalid program id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 404 Not Found \", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Not Found');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"//pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"//pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"//console.log(\"batch Name:\", batchName);\r",
									"//console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5c244049-3c75-4294-9b93-0f2e63ac702d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\":\"New batch for sdet to learn about api\",\r\n    \"batchName\": \"March24-APIAlchemist-SDET-029\",\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\"174\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Batch Module_ with invalid program id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"pm.test('Check Status Text', () => {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"/*pm.test('batchDescription  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchDescription).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchName  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchName).to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test('batchStatus  is not empty', function () {\r",
									"    pm.expect(pm.response.json().batchStatus).to.be.a('string').and.to.not.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"batchNoOfClasses is not empty\", function() {\r",
									"    pm.expect(pm.response.json().batchNoOfClasses).to.be.a('number').and.to.not.be.null;\r",
									"});*/\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"//pm.collectionVariables.set(\"batchId\", batchId);\r",
									"//pm.environment.set(\"programbatch_batchName\", batchName);\r",
									"//pm.environment.set(\"programbatch_batchid\",batchId);\r",
									"//console.log(\"batch Name:\", batchName);\r",
									"//console.log(\"batchId:\", batchId);\r",
									"if (pm.response.code === 201) {\r",
									"pm.test(\"validate response body properties\", () => {\r",
									"    // Check the expected properties exist\r",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");\r",
									"    pm.expect(pm.response.text()).to.include(\"batchNoOfClasses\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programId\");\r",
									"    pm.expect(pm.response.text()).to.include(\"programName\");\r",
									"  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"const schema ={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": { \"type\": \"string\" },\r",
									"    \"batchName\": { \"type\": \"string\" },\r",
									"    \"batchNoOfClasses\": { \"type\": \"integer\"},\r",
									"    \"batchStatus\":{\r",
									"            'type': 'string',\r",
									"            'enum': [\r",
									"                'active',\r",
									"                'inactive'\r",
									"            ]},\r",
									"    \"programId\": { \"type\": \"integer\"}\r",
									"  },\r",
									"  \"required\": [\"batchDescription\", \"batchName\", \"batchNoOfClasses\", \"batchStatus\", \"programId\"]\r",
									"};\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a70e8bf9-072f-4927-b38c-e42c2c4930f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\":\"New batch for sdet to learn about api\",\r\n    \"batchName\": \"March24-APIAlchemist-SDET-029\",\r\n    \"batchNoOfClasses\": \"5\",\r\n    \"batchStatus\": \"active\",\r\n    \"programId\":\" \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get all programs with invalid end points",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b716e42f-b68e-43dd-a223-da1753765ad3",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 1000;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"//Validate the response body\r",
									"if (pm.response.code === 201){\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"const schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},\r",
									"            \"programDescription\": {\"type\": \"string\"},\r",
									"            \"programStatus\": {\"type\": \"string\"},\r",
									"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
									"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}\r",
									"        },\r",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2c7e01fb-833d-4e94-aaa9-ce55956e1c4f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/ allPrograms"
					},
					"response": []
				},
				{
					"name": "Get all programs with invalid end points",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b716e42f-b68e-43dd-a223-da1753765ad3",
								"exec": [
									"\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Status code is 404', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 1000;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"//Validate the response body\r",
									"if (pm.response.code === 201){\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"const schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},\r",
									"            \"programDescription\": {\"type\": \"string\"},\r",
									"            \"programStatus\": {\"type\": \"string\"},\r",
									"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
									"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}\r",
									"        },\r",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "57307537-4bf6-429b-a240-097442f81933",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/allProgram"
					},
					"response": []
				},
				{
					"name": "Get all programs with invalid BaseURL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b716e42f-b68e-43dd-a223-da1753765ad3",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 1000;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"//Validate the response body\r",
									"if (pm.response.code === 201){\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"const schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},\r",
									"            \"programDescription\": {\"type\": \"string\"},\r",
									"            \"programStatus\": {\"type\": \"string\"},\r",
									"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},\r",
									"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}\r",
									"        },\r",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "09d958ec-5812-49cf-8587-67fffc914116",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{invalidBaseUrl}}}/allProgram"
					},
					"response": []
				},
				{
					"name": "Get all Batches Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a50480e3-a60e-4fe3-b0dc-792a82230d07",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {\"type\": \"string\"},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"   pm.test(\"batchDescription is null or string\", function() {\r",
									"    pm.expect(responseBody.batchDescription).to.satisfy(function (value) {\r",
									"        return value === null || typeof value === 'string';\r",
									"    });\r",
									"});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f662b6b9-38d4-49fb-b05d-2b20ab3d7c0a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get all Batches invalid end points",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a50480e3-a60e-4fe3-b0dc-792a82230d07",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"if (pm.response.code === 201){\r",
									"// Perform schema validation\r",
									"pm.test(\"Validate Response Schema\", function() {\r",
									"    // Define the JSON schema\r",
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"batchId\": {\"type\": \"number\"},\r",
									"            \"batchName\": {\"type\": \"string\"},\r",
									"            \"batchDescription\": {\"type\": \"string\"},\r",
									"            \"batchStatus\": {\"type\": \"string\"},\r",
									"\t        \"batchNoOfClasses\":{\"type\": \"number\"},\r",
									"  \t        \"programId\": {\"type\": \"number\"},\r",
									"            \"programName\": {\"type\": \"string\"},  \r",
									"        },\r",
									"        \"required\": [\"batchId\", \"batchName\", \"batchDescription\",\"batchStatus\", \"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"    }\r",
									"}\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"   pm.test(\"batchDescription is null or string\", function() {\r",
									"    pm.expect(responseBody.batchDescription).to.satisfy(function (value) {\r",
									"        return value === null || typeof value === 'string';\r",
									"    });\r",
									"});\r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5c475be6-822b-4834-abbd-2b0fd62b9b6f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/ batches"
					},
					"response": []
				},
				{
					"name": "Get all Batches by non existed batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96a1d597-2a84-4a35-a8c1-84612ecb0f84",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "03c85029-cfa4-47cc-8bb7-f136271d6ffe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchId/:batchId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchId",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "{{programbatch_batchid-invalid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by non existed batch Id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96a1d597-2a84-4a35-a8c1-84612ecb0f84",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9b9ea429-5f4d-4c83-8a82-83f066773026",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchId/:batchId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchId",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Invalid Batch Name(non existed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97341be8-f7a4-4ff8-93d4-689adfaa02be",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "aa848989-f96f-4130-9f10-de1932fb1806",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchName/:batchName",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchName",
								":batchName"
							],
							"variable": [
								{
									"key": "batchName",
									"value": "batch"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Batch Name invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97341be8-f7a4-4ff8-93d4-689adfaa02be",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f182416a-85c1-4fd3-b81b-4174dfe2ba10",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/batchName/:batchName",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchName",
								":batchName"
							],
							"variable": [
								{
									"key": "batchName",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Program Id non existed program id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6a50dd4-9f47-47ba-8a25-84938a4e0f5e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9ec2ab67-9b6c-4a01-a51b-24513e710f77",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/program/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"program",
								":programId"
							],
							"variable": [
								{
									"key": "programId",
									"value": "u7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Batches by Program Id with invalid program id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6a50dd4-9f47-47ba-8a25-84938a4e0f5e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f15fccc7-adcd-4846-ad93-ac2164ee330c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/batches/program/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"program",
								":programId"
							],
							"variable": [
								{
									"key": "programId",
									"value": "null"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch with batch description as empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6fe09b30-0529-44d6-85a5-6bc06f9a9620",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \" \",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"March24-API_Alchemist-March24-APIAlchemist-SDET-039-SDET120-100\",\r\n    \"batchNoOfClasses\": 5,\r\n    \"batchStatus\": \"Inactive\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"UpdatedPost1healthcare21\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Update Batch with batch description as numeric values",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d2f1d55d-d9f1-4c44-85a8-77978f5dac6e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"1111\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"March24-API_Alchemist-March24-APIAlchemist-SDET-039-SDET120-100\",\r\n    \"batchNoOfClasses\": 5,\r\n    \"batchStatus\": \"Inactive\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"UpdatedPost1healthcare21\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Update Batch with batch description as special characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cca89ddd-3078-4dcd-a568-747767c4502b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"####\",\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"March24-API_Alchemist-March24-APIAlchemist-SDET-039-SDET120-100\",\r\n    \"batchNoOfClasses\": 5,\r\n    \"batchStatus\": \"Inactive\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"UpdatedPost1healthcare21\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Update Batch with batch Id with batch description as null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e1a74999-5896-4f62-93e3-4d7db713ee08",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": null,\r\n    \"batchId\": {{programbatch_batchid}},\r\n    \"batchName\": \"{{programbatch_batchName}}\",\r\n    \"batchNoOfClasses\": 5,\r\n    \"batchStatus\": \"Inactive\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"UpdatedPost1healthcare21\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Update Batch with null batch name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "20748c95-980f-4b52-adcc-928cbfa4e05f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"Newbatch for SDET\",\r\n    \"batchId\": \"{{programbatch_batchid}}\",\r\n    \"batchName\": \" \",\r\n    \"batchNoOfClasses\": 5,\r\n    \"batchStatus\": \"Inactive\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"UpdatedPost1healthcare21\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Update Batch with numeric batch name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3cc7d318-6ed6-4165-b283-7523736dbc70",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"Newbatch for SDET\",\r\n    \"batchId\": \"{{programbatch_batchid}}\",\r\n    \"batchName\": \"111\",\r\n    \"batchNoOfClasses\": 5,\r\n    \"batchStatus\": \"Inactive\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"UpdatedPost1healthcare21\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Update Batch with empty batch name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d78b7f42-a069-4696-9b74-2a1c549d7921",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"Newbatch for SDET\",\r\n    \"batchId\": \"{{programbatch_batchid}}\",\r\n    \"batchName\": ,\r\n    \"batchNoOfClasses\": 5,\r\n    \"batchStatus\": \"Inactive\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"UpdatedPost1healthcare21\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Update Batch with batch name as special characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eb16eb24-fa34-4e0a-9e3c-484e967ad41f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"Newbatch for SDET\",\r\n    \"batchId\": \"{{programbatch_batchid}}\",\r\n    \"batchName\": \" #$%\",\r\n    \"batchNoOfClasses\": 5,\r\n    \"batchStatus\": \"Inactive\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"UpdatedPost1healthcare21\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Update Batch with batch no of classes as zero",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eee98e7e-e121-45c2-940f-19146ee3c8d0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"Newbatch for SDET\",\r\n    \"batchId\": \"{{programbatch_batchid}}\",\r\n    \"batchName\": \"March24-API_Alchemist-March24-APIAlchemist-SDET-039-SDET120-100\",\r\n    \"batchNoOfClasses\": 0,\r\n    \"batchStatus\": \"Inactive\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"UpdatedPost1healthcare21\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Update Batch with batch no of classes as null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8cae85d0-08ec-465c-94af-a20c0668141f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"Newbatch for SDET\",\r\n    \"batchId\": \"{{programbatch_batchid}}\",\r\n    \"batchName\": \"March24-API_Alchemist-March24-APIAlchemist-SDET-039-SDET120-100\",\r\n    \"batchNoOfClasses\": ,\r\n    \"batchStatus\": \"Inactive\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"UpdatedPost1healthcare21\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Update Batch with batch no of classes as special characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a3e085d8-4819-4490-bf8c-ca74e5de2c31",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"Newbatch for SDET\",\r\n    \"batchId\": \"{{programbatch_batchid}}\",\r\n    \"batchName\": \"March24-API_Alchemist-March24-APIAlchemist-SDET-039-SDET120-100\",\r\n    \"batchNoOfClasses\": @#$,\r\n    \"batchStatus\": \"Inactive\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"UpdatedPost1healthcare21\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Update Batch with batch no of classes as alphabets",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d4334bec-f4fc-4ace-beaf-7dc684742c20",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"Newbatch for SDET\",\r\n    \"batchId\": \"{{programbatch_batchid}}\",\r\n    \"batchName\": \"March24-API_Alchemist-March24-APIAlchemist-SDET-039-SDET120-100\",\r\n    \"batchNoOfClasses\": AA,\r\n    \"batchStatus\": \"Inactive\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"UpdatedPost1healthcare21\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Update Batch with program name as empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eab81b88-362c-4e0b-85e9-6dbffa33cf11",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"Newbatch for SDET\",\r\n    \"batchId\": \"{{programbatch_batchid}}\",\r\n    \"batchName\": \"March24-API_Alchemist-March24-APIAlchemist-SDET-039-SDET120-100\",\r\n    \"batchNoOfClasses\": 3,\r\n    \"batchStatus\": \"Inactive\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \" \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Update Batch with program name as numeric values",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bad31026-fd85-4628-a977-b23ec272cc65",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"Newbatch for SDET\",\r\n    \"batchId\": \"{{programbatch_batchid}}\",\r\n    \"batchName\": \"March24-API_Alchemist-March24-APIAlchemist-SDET-039-SDET120-100\",\r\n    \"batchNoOfClasses\": 3,\r\n    \"batchStatus\": \"Inactive\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"111\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Update Batch with program name as Special characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the programId\r",
									"var batchId = responseBody.batchId;\r",
									"var batchName = responseBody.batchName;\r",
									"// Log the programId to the console (optional)\r",
									"console.log(\"batchId:\", batchId);\r",
									"\r",
									"// Store the programId in an environment or global variable for later use (optional)\r",
									"pm.collectionVariables.set(\"batchId\", batchId);\r",
									"pm.collectionVariables.set(\"batchName\", batchName);\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.response.to.be.json;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4fc53baf-6ecd-4eaa-9963-37e25ad7552f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchDescription\": \"Newbatch for SDET\",\r\n    \"batchId\": \"{{programbatch_batchid}}\",\r\n    \"batchName\": \"March24-API_Alchemist-March24-APIAlchemist-SDET-039-SDET120-100\",\r\n    \"batchNoOfClasses\": 2,\r\n    \"batchStatus\": \"Inactive\",\r\n    \"programId\": {{programbatch_programId}},\r\n    \"programName\": \"#$%\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{programbatch_batchid}}"
					},
					"response": []
				},
				{
					"name": "Delete by program Id invalid program id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42f5d782-fea1-44fe-a194-e95ad9f572d5",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ff6f93bd-56ef-44f8-ad04-616884cc828a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/16375"
					},
					"response": []
				},
				{
					"name": "Delete Batch with batch Id invalid batch id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a139a604-2fdd-40ca-8b75-8c16f83dabec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/9"
					},
					"response": []
				},
				{
					"name": "Delete Batch with batch Id as null",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bae510-17d2-44de-9871-c4223eac25d2",
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"})\r",
									"\r",
									"//Validate response time\r",
									"pm.test(\"Response time is less than limit\", function() {\r",
									"var limit = 500;\r",
									"pm.expect(pm.response.responseTime).to.be.below(limit);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "00d64ac1-39a8-4313-a819-bb2bd429830a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programbatchmodule_tokenaccessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/"
					},
					"response": []
				}
			],
			"id": "b403bd7c-bd68-48eb-b7e0-a233f3180176"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7e4612a2-a725-4951-a1e3-e4eac7dcc070",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "ddc5b2c5-5d90-4bcf-9477-150b070f9d7e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "accessToken",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyc0BnbWFpbC5jb20iLCJpYXQiOjE3MDk3NzU3MjIsImV4cCI6MTcwOTgwNDUyMn0.Yd6LE_-FOX7b92D-ao-5DfMbDEq2QaiOQxbtHyt6ssYFURvkK9NITwfKqR3xSdKfrXiSXrIzN2Wx2TH84RmEZA",
			"disabled": true
		},
		{
			"key": "programId",
			"value": "16387",
			"type": "string",
			"disabled": true
		},
		{
			"key": "programId",
			"value": "",
			"disabled": true
		},
		{
			"key": "batchId",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "batchName",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "batchId",
			"value": "",
			"disabled": true
		},
		{
			"key": "batchName",
			"value": "",
			"disabled": true
		},
		{
			"key": "batchId",
			"value": ""
		},
		{
			"key": "batchName",
			"value": ""
		}
	]
}