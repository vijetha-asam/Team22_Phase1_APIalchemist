{
	"info": {
		"_postman_id": "0a55a194-137f-4da4-9f7b-9fb1905cab7c",
		"name": "Team22_APIAlchemist",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "UserModule",
			"item": [
				{
					"name": "GetAllUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc1c6403-09f4-4353-9462-7aa46b6923d1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cec05095-44d9-4f42-b5f1-96b458383fec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users"
					},
					"response": []
				},
				{
					"name": "GetAllUsers invalidAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc1c6403-09f4-4353-9462-7aa46b6923d1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "32f80beb-eb17-4b5a-b759-312220ea0e7e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": ""
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users"
					},
					"response": []
				},
				{
					"name": "Usermodule_login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23199d6a-ea53-4459-80ef-4efe21905c47",
								"exec": [
									"var resp = pm.response.json();",
									"var token = resp.token;",
									"pm.environment.set(\"Usermodule_token\",token);",
									"//pm.globals.set(\"validUserID\",userID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "99841369-45b1-4659-8d0a-517aebe449aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"Numpyninja@1\",\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "GetAllRoles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3e87c89-c965-427f-aa8a-cc4c16359ad9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6883fa43-abb1-41bf-826d-b08cbba540e4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users/roles"
					},
					"response": []
				},
				{
					"name": "GetAllRoles invalidAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3e87c89-c965-427f-aa8a-cc4c16359ad9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "05c9684d-b16f-4e08-b4fd-a41f2ad4c002",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": ""
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users/roles"
					},
					"response": []
				},
				{
					"name": "Create_student",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e30e2463-fe2f-4dec-8fe8-c034285e891a",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.environment.set(\"user-id-env\",jsonData.userId);\r",
									"console.log(\"userId : \"+jsonData.userId);\r",
									"\r",
									"pm.environment.set(\"User_Module_Email_env\",jsonData.userLoginEmail);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\",()=>{\r",
									"pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"\r",
									"pm.test(\"userComments  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userComments).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userEduPg  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userEduPg).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userEduUg  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userEduUg).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userFirstName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userFirstName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userId  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userId).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLastName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLastName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLinkedinUrl  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLinkedinUrl).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userLocation  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLocation).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"userLoginEmail  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLoginEmail).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userMiddleName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userMiddleName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userPhoneNumber  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userPhoneNumber).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"userTimeZone  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userTimeZone).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userVisaStatus  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userVisaStatus).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"userPhoneNumber is present and is an number\", function () {\r",
									"    pm.expect(responseBody.userPhoneNumber).to.be.an('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check Status Text\",()=>{\r",
									"pm.response.to.have.status('Created')\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type Header is present\",()=>{\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"});\r",
									"\r",
									"var schema = \r",
									"{\r",
									"\"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduPg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduUg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userFirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLinkedinUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLocation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLoginEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userMiddleName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userPhoneNumber\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"userTimeZone\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userVisaStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userComments\",\r",
									"    \"userEduPg\",\r",
									"    \"userEduUg\",\r",
									"    \"userFirstName\",\r",
									"    \"userId\",\r",
									"    \"userLastName\",\r",
									"    \"userLinkedinUrl\",\r",
									"    \"userLocation\",\r",
									"    \"userLoginEmail\",\r",
									"    \"userMiddleName\",\r",
									"    \"userPhoneNumber\",\r",
									"    \"userTimeZone\",\r",
									"    \"userVisaStatus\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (schema);\r",
									"});\r",
									"pm.test(\"response time is less than 1000ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e50fbcd-8f9a-4723-9675-128283e49f8a",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eead54f5-bdc9-4af5-b376-2da036e90e1d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{user_Comments}}\",\r\n  \"userEduPg\": \"{{user_EduPg}}\",\r\n  \"userEduUg\": \"{{user_EduUg}}\",\r\n  \"userFirstName\": \"{{user_FirstName}}\",\r\n  \"userId\": \"{{user_Id}}\",\r\n  \"userLastName\": \"{{user_LastName}}\",\r\n  \"userLinkedinUrl\": \"{{user_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{user_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{login_Status}}\",\r\n    \"password\": \"{{passWORD}}\",\r\n    \"roleIds\": [\r\n      \"{{roleId_student}}\"\r\n    ],\r\n    \"status\": \"{{staTUS}}\",\r\n    \"userLoginEmail\": \"{{usermodule_email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"{{user_MiddleName}}\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_student}}\",\r\n      \"userRoleStatus\": \"{{user_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{user_TimeZone}}\",\r\n  \"userVisaStatus\": \"{{user_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_existingEmailID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e30e2463-fe2f-4dec-8fe8-c034285e891a",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.environment.set(\"user-id-env\",jsonData.userId);\r",
									"console.log(\"userId : \"+jsonData.userId);\r",
									"\r",
									"//pm.environment.set(\"usermodule_email_env\",userLoginEmail);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"if(jsonData.message===\"Failed to create new UserLogin as email already exists!\"){\r",
									" pm.test(\"Failed to create new UserLogin as email already exists!\",function(){\r",
									"pm.expect(jsonData.message).contains(\"Failed to create new UserLogin as email already exists!\");\r",
									"}) \r",
									"return  \r",
									"}\r",
									"else if (jsonData.message===\"UserLogin as email is cannot be null or empty\") {\r",
									"\r",
									"pm.test(\"UserLogin as email is cannot be null or empty\",function(){\r",
									"pm.expect(jsonData.message).contains(\"UserLogin as email is cannot be null or empty\");\r",
									"});\r",
									"pm.test(\"Status code is 400\",()=>{\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"return\r",
									"}\r",
									"else{\r",
									"    pm.test(\"Status code is 200\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"}\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response time is less than 1000ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e50fbcd-8f9a-4723-9675-128283e49f8a",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6828203c-0b52-4889-9eeb-2a9cb4812635",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{user_Comments}}\",\r\n  \"userEduPg\": \"{{user_EduPg}}\",\r\n  \"userEduUg\": \"{{user_EduUg}}\",\r\n  \"userFirstName\": \"{{user_FirstName}}\",\r\n  \"userId\": \"{{user_Id}}\",\r\n  \"userLastName\": \"{{user_LastName}}\",\r\n  \"userLinkedinUrl\": \"{{user_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{user_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{login_Status}}\",\r\n    \"password\": \"{{passWORD}}\",\r\n    \"roleIds\": [\r\n      \"{{roleId_student}}\"\r\n    ],\r\n    \"status\": \"{{staTUS}}\",\r\n    \"userLoginEmail\": \"{{User_Module_Email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"{{user_MiddleName}}\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_student}}\",\r\n      \"userRoleStatus\": \"{{user_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{user_TimeZone}}\",\r\n  \"userVisaStatus\": \"{{user_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_MissingLastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e30e2463-fe2f-4dec-8fe8-c034285e891a",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"if(jsonData.message===\"userLastName must contain one or more alphabets only\"){\r",
									" pm.test(\"userLastName must contain one or more alphabets onl\",function(){\r",
									"pm.expect(jsonData.message).contains(\"userLastName must contain one or more alphabets onl\");\r",
									"}) \r",
									"return  \r",
									"}\r",
									"else if (jsonData.message===\"User Last Name is cannot be null or empty\") {\r",
									"\r",
									"pm.test(\"User Last Name is cannot be null or empty\",function(){\r",
									"pm.expect(jsonData.message).contains(\"User Last Name is cannot be null or empty\");\r",
									"});\r",
									"pm.test(\"Status code is 400\",()=>{\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"return\r",
									"}\r",
									"else{\r",
									"    pm.test(\"Status code is 200\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"}\r",
									"\r",
									"pm.test(\"response time is less than 1000ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e50fbcd-8f9a-4723-9675-128283e49f8a",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7351efbf-4287-4c46-9c16-26dcca879f81",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{user_Comments}}\",\r\n  \"userEduPg\": \"{{user_EduPg}}\",\r\n  \"userEduUg\": \"{{user_EduUg}}\",\r\n  \"userFirstName\": \"{{user_FirstName}}\",\r\n  \"userId\": \"{{user_Id}}\",\r\n  \"userLastName\": \"\",\r\n  \"userLinkedinUrl\": \"{{user_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{user_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{login_Status}}\",\r\n    \"password\": \"{{passWORD}}\",\r\n    \"roleIds\": [\r\n      \"{{roleId_student}}\"\r\n    ],\r\n    \"status\": \"{{staTUS}}\",\r\n    \"userLoginEmail\": \"{{usermodule_email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"{{user_MiddleName}}\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_student}}\",\r\n      \"userRoleStatus\": \"{{user_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{user_TimeZone}}\",\r\n  \"userVisaStatus\": \"{{user_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_MissingComments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e30e2463-fe2f-4dec-8fe8-c034285e891a",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"if(jsonData.message===\"userComments must begin with alphabet and can contain only alphanumeric characters\"){\r",
									" pm.test(\"userComments must begin with alphabet and can contain only alphanumeric characters\",function(){\r",
									"pm.expect(jsonData.message).contains(\"userComments must begin with alphabet and can contain only alphanumeric characters\");\r",
									"}) \r",
									"return  \r",
									"}\r",
									"else if (jsonData.message===\"userComments is cannot be null or empty\") {\r",
									"\r",
									"pm.test(\"userComments is cannot be null or empty\",function(){\r",
									"pm.expect(jsonData.message).contains(\"userComments is cannot be null or empty\");\r",
									"});\r",
									"pm.test(\"Status code is 400\",()=>{\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"return\r",
									"}\r",
									"else{\r",
									"    pm.test(\"Status code is 200\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"}\r",
									"\r",
									"pm.test(\"response time is less than 1000ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e50fbcd-8f9a-4723-9675-128283e49f8a",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8134feba-dc1b-4c19-8f1d-d613e3b62d12",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"\",\r\n  \"userEduPg\": \"{{user_EduPg}}\",\r\n  \"userEduUg\": \"{{user_EduUg}}\",\r\n  \"userFirstName\": \"{{user_FirstName}}\",\r\n  \"userId\": \"{{user_Id}}\",\r\n  \"userLastName\": \"{{user_LastName}}\",\r\n  \"userLinkedinUrl\": \"{{user_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{user_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{login_Status}}\",\r\n    \"password\": \"{{passWORD}}\",\r\n    \"roleIds\": [\r\n      \"{{roleId_student}}\"\r\n    ],\r\n    \"status\": \"{{staTUS}}\",\r\n    \"userLoginEmail\": \"{{usermodule_email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"{{user_MiddleName}}\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_student}}\",\r\n      \"userRoleStatus\": \"{{user_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{user_TimeZone}}\",\r\n  \"userVisaStatus\": \"{{user_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_MissingEDUpg",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e30e2463-fe2f-4dec-8fe8-c034285e891a",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"if(jsonData.message===\"userEduPgmust begin with alphabet and can contain only alphanumeric characters\"){\r",
									" pm.test(\"userEduPgmust begin with alphabet and can contain only alphanumeric characters\",function(){\r",
									"pm.expect(jsonData.message).contains(\"userEduPgmust begin with alphabet and can contain only alphanumeric characters\");\r",
									"}) \r",
									"return  \r",
									"}\r",
									"else if (jsonData.message===\"userEduPgmust is cannot be null or empty\") {\r",
									"\r",
									"pm.test(\"userEduPgmust is cannot be null or empty\",function(){\r",
									"pm.expect(jsonData.message).contains(\"userEduPgmust is cannot be null or empty\");\r",
									"});\r",
									"pm.test(\"Status code is 400\",()=>{\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"return\r",
									"}\r",
									"else{\r",
									"    pm.test(\"Status code is 200\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"}\r",
									"\r",
									"pm.test(\"response time is less than 1000ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e50fbcd-8f9a-4723-9675-128283e49f8a",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c707ff3d-7cc0-48b4-a96a-41c95e7ecf87",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{user_Comments}}\",\r\n  \"userEduPg\": \"\",\r\n  \"userEduUg\": \"{{user_EduUg}}\",\r\n  \"userFirstName\": \"{{user_FirstName}}\",\r\n  \"userId\": \"{{user_Id}}\",\r\n  \"userLastName\": \"{{user_LastName}}\",\r\n  \"userLinkedinUrl\": \"{{user_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{user_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{login_Status}}\",\r\n    \"password\": \"{{passWORD}}\",\r\n    \"roleIds\": [\r\n      \"{{roleId_student}}\"\r\n    ],\r\n    \"status\": \"{{staTUS}}\",\r\n    \"userLoginEmail\": \"{{usermodule_email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"{{user_MiddleName}}\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_student}}\",\r\n      \"userRoleStatus\": \"{{user_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{user_TimeZone}}\",\r\n  \"userVisaStatus\": \"{{user_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_MissingEDUug",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e30e2463-fe2f-4dec-8fe8-c034285e891a",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"if(jsonData.message===\"userEduUg must begin with alphabet and can contain only alphanumeric characters\"){\r",
									" pm.test(\"userEduUg must begin with alphabet and can contain only alphanumeric characters\",function(){\r",
									"pm.expect(jsonData.message).contains(\"userEduUg must begin with alphabet and can contain only alphanumeric characters\");\r",
									"}) \r",
									"return  \r",
									"}\r",
									"else if (jsonData.message===\"userEduUg must is cannot be null or empty\") {\r",
									"\r",
									"pm.test(\"userEduUg must is cannot be null or empty\",function(){\r",
									"pm.expect(jsonData.message).contains(\"userEduUg must is cannot be null or empty\");\r",
									"});\r",
									"pm.test(\"Status code is 400\",()=>{\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"return\r",
									"}\r",
									"else{\r",
									"    pm.test(\"Status code is 200\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"}\r",
									"\r",
									"pm.test(\"response time is less than 1000ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e50fbcd-8f9a-4723-9675-128283e49f8a",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ceb1e24d-1170-42da-95ae-3080492fded2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{user_Comments}}\",\r\n  \"userEduPg\": \"{{user_EduPg}}\",\r\n  \"userEduUg\": \"\",\r\n  \"userFirstName\": \"{{user_FirstName}}\",\r\n  \"userId\": \"{{user_Id}}\",\r\n  \"userLastName\": \"{{user_LastName}}\",\r\n  \"userLinkedinUrl\": \"{{user_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{user_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{login_Status}}\",\r\n    \"password\": \"{{passWORD}}\",\r\n    \"roleIds\": [\r\n      \"{{roleId_student}}\"\r\n    ],\r\n    \"status\": \"{{staTUS}}\",\r\n    \"userLoginEmail\": \"{{usermodule_email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"{{user_MiddleName}}\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_student}}\",\r\n      \"userRoleStatus\": \"{{user_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{user_TimeZone}}\",\r\n  \"userVisaStatus\": \"{{user_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_MissingTimeZone",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e30e2463-fe2f-4dec-8fe8-c034285e891a",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"if(jsonData.message===\"Failed to create user, as 'TimeZone' is invalid !!\"){\r",
									" pm.test(\"Failed to create user, as 'TimeZone' is invalid !!\",function(){\r",
									"pm.expect(jsonData.message).contains(\"Failed to create user, as 'TimeZone' is invalid !!\");\r",
									"}) \r",
									"return  \r",
									"}\r",
									"else if (jsonData.message===\"TimeZone must is cannot be null or empty\") {\r",
									"\r",
									"pm.test(\"TimeZone must is cannot be null or empty\",function(){\r",
									"pm.expect(jsonData.message).contains(\"TimeZone must is cannot be null or empty\");\r",
									"});\r",
									"pm.test(\"Status code is 400\",()=>{\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"return\r",
									"}\r",
									"else{\r",
									"    pm.test(\"Status code is 200\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"}\r",
									"\r",
									"pm.test(\"response time is less than 1000ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e50fbcd-8f9a-4723-9675-128283e49f8a",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "85914861-075b-41f6-8666-c7ee2d998103",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{user_Comments}}\",\r\n  \"userEduPg\": \"{{user_EduPg}}\",\r\n  \"userEduUg\": \"{{user_EduUg}}\",\r\n  \"userFirstName\": \"{{user_FirstName}}\",\r\n  \"userId\": \"{{user_Id}}\",\r\n  \"userLastName\": \"{{user_LastName}}\",\r\n  \"userLinkedinUrl\": \"{{user_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{user_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{login_Status}}\",\r\n    \"password\": \"{{passWORD}}\",\r\n    \"roleIds\": [\r\n      \"{{roleId_student}}\"\r\n    ],\r\n    \"status\": \"{{staTUS}}\",\r\n    \"userLoginEmail\": \"{{usermodule_email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"{{user_MiddleName}}\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_student}}\",\r\n      \"userRoleStatus\": \"{{user_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"\",\r\n  \"userVisaStatus\": \"{{user_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_MissingContactNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e30e2463-fe2f-4dec-8fe8-c034285e891a",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400\",()=>{\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response time is less than 1000ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e50fbcd-8f9a-4723-9675-128283e49f8a",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d3edee32-49d7-4910-8928-58dc1b40d22b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{user_Comments}}\",\r\n  \"userEduPg\": \"{{user_EduPg}}\",\r\n  \"userEduUg\": \"{{user_EduUg}}\",\r\n  \"userFirstName\": \"{{user_FirstName}}\",\r\n  \"userId\": \"{{user_Id}}\",\r\n  \"userLastName\": \"{{user_LastName}}\",\r\n  \"userLinkedinUrl\": \"{{user_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{user_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{login_Status}}\",\r\n    \"password\": \"{{passWORD}}\",\r\n    \"roleIds\": [\r\n      \"{{roleId_student}}\"\r\n    ],\r\n    \"status\": \"{{staTUS}}\",\r\n    \"userLoginEmail\": \"{{usermodule_email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"{{user_MiddleName}}\",\r\n  \"userPhoneNumber\": \"\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_student}}\",\r\n      \"userRoleStatus\": \"{{user_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{user_TimeZone}}\",\r\n  \"userVisaStatus\": \"{{user_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_MissingLinkdinURL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e30e2463-fe2f-4dec-8fe8-c034285e891a",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"if(jsonData.message===\"userLinkedinUrl must contain www.linkedin.com\"){\r",
									" pm.test(\"userLinkedinUrl must contain www.linkedin.com\",function(){\r",
									"pm.expect(jsonData.message).contains(\"userLinkedinUrl must contain www.linkedin.com\");\r",
									"}) \r",
									"return  \r",
									"}\r",
									"else if (jsonData.message===\"userLinkedinUrl must is cannot be null or empty\") {\r",
									"\r",
									"pm.test(\"userLinkedinUrl must is cannot be null or empty\",function(){\r",
									"pm.expect(jsonData.message).contains(\"userLinkedinUrl must is cannot be null or empty\");\r",
									"});\r",
									"pm.test(\"Status code is 400\",()=>{\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"return\r",
									"}\r",
									"else{\r",
									"    pm.test(\"Status code is 200\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"}\r",
									"\r",
									"pm.test(\"response time is less than 1000ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e50fbcd-8f9a-4723-9675-128283e49f8a",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e6556934-f49e-448c-9a9b-4e642c8c07fa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{user_Comments}}\",\r\n  \"userEduPg\": \"{{user_EduPg}}\",\r\n  \"userEduUg\": \"{{user_EduUg}}\",\r\n  \"userFirstName\": \"{{user_FirstName}}\",\r\n  \"userId\": \"{{user_Id}}\",\r\n  \"userLastName\": \"{{user_LastName}}\",\r\n  \"userLinkedinUrl\": \"\",\r\n  \"userLocation\": \"{{user_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{login_Status}}\",\r\n    \"password\": \"{{passWORD}}\",\r\n    \"roleIds\": [\r\n      \"{{roleId_student}}\"\r\n    ],\r\n    \"status\": \"{{staTUS}}\",\r\n    \"userLoginEmail\": \"{{usermodule_email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"{{user_MiddleName}}\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_student}}\",\r\n      \"userRoleStatus\": \"{{user_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{user_TimeZone}}\",\r\n  \"userVisaStatus\": \"{{user_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_MissingRollID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e30e2463-fe2f-4dec-8fe8-c034285e891a",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"if(jsonData.message===\"Role Id is mandatory\"){\r",
									" pm.test(\"Role Id is mandatory\",function(){\r",
									"pm.expect(jsonData.message).contains(\"Role Id is mandatory\");\r",
									"}) \r",
									"return  \r",
									"}\r",
									"else if (jsonData.message===\"Role Id must is cannot be null or empty\") {\r",
									"\r",
									"pm.test(\"Role Id must is cannot be null or empty\",function(){\r",
									"pm.expect(jsonData.message).contains(\"Role Id must is cannot be null or empty\");\r",
									"});\r",
									"pm.test(\"Status code is 400\",()=>{\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"return\r",
									"}\r",
									"else{\r",
									"    pm.test(\"Status code is 200\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"}\r",
									"\r",
									"pm.test(\"response time is less than 1000ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e50fbcd-8f9a-4723-9675-128283e49f8a",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "04e7243f-2416-43df-96b6-fff75384deb6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{user_Comments}}\",\r\n  \"userEduPg\": \"{{user_EduPg}}\",\r\n  \"userEduUg\": \"{{user_EduUg}}\",\r\n  \"userFirstName\": \"{{user_FirstName}}\",\r\n  \"userId\": \"{{user_Id}}\",\r\n  \"userLastName\": \"{{user_LastName}}\",\r\n  \"userLinkedinUrl\": \"{{user_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{user_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{login_Status}}\",\r\n    \"password\": \"{{passWORD}}\",\r\n    \"roleIds\": [\r\n      \"\"\r\n    ],\r\n    \"status\": \"{{staTUS}}\",\r\n    \"userLoginEmail\": \"{{usermodule_email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"{{user_MiddleName}}\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"\",\r\n      \"userRoleStatus\": \"{{user_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{user_TimeZone}}\",\r\n  \"userVisaStatus\": \"{{user_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_MissingFirstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e30e2463-fe2f-4dec-8fe8-c034285e891a",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"if(jsonData.message===\"User First Name must begin with alphabet and can contain only alphanumeric characters\"){\r",
									" pm.test(\"User First Name must begin with alphabet and can contain only alphanumeric characters\",function(){\r",
									"pm.expect(jsonData.message).contains(\"User First Name must begin with alphabet and can contain only alphanumeric characters\");\r",
									"}) \r",
									"return  \r",
									"}\r",
									"else if (jsonData.message===\"User First Name is cannot be null or empty\") {\r",
									"\r",
									"pm.test(\"User First Name is cannot be null or empty\",function(){\r",
									"pm.expect(jsonData.message).contains(\"User First Name is cannot be null or empty\");\r",
									"});\r",
									"pm.test(\"Status code is 400\",()=>{\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"return\r",
									"}\r",
									"else{\r",
									"    pm.test(\"Status code is 200\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"}\r",
									"\r",
									"pm.test(\"response time is less than 1000ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e50fbcd-8f9a-4723-9675-128283e49f8a",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "393b69b6-b257-4f27-b84a-c218b4dadea7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{user_Comments}}\",\r\n  \"userEduPg\": \"{{user_EduPg}}\",\r\n  \"userEduUg\": \"{{user_EduUg}}\",\r\n  \"userFirstName\": \"\",\r\n  \"userId\": \"{{user_Id}}\",\r\n  \"userLastName\": \"{{user_LastName}}\",\r\n  \"userLinkedinUrl\": \"{{user_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{user_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{login_Status}}\",\r\n    \"password\": \"{{passWORD}}\",\r\n    \"roleIds\": [\r\n      \"{{roleId_student}}\"\r\n    ],\r\n    \"status\": \"{{staTUS}}\",\r\n    \"userLoginEmail\": \"{{usermodule_email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"{{user_MiddleName}}\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_student}}\",\r\n      \"userRoleStatus\": \"{{user_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{user_TimeZone}}\",\r\n  \"userVisaStatus\": \"{{user_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_MissingmiddleName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e30e2463-fe2f-4dec-8fe8-c034285e891a",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"if(jsonData.message===\"userMiddleName must contain one or more alphabets only\"){\r",
									" pm.test(\"userMiddleName must contain one or more alphabets only\",function(){\r",
									"pm.expect(jsonData.message).contains(\"userMiddleName must contain one or more alphabets only\");\r",
									"}) \r",
									"return  \r",
									"}\r",
									"else if (jsonData.message===\"userMiddleName is cannot be null or empty\") {\r",
									"\r",
									"pm.test(\"userMiddleName is cannot be null or empty\",function(){\r",
									"pm.expect(jsonData.message).contains(\"userMiddleName is cannot be null or empty\");\r",
									"});\r",
									"pm.test(\"Status code is 400\",()=>{\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"return\r",
									"}\r",
									"else{\r",
									"    pm.test(\"Status code is 200\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"}\r",
									"\r",
									"pm.test(\"response time is less than 1000ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e50fbcd-8f9a-4723-9675-128283e49f8a",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "90d37328-831c-47b9-ad19-7df0cb9635a3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{user_Comments}}\",\r\n  \"userEduPg\": \"{{user_EduPg}}\",\r\n  \"userEduUg\": \"{{user_EduUg}}\",\r\n  \"userFirstName\": \"{{user_FirstName}}\",\r\n  \"userId\": \"{{user_Id}}\",\r\n  \"userLastName\": \"{{user_LastName}}\",\r\n  \"userLinkedinUrl\": \"{{user_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{user_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{login_Status}}\",\r\n    \"password\": \"{{passWORD}}\",\r\n    \"roleIds\": [\r\n      \"{{roleId_student}}\"\r\n    ],\r\n    \"status\": \"{{staTUS}}\",\r\n    \"userLoginEmail\": \"{{usermodule_email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_student}}\",\r\n      \"userRoleStatus\": \"{{user_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{user_TimeZone}}\",\r\n  \"userVisaStatus\": \"{{user_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_MissingEmailID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e30e2463-fe2f-4dec-8fe8-c034285e891a",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response time is less than 1000ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e50fbcd-8f9a-4723-9675-128283e49f8a",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ee486c82-e5a8-4a87-bf8c-f1b9f912b757",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{user_Comments}}\",\r\n  \"userEduPg\": \"{{user_EduPg}}\",\r\n  \"userEduUg\": \"{{user_EduUg}}\",\r\n  \"userFirstName\": \"{{user_FirstName}}\",\r\n  \"userId\": \"{{user_Id}}\",\r\n  \"userLastName\": \"{{user_LastName}}\",\r\n  \"userLinkedinUrl\": \"{{user_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{user_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{login_Status}}\",\r\n    \"password\": \"{{passWORD}}\",\r\n    \"roleIds\": [\r\n      \"{{roleId_student}}\"\r\n    ],\r\n    \"status\": \"{{staTUS}}\",\r\n    \"userLoginEmail\": \"\"\r\n  },\r\n  \"userMiddleName\": \"{{user_MiddleName}}\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_student}}\",\r\n      \"userRoleStatus\": \"{{user_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{user_TimeZone}}\",\r\n  \"userVisaStatus\": \"{{user_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_Morethan_10_numbers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e30e2463-fe2f-4dec-8fe8-c034285e891a",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"var jsonData = JSON.parse(responseBody);\r",
									" if (jsonData.message===\"Enter phone no in this format (CountryCode)(PhoneNo) +91 1234567890\") {\r",
									"\r",
									"pm.test(\"Enter phone no in this format (CountryCode)(PhoneNo) +91 1234567890\",function(){\r",
									"pm.expect(jsonData.message).contains(\"Enter phone no in this format (CountryCode)(PhoneNo) +91 1234567890\");\r",
									"});\r",
									"pm.test(\"Status code is 400\",()=>{\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"return\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response time is less than 1000ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e50fbcd-8f9a-4723-9675-128283e49f8a",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1f3ce16d-ea79-4709-a507-8c11a8864ce8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{user_Comments}}\",\r\n  \"userEduPg\": \"{{user_EduPg}}\",\r\n  \"userEduUg\": \"{{user_EduUg}}\",\r\n  \"userFirstName\": \"{{user_FirstName}}\",\r\n  \"userId\": \"{{user_Id}}\",\r\n  \"userLastName\": \"{{user_LastName}}\",\r\n  \"userLinkedinUrl\": \"{{user_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{user_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{login_Status}}\",\r\n    \"password\": \"{{passWORD}}\",\r\n    \"roleIds\": [\r\n      \"{{roleId_student}}\"\r\n    ],\r\n    \"status\": \"{{staTUS}}\",\r\n    \"userLoginEmail\": \"\"\r\n  },\r\n  \"userMiddleName\": \"{{user_MiddleName}}\",\r\n  \"userPhoneNumber\": {{user_PhoneNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_student}}\",\r\n      \"userRoleStatus\": \"{{user_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{user_TimeZone}}\",\r\n  \"userVisaStatus\": \"{{user_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_lessthan_10_numbers Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e30e2463-fe2f-4dec-8fe8-c034285e891a",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									" if (jsonData.message===\"Enter phone no in this format (CountryCode)(PhoneNo) +91 1234567890\") {\r",
									"\r",
									"pm.test(\"Enter phone no in this format (CountryCode)(PhoneNo) +91 1234567890\",function(){\r",
									"pm.expect(jsonData.message).contains(\"Enter phone no in this format (CountryCode)(PhoneNo) +91 1234567890\");\r",
									"});\r",
									"pm.test(\"Status code is 400\",()=>{\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"return\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"response time is less than 1000ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e50fbcd-8f9a-4723-9675-128283e49f8a",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7f11f873-713b-46f5-8bb1-46ae4064422a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{user_Comments}}\",\r\n  \"userEduPg\": \"{{user_EduPg}}\",\r\n  \"userEduUg\": \"{{user_EduUg}}\",\r\n  \"userFirstName\": \"{{user_FirstName}}\",\r\n  \"userId\": \"{{user_Id}}\",\r\n  \"userLastName\": \"{{user_LastName}}\",\r\n  \"userLinkedinUrl\": \"{{user_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{user_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{login_Status}}\",\r\n    \"password\": \"{{passWORD}}\",\r\n    \"roleIds\": [\r\n      \"{{roleId_student}}\"\r\n    ],\r\n    \"status\": \"{{staTUS}}\",\r\n    \"userLoginEmail\": \"\"\r\n  },\r\n  \"userMiddleName\": \"{{user_MiddleName}}\",\r\n  \"userPhoneNumber\": {{User_Number}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_student}}\",\r\n      \"userRoleStatus\": \"{{user_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{user_TimeZone}}\",\r\n  \"userVisaStatus\": \"{{user_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_MissingVisaStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e30e2463-fe2f-4dec-8fe8-c034285e891a",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"if(jsonData.message===\"Failed to create user, as 'Visa Status' is invalid !!\"){\r",
									" pm.test(\"Failed to create user, as 'Visa Status' is invalid !!\",function(){\r",
									"pm.expect(jsonData.message).contains(\"Failed to create user, as 'Visa Status' is invalid !!\");\r",
									"}) \r",
									"return  \r",
									"}\r",
									"else if (jsonData.message===\"Visa Status is cannot be null or empty\") {\r",
									"\r",
									"pm.test(\"Visa Status is cannot be null or empty\",function(){\r",
									"pm.expect(jsonData.message).contains(\"Visa Status is cannot be null or empty\");\r",
									"});\r",
									"pm.test(\"Status code is 400\",()=>{\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"return\r",
									"}\r",
									"else{\r",
									"    pm.test(\"Status code is 200\",()=>{\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e50fbcd-8f9a-4723-9675-128283e49f8a",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "55f6e244-6b29-4c7f-8b52-5c9d54fd61a7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{user_Comments}}\",\r\n  \"userEduPg\": \"{{user_EduPg}}\",\r\n  \"userEduUg\": \"{{user_EduUg}}\",\r\n  \"userFirstName\": \"{{user_FirstName}}\",\r\n  \"userId\": \"{{user_Id}}\",\r\n  \"userLastName\": \"{{user_LastName}}\",\r\n  \"userLinkedinUrl\": \"{{user_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{user_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{login_Status}}\",\r\n    \"password\": \"{{passWORD}}\",\r\n    \"roleIds\": [\r\n      \"{{roleId_student}}\"\r\n    ],\r\n    \"status\": \"{{staTUS}}\",\r\n    \"userLoginEmail\": \"{{usermodule_email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"{{user_MiddleName}}\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_student}}\",\r\n      \"userRoleStatus\": \"{{user_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{user_TimeZone}}\",\r\n  \"userVisaStatus\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "CreateUser_Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f3745dca-b9de-4027-ab61-eead90a92c02",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc5\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7765239b-dc96-4ef8-91b7-6bfe07b922c1",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"//var requestBody = pm.request.body.raw;\r",
									"if(jsonData.message===jsonData){\r",
									"\r",
									"pm.test(\"Status code is 201\",()=>{\r",
									"pm.response.to.have.status(201);\r",
									"\r",
									"\r",
									"});\r",
									"return\r",
									"}\r",
									" else if(jsonData.message===\"User Last Name is cannot be null or empty\"){\r",
									"\r",
									"pm.test(\"User Last Name is cannot be null or empty\",function(){\r",
									"pm.expect(jsonData.message).contains(\"User Last Name is cannot be null or empty\");\r",
									"})\r",
									"pm.test(\"Status code is 400\",()=>{\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"return\r",
									"}\r",
									" \r",
									"\r",
									"\r",
									"\r",
									"else if (json.Data.message===\"userComments must begin with alphabet and can contain only alphanumeric characters\"){\r",
									"pm.test(\"userComments must begin with alphabet and can contain only alphanumeric characters\",function(){\r",
									"pm.expect(jsonData.message).contains(\"userLastName must contain one or more alphabets only\");\r",
									"})\r",
									"pm.test(\"Status code is 400\",()=>{\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"return\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"/*pm.test(\"userComments  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userComments).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userEduPg  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userEduPg).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userEduUg  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userEduUg).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userFirstName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userFirstName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userId  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userId).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLastName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLastName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLinkedinUrl  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLinkedinUrl).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userLocation  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLocation).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"userLoginEmail  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLoginEmail).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userMiddleName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userMiddleName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userPhoneNumber  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userPhoneNumber).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"userTimeZone  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userTimeZone).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userVisaStatus  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userVisaStatus).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"userPhoneNumber is present and is an number\", function () {\r",
									"    pm.expect(responseBody.userPhoneNumber).to.be.an('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check Status Text\",()=>{\r",
									"pm.response.to.have.status('Created')\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type Header is present\",()=>{\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"});\r",
									"\r",
									"var schema = \r",
									"{\r",
									"\"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduPg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduUg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userFirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLinkedinUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLocation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLoginEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userMiddleName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userPhoneNumber\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"userTimeZone\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userVisaStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userComments\",\r",
									"    \"userEduPg\",\r",
									"    \"userEduUg\",\r",
									"    \"userFirstName\",\r",
									"    \"userId\",\r",
									"    \"userLastName\",\r",
									"    \"userLinkedinUrl\",\r",
									"    \"userLocation\",\r",
									"    \"userLoginEmail\",\r",
									"    \"userMiddleName\",\r",
									"    \"userPhoneNumber\",\r",
									"    \"userTimeZone\",\r",
									"    \"userVisaStatus\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (schema);\r",
									"});*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e84a7ca6-1b9e-4247-b992-30c593bb790c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{User_Comments}}\",\r\n  \"userEduPg\": \"{{User_EduPg}}\",\r\n  \"userEduUg\": \"{{User_EduUg}}\",\r\n  \"userFirstName\": \"{{User_FirstName}}\",\r\n  \"userId\": \"{{User_Id}}\",\r\n  \"userLastName\": \"{{User_LastName}}\",\r\n  \"userLinkedinUrl\": \"{{User_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{User_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{Login_Status}}\",\r\n    \"password\": \"{{Password}}\",\r\n    \"roleIds\": [\r\n      \"{{Role_Ids}}\"\r\n    ],\r\n    \"status\": \"{{Status}}\",\r\n    \"userLoginEmail\": \"{{User_LoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{User_MiddleName}}\",\r\n  \"userPhoneNumber\": {{User_Number}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{Role_Id}}\",\r\n      \"userRoleStatus\": \"{{User_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{User_TimeZone}}\",\r\n  \"userVisaStatus\": \"{{User_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8c2689e-8d94-4eb7-abfd-3eceda0d80d9",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\",()=>{\r",
									"pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"\r",
									"pm.test(\"userComments  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userComments).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userEduPg  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userEduPg).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userEduUg  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userEduUg).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userFirstName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userFirstName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userId  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userId).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLastName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLastName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLinkedinUrl  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLinkedinUrl).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userLocation  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLocation).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"userLoginEmail  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLoginEmail).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userMiddleName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userMiddleName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userPhoneNumber  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userPhoneNumber).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"userTimeZone  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userTimeZone).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userVisaStatus  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userVisaStatus).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"userPhoneNumber is present and is an number\", function () {\r",
									"    pm.expect(responseBody.userPhoneNumber).to.be.an('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check Status Text\",()=>{\r",
									"pm.response.to.have.status('Created')\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type Header is present\",()=>{\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"});\r",
									"\r",
									"var schema = \r",
									"{\r",
									"\"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduPg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduUg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userFirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLinkedinUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLocation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLoginEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userMiddleName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userPhoneNumber\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"userTimeZone\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userVisaStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userComments\",\r",
									"    \"userEduPg\",\r",
									"    \"userEduUg\",\r",
									"    \"userFirstName\",\r",
									"    \"userId\",\r",
									"    \"userLastName\",\r",
									"    \"userLinkedinUrl\",\r",
									"    \"userLocation\",\r",
									"    \"userLoginEmail\",\r",
									"    \"userMiddleName\",\r",
									"    \"userPhoneNumber\",\r",
									"    \"userTimeZone\",\r",
									"    \"userVisaStatus\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (schema);\r",
									"});\r",
									"pm.test(\"response time is less than 1000ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7c98f721-2b68-462e-a4e7-af322c107d21",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3d46d975-4c09-4b42-aabd-7d5c25eaad10",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{user_Comments}}\",\r\n  \"userEduPg\": \"{{user_EduPg}}\",\r\n  \"userEduUg\": \"{{user_EduUg}}\",\r\n  \"userFirstName\": \"{{user_FirstName}}\",\r\n  \"userId\": \"{{user_Id}}\",\r\n  \"userLastName\": \"{{user_LastName}}\",\r\n  \"userLinkedinUrl\": \"{{user_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{user_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{login_Status}}\",\r\n    \"password\": \"{{passWORD}}\",\r\n    \"roleIds\": [\r\n      \"{{roleId_admin}}\"\r\n    ],\r\n    \"status\": \"{{staTUS}}\",\r\n    \"userLoginEmail\": \"{{usermodule_email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"{{user_MiddleName}}\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_admin}}\",\r\n      \"userRoleStatus\": \"{{user_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{user_TimeZone}}\",\r\n  \"userVisaStatus\": \"{{user_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b2ff739-7de8-4fa9-bdb7-3ea961b3e4a0",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\",()=>{\r",
									"pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"\r",
									"pm.test(\"userComments  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userComments).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userEduPg  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userEduPg).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userEduUg  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userEduUg).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userFirstName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userFirstName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userId  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userId).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLastName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLastName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLinkedinUrl  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLinkedinUrl).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userLocation  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLocation).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"userLoginEmail  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLoginEmail).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userMiddleName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userMiddleName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userPhoneNumber  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userPhoneNumber).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"userTimeZone  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userTimeZone).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userVisaStatus  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userVisaStatus).to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"userPhoneNumber is present and is an number\", function () {\r",
									"    pm.expect(responseBody.userPhoneNumber).to.be.an('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check Status Text\",()=>{\r",
									"pm.response.to.have.status('Created')\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type Header is present\",()=>{\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"});\r",
									"\r",
									"var schema = \r",
									"{\r",
									"\"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"userComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduPg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userEduUg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userFirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLinkedinUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLocation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userLoginEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userMiddleName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userPhoneNumber\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"userTimeZone\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userVisaStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"userComments\",\r",
									"    \"userEduPg\",\r",
									"    \"userEduUg\",\r",
									"    \"userFirstName\",\r",
									"    \"userId\",\r",
									"    \"userLastName\",\r",
									"    \"userLinkedinUrl\",\r",
									"    \"userLocation\",\r",
									"    \"userLoginEmail\",\r",
									"    \"userMiddleName\",\r",
									"    \"userPhoneNumber\",\r",
									"    \"userTimeZone\",\r",
									"    \"userVisaStatus\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (schema);\r",
									"});\r",
									"pm.test(\"response time is less than 1000ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e31ce434-66e1-4094-b4c3-fff9c7ed9a09",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dc14e946-5a10-4126-910d-2629072de28f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{user_Comments}}\",\r\n  \"userEduPg\": \"{{user_EduPg}}\",\r\n  \"userEduUg\": \"{{user_EduUg}}\",\r\n  \"userFirstName\": \"{{user_FirstName}}\",\r\n  \"userId\": \"{{user_Id}}\",\r\n  \"userLastName\": \"{{user_LastName}}\",\r\n  \"userLinkedinUrl\": \"{{user_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{user_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{login_Status}}\",\r\n    \"password\": \"{{passWORD}}\",\r\n    \"roleIds\": [\r\n      \"{{roleId_staff}}\"\r\n    ],\r\n    \"status\": \"{{staTUS}}\",\r\n    \"userLoginEmail\": \"{{usermodule_email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"{{user_MiddleName}}\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_staff}}\",\r\n      \"userRoleStatus\": \"{{user_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{user_TimeZone}}\",\r\n  \"userVisaStatus\": \"{{user_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "AllUsers_roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07d71ee4-a830-44f4-a884-39cad3140b05",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "35360f4d-dc0e-4672-bfb7-9a6e30e4a079",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/roles"
					},
					"response": []
				},
				{
					"name": "AllUsers_roles_invalidAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07d71ee4-a830-44f4-a884-39cad3140b05",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "02f5a550-c93c-49a4-a6c0-1315fea5ac3d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": ""
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/roles"
					},
					"response": []
				},
				{
					"name": "User_ByUserID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4931a4b5-32fb-4b68-bde7-12c67a5f2a5b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bfbccf0b-e379-4d5a-9a41-7473207726f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/:userid",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								":userid"
							],
							"variable": [
								{
									"key": "userid",
									"value": "{{user-id-env}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User_By_InvalidUserid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60119e14-aee9-45b2-a9eb-672101d5b085",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2307a141-4601-4660-b741-b6784ea10cde",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/:userid",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								":userid"
							],
							"variable": [
								{
									"key": "userid",
									"value": "{{user-invalidid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-by-programid",
					"id": "aa7dde92-841e-45de-8bf4-e0e4d5d82f16",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/programs/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"programs",
								":programId"
							],
							"variable": [
								{
									"key": "programId",
									"value": "{{programbatch_programId_invalid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-by-invalidprogramid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e0cebef-bff2-4be7-b810-170ef8e5d7e1",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4b538d1d-cb79-4e81-8d8f-1b07e5c70384",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/programs/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"programs",
								":programId"
							],
							"variable": [
								{
									"key": "programId",
									"value": "{{User_Module_InvalidProgramid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Active User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a701381-df1d-461f-869b-c06a564a9f1e",
								"exec": [
									" pm.test(\"count of records with staus active\", function(){\r",
									"    const jsonData = pm.response.json();\r",
									"    var count=jsonData.length;\r",
									"    console.log(count);\r",
									" });\r",
									"\r",
									"  //tests[\"Count: \"  + body.value.length] = true;\r",
									"  \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "74ef00d9-6cc0-4a38-a391-c8496331e0a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users/activeUsers"
					},
					"response": []
				},
				{
					"name": "Get Active_User _invalidAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a701381-df1d-461f-869b-c06a564a9f1e",
								"exec": [
									" var body = JSON.parse(responseBody);\r",
									"  tests[\"Count: \"  + body.value.length] = true;\r",
									"  \r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3eb1face-1aa7-4388-b0bb-540f77184988",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users/activeUsers"
					},
					"response": []
				},
				{
					"name": "users-programBatchBy-batchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c3c4044-4133-43db-9e49-a2a4a1d88c9b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e32abc0a-0f52-4183-85a8-b1a0585f9fa3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/programBatch/:batchId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"programBatch",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "{{User_Module_MyBatchID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-programBatchBy-invalidbatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c3c4044-4133-43db-9e49-a2a4a1d88c9b",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8a1a66e3-c83b-4d4d-af3c-c126cdfdcaae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/programBatch/:batchId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"programBatch",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "{{User_Module_InvalidbatchID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "{{BaseURL}}/users/U877",
					"id": "bb1ecfe8-127d-4b50-b297-ccb2553848d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/users/U877"
					},
					"response": []
				},
				{
					"name": "{{BaseURL}}userRoleProgramBatchMap",
					"id": "6ac5341a-a9fe-44a5-813f-84acf57e7e20",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/userRoleProgramBatchMap"
					},
					"response": []
				},
				{
					"name": "{{BaseURL}}/users/roleStatus",
					"id": "974e5925-c39b-4c9c-bbc5-dfefe654b8c3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"comments\",\r\n  \"userEduPg\": \"Dgree\",\r\n  \"userEduUg\": \"Pg\",\r\n  \"userFirstName\": \"Team\",\r\n  \"userId\": \"U001\",\r\n  \"userLastName\": \"ccssd\",\r\n  \"userLinkedinUrl\": \"http:www.linkedin.com\",\r\n  \"userLocation\": \"UK\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"active\",\r\n    \"password\": \"sad\",\r\n    \"roleIds\": [\r\n      \"R01\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"\"\r\n  },\r\n  \"userMiddleName\": \"fsf\",\r\n  \"userPhoneNumber\": 9662212100,\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"EST\",\r\n  \"userVisaStatus\": \"GC-EAD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				}
			],
			"id": "29c3dcc5-c6e6-4672-8f5a-62b080051a6e"
		}
	]
}