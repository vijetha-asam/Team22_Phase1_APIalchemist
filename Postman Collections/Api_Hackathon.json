{
	"info": {
		"_postman_id": "0a55a194-137f-4da4-9f7b-9fb1905cab7c",
		"name": "Team22_APIAlchemist",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Negative-ErrorHandling",
			"item": [
				{
					"name": "Get All Programs with invalid endpoint",
					"id": "f2de7b49-4a44-4431-a523-d2ec6ab1cb7d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyc0BnbWFpbC5jb20iLCJpYXQiOjE3MDk3NDU4MzQsImV4cCI6MTcwOTc3NDYzNH0.amYSqDiKjBL_Xm37VBpthZGxTJ6Gt4n3BW0gArSwToPf-QmT7X0qHOvRizgTPZXrvYjeOwd4CTBQa7pV2ueVow"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/allProgram"
					},
					"response": []
				},
				{
					"name": "Create new program with invalid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
								"exec": [
									"var resp = pm.response.json();",
									"var programID = resp.programId;",
									"pm.environment.set(\"programModule_programID\",token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "02bb949e-28ff-43c9-a09a-f1dc115ae404",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"String\",\n  \"programName\": \"String\",\n  \"programStatus\": \"String\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/savprogram"
					},
					"response": []
				}
			],
			"id": "98ade07d-b720-4c60-bf4d-7ad442d2be30"
		},
		{
			"name": "UserModule",
			"item": [
				{
					"name": "GetAllUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc1c6403-09f4-4353-9462-7aa46b6923d1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cec05095-44d9-4f42-b5f1-96b458383fec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users"
					},
					"response": []
				},
				{
					"name": "Usermodule_login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23199d6a-ea53-4459-80ef-4efe21905c47",
								"exec": [
									"var resp = pm.response.json();",
									"var token = resp.token;",
									"pm.environment.set(\"Usermodule_token\",token);",
									"//pm.globals.set(\"validUserID\",userID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "99841369-45b1-4659-8d0a-517aebe449aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"Numpyninja@1\",\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "GetAllRoles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3e87c89-c965-427f-aa8a-cc4c16359ad9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6883fa43-abb1-41bf-826d-b08cbba540e4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users/roles"
					},
					"response": []
				},
				{
					"name": "Create_student",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f3745dca-b9de-4027-ab61-eead90a92c02",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7765239b-dc96-4ef8-91b7-6bfe07b922c1",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.environment.set(\"user-id-env\",jsonData.userId);\r",
									"console.log(\"userId : \"+jsonData.userId);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\",()=>{\r",
									"pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"\r",
									"pm.test(\"userComments  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userComments).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userEduPg  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userEduPg).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userEduUg  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userEduUg).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userFirstName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userFirstName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userId  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userId).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLastName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLastName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLinkedinUrl  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLinkedinUrl).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userLocation  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLocation).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"loginStatus  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().loginStatus).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"password  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().password).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"status  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().status).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLoginEmail  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLoginEmail).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userMiddleName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userMiddleName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userPhoneNumber  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userPhoneNumber).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"roleId  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().roleId).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userRoleStatus  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userRoleStatus).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userTimeZone  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userTimeZone).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userVisaStatus  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userVisaStatus).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userRoleMaps object is present\", function () {\r",
									"    pm.expect(jsonData.userRoleMaps).to.exist;\r",
									"});\r",
									"pm.test(\"userLogin object is present\", function () {\r",
									"    pm.expect(jsonData.userLogin).to.exist;\r",
									"});\r",
									"pm.test(\"Email is a valid email address\", function () {\r",
									"    pm.expect(jsonData.user_email_id).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\r",
									"});\r",
									"\r",
									"pm.test(\"userPhoneNumber is present and is an integer\", function () {\r",
									"    pm.expect(responseBody.userPhoneNumber).to.be.an('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check Status Text\",()=>{\r",
									"pm.response.to.have.status('Created')\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type Header is present\",()=>{\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"});\r",
									"\r",
									"pm.test(\"validate response body datatype\",()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.userComments).to.be.a('string');\r",
									"     pm.expect(response.userEduUg).to.be.a('string');\r",
									"     pm.expect(response.userFirstName).to.be.a('string');\r",
									"     pm.expect(response.userId).to.be.a('string');\r",
									"     pm.expect(response.userLastName).to.be.a('string');\r",
									"     pm.expect(response.userLinkedinUrl).to.be.a('string');\r",
									"     pm.expect(response.userLocation).to.be.a('string');\r",
									"\r",
									"     pm.expect(response.userLogin.loginStatus).to.be.a('string');\r",
									"     pm.expect(response.userLogin.password).to.be.a('string');\r",
									"     pm.expect(response.userLogin.roleIds).to.be.a('string');\r",
									"     pm.expect(response.userLogin.status).to.be.a('string');\r",
									"     pm.expect(response.userLogin.userLoginEmail).to.be.a('string');\r",
									"     pm.expect(response.userMiddleName).to.be.a('string');\r",
									"      pm.expect(response.userPhoneNumber).to.be.a('string');\r",
									"      pm.expect(response.userRoleMaps.roleId).to.be.a('string');\r",
									"      pm.expect(response.userRoleMaps.userRoleStatus).to.be.a('string');\r",
									"       pm.expect(response.userTimeZone).to.be.a('string');\r",
									"       pm.expect(response.userVisaStatus).to.be.a('string');\r",
									"});\r",
									"pm.test(\"response time is less than 200ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eead54f5-bdc9-4af5-b376-2da036e90e1d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Alchemist\",\r\n  \"userEduPg\": \"Dgree\",\r\n  \"userEduUg\": \"Pg\",\r\n  \"userFirstName\": \"TeamAlchemist\",\r\n  \"userId\": \"U009\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"https://www.linkedin.com/in/Steve Job/\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"active\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"R03\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{usermodule_email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"team\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R03\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"EST\",\r\n  \"userVisaStatus\": \"H4-EAD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_student Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f3745dca-b9de-4027-ab61-eead90a92c02",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc5\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7765239b-dc96-4ef8-91b7-6bfe07b922c1",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.environment.set(\"user-id-env\",jsonData.userId);\r",
									"console.log(\"userId : \"+jsonData.userId);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\",()=>{\r",
									"pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"\r",
									"pm.test(\"userComments  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userComments).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userEduPg  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userEduPg).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userEduUg  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userEduUg).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userFirstName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userFirstName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userId  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userId).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLastName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLastName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLinkedinUrl  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLinkedinUrl).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userLocation  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLocation).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"loginStatus  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().loginStatus).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"password  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().password).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"status  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().status).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLoginEmail  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLoginEmail).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userMiddleName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userMiddleName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userPhoneNumber  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userPhoneNumber).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"roleId  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().roleId).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userRoleStatus  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userRoleStatus).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userTimeZone  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userTimeZone).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userVisaStatus  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userVisaStatus).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userRoleMaps object is present\", function () {\r",
									"    pm.expect(jsonData.userRoleMaps).to.exist;\r",
									"});\r",
									"pm.test(\"userLogin object is present\", function () {\r",
									"    pm.expect(jsonData.userLogin).to.exist;\r",
									"});\r",
									"pm.test(\"Email is a valid email address\", function () {\r",
									"    pm.expect(jsonData.user_email_id).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\r",
									"});\r",
									"\r",
									"pm.test(\"userPhoneNumber is present and is an integer\", function () {\r",
									"    pm.expect(responseBody.userPhoneNumber).to.be.an('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check Status Text\",()=>{\r",
									"pm.response.to.have.status('Created')\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type Header is present\",()=>{\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"});\r",
									"\r",
									"pm.test(\"validate response body datatype\",()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.userComments).to.be.a('string');\r",
									"     pm.expect(response.userEduUg).to.be.a('string');\r",
									"     pm.expect(response.userFirstName).to.be.a('string');\r",
									"     pm.expect(response.userId).to.be.a('string');\r",
									"     pm.expect(response.userLastName).to.be.a('string');\r",
									"     pm.expect(response.userLinkedinUrl).to.be.a('string');\r",
									"     pm.expect(response.userLocation).to.be.a('string');\r",
									"\r",
									"     pm.expect(response.userLogin.loginStatus).to.be.a('string');\r",
									"     pm.expect(response.userLogin.password).to.be.a('string');\r",
									"     pm.expect(response.userLogin.roleIds).to.be.a('string');\r",
									"     pm.expect(response.userLogin.status).to.be.a('string');\r",
									"     pm.expect(response.userLogin.userLoginEmail).to.be.a('string');\r",
									"     pm.expect(response.userMiddleName).to.be.a('string');\r",
									"      pm.expect(response.userPhoneNumber).to.be.a('string');\r",
									"      pm.expect(response.userRoleMaps.roleId).to.be.a('string');\r",
									"      pm.expect(response.userRoleMaps.userRoleStatus).to.be.a('string');\r",
									"       pm.expect(response.userTimeZone).to.be.a('string');\r",
									"       pm.expect(response.userVisaStatus).to.be.a('string');\r",
									"});\r",
									"pm.test(\"response time is less than 200ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e84a7ca6-1b9e-4247-b992-30c593bb790c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"{{User_Comments}}\",\r\n  \"userEduPg\": \"{{User_EduPg}}\",\r\n  \"userEduUg\": \"{{User_EduUg}}\",\r\n  \"userFirstName\": \"{{User_FirstName}}\",\r\n  \"userId\": \"{{User_Id}}\",\r\n  \"userLastName\": \"{{User_LastName}}\",\r\n  \"userLinkedinUrl\": \"{{User_LinkedinUrl}}\",\r\n  \"userLocation\": \"{{User_Location}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{Login_Status}}\",\r\n    \"password\": \"{{Password}}\",\r\n    \"roleIds\": [\r\n      \"{{Role_Ids}}\"\r\n    ],\r\n    \"status\": \"{{Status}}\",\r\n    \"userLoginEmail\": \"{{usermodule_email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"{{User_MiddleName}}\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{Role_Id}}\",\r\n      \"userRoleStatus\": \"{{User_RoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{User_TimeZone}}\",\r\n  \"userVisaStatus\": \"{{User_VisaStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8c2689e-8d94-4eb7-abfd-3eceda0d80d9",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\",()=>{\r",
									"pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"\r",
									"pm.test(\"userComments  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userComments).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userEduPg  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userEduPg).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userEduUg  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userEduUg).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userFirstName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userFirstName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userId  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userId).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLastName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLastName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLinkedinUrl  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLinkedinUrl).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userLocation  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLocation).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"loginStatus  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().loginStatus).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"password  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().password).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"status  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().status).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLoginEmail  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLoginEmail).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userMiddleName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userMiddleName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userPhoneNumber  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userPhoneNumber).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"roleId  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().roleId).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userRoleStatus  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userRoleStatus).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userTimeZone  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userTimeZone).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userVisaStatus  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userVisaStatus).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userRoleMaps object is present\", function () {\r",
									"    pm.expect(jsonData.userRoleMaps).to.exist;\r",
									"});\r",
									"pm.test(\"userLogin object is present\", function () {\r",
									"    pm.expect(jsonData.userLogin).to.exist;\r",
									"});\r",
									"pm.test(\"Email is a valid email address\", function () {\r",
									"    pm.expect(jsonData.user_email_id).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\r",
									"});\r",
									"\r",
									"pm.test(\"userPhoneNumber is present and is an integer\", function () {\r",
									"    pm.expect(responseBody.userPhoneNumber).to.be.an('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check Status Text\",()=>{\r",
									"pm.response.to.have.status('Created')\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type Header is present\",()=>{\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"});\r",
									"\r",
									"pm.test(\"validate response body datatype\",()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.userComments).to.be.a('string');\r",
									"     pm.expect(response.userEduUg).to.be.a('string');\r",
									"     pm.expect(response.userFirstName).to.be.a('string');\r",
									"     pm.expect(response.userId).to.be.a('string');\r",
									"     pm.expect(response.userLastName).to.be.a('string');\r",
									"     pm.expect(response.userLinkedinUrl).to.be.a('string');\r",
									"     pm.expect(response.userLocation).to.be.a('string');\r",
									"\r",
									"     pm.expect(response.userLogin.loginStatus).to.be.a('string');\r",
									"     pm.expect(response.userLogin.password).to.be.a('string');\r",
									"     pm.expect(response.userLogin.roleIds).to.be.a('string');\r",
									"     pm.expect(response.userLogin.status).to.be.a('string');\r",
									"     pm.expect(response.userLogin.userLoginEmail).to.be.a('string');\r",
									"     pm.expect(response.userMiddleName).to.be.a('string');\r",
									"      pm.expect(response.userPhoneNumber).to.be.a('string');\r",
									"      pm.expect(response.userRoleMaps.roleId).to.be.a('string');\r",
									"      pm.expect(response.userRoleMaps.userRoleStatus).to.be.a('string');\r",
									"       pm.expect(response.userTimeZone).to.be.a('string');\r",
									"       pm.expect(response.userVisaStatus).to.be.a('string');\r",
									"});\r",
									"pm.test(\"response time is less than 200ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"validate data\"),()=>{\r",
									"pm.response.to.have.userPhoneNumber(\"{{usermodule_randomNumber}}\");\r",
									"pm.response.to.have.userPhoneNumber(\"{{usermodule_email_env}}\")\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7c98f721-2b68-462e-a4e7-af322c107d21",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3d46d975-4c09-4b42-aabd-7d5c25eaad10",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Alchemist\",\r\n  \"userEduPg\": \"Dgree\",\r\n  \"userEduUg\": \"Pg\",\r\n  \"userFirstName\": \"TeamAlchemist\",\r\n  \"userId\": \"U009\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"https://www.linkedin.com/in/Steve Job/\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"active\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"R01\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{usermodule_email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"team\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R01\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"EST\",\r\n  \"userVisaStatus\": \"H4-EAD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create_staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b2ff739-7de8-4fa9-bdb7-3ea961b3e4a0",
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\",()=>{\r",
									"pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"var requestBody = pm.request.body.raw;\r",
									"\r",
									"\r",
									"pm.test(\"userComments  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userComments).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userEduPg  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userEduPg).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userEduUg  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userEduUg).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userFirstName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userFirstName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userId  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userId).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLastName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLastName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLinkedinUrl  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLinkedinUrl).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userLocation  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLocation).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"loginStatus  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().loginStatus).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"password  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().password).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"status  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().status).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userLoginEmail  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userLoginEmail).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userMiddleName  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userMiddleName).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userPhoneNumber  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userPhoneNumber).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"roleId  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().roleId).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userRoleStatus  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userRoleStatus).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"userTimeZone  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userTimeZone).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userVisaStatus  is not empty\", function () {\r",
									"    pm.expect(pm.response.json().userVisaStatus).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"userRoleMaps object is present\", function () {\r",
									"    pm.expect(jsonData.userRoleMaps).to.exist;\r",
									"});\r",
									"pm.test(\"userLogin object is present\", function () {\r",
									"    pm.expect(jsonData.userLogin).to.exist;\r",
									"});\r",
									"pm.test(\"Email is a valid email address\", function () {\r",
									"    pm.expect(jsonData.user_email_id).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\r",
									"});\r",
									"\r",
									"pm.test(\"userPhoneNumber is present and is an integer\", function () {\r",
									"    pm.expect(responseBody.userPhoneNumber).to.be.an('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check Status Text\",()=>{\r",
									"pm.response.to.have.status('Created')\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type Header is present\",()=>{\r",
									"    pm.response.to.have.header(\"Content-Type\")\r",
									"});\r",
									"\r",
									"pm.test(\"validate response body datatype\",()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.userComments).to.be.a('string');\r",
									"     pm.expect(response.userEduUg).to.be.a('string');\r",
									"     pm.expect(response.userFirstName).to.be.a('string');\r",
									"     pm.expect(response.userId).to.be.a('string');\r",
									"     pm.expect(response.userLastName).to.be.a('string');\r",
									"     pm.expect(response.userLinkedinUrl).to.be.a('string');\r",
									"     pm.expect(response.userLocation).to.be.a('string');\r",
									"\r",
									"     pm.expect(response.userLogin.loginStatus).to.be.a('string');\r",
									"     pm.expect(response.userLogin.password).to.be.a('string');\r",
									"     pm.expect(response.userLogin.roleIds).to.be.a('string');\r",
									"     pm.expect(response.userLogin.status).to.be.a('string');\r",
									"     pm.expect(response.userLogin.userLoginEmail).to.be.a('string');\r",
									"     pm.expect(response.userMiddleName).to.be.a('string');\r",
									"      pm.expect(response.userPhoneNumber).to.be.a('string');\r",
									"      pm.expect(response.userRoleMaps.roleId).to.be.a('string');\r",
									"      pm.expect(response.userRoleMaps.userRoleStatus).to.be.a('string');\r",
									"       pm.expect(response.userTimeZone).to.be.a('string');\r",
									"       pm.expect(response.userVisaStatus).to.be.a('string');\r",
									"});\r",
									"pm.test(\"response time is less than 200ms\", ()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e31ce434-66e1-4094-b4c3-fff9c7ed9a09",
								"exec": [
									"const randomNumber = _.random(1000000000,9999999999)\r",
									"pm.environment.set(\"usermodule_randomNumber\",randomNumber);\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"\r",
									"var userLoginEmail= \"abc\"+random+\"@gmail.com\";\r",
									"//var userLastName=\"abc\"+random;\r",
									"//var userLastName=\"abc\"+random;\r",
									"\r",
									"pm.environment.set(\"usermodule_email_env\",userLoginEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dc14e946-5a10-4126-910d-2629072de28f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userComments\": \"Alchemist\",\r\n  \"userEduPg\": \"Dgree\",\r\n  \"userEduUg\": \"Pg\",\r\n  \"userFirstName\": \"TeamAlchemist\",\r\n  \"userId\": \"U009\",\r\n  \"userLastName\": \"Team\",\r\n  \"userLinkedinUrl\": \"https://www.linkedin.com/in/Steve Job/\",\r\n  \"userLocation\": \"USA\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"active\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"R02\"\r\n    ],\r\n    \"status\": \"Active\",\r\n    \"userLoginEmail\": \"{{usermodule_email_env}}\"\r\n  },\r\n  \"userMiddleName\": \"team\",\r\n  \"userPhoneNumber\": {{usermodule_randomNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"R02\",\r\n      \"userRoleStatus\": \"Active\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"EST\",\r\n  \"userVisaStatus\": \"H4-EAD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "AllUsers_roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07d71ee4-a830-44f4-a884-39cad3140b05",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "35360f4d-dc0e-4672-bfb7-9a6e30e4a079",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/roles"
					},
					"response": []
				},
				{
					"name": "{{BaseURL}}/users/:userid",
					"id": "bfbccf0b-e379-4d5a-9a41-7473207726f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/:userid",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								":userid"
							],
							"variable": [
								{
									"id": "fe3ce04c-7cba-4b93-b9ba-1bd1fcf1aba1",
									"key": "userid",
									"value": "U688"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users-by-programid",
					"id": "aa7dde92-841e-45de-8bf4-e0e4d5d82f16",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/programs/:programid",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"programs",
								":programid"
							],
							"variable": [
								{
									"key": "programid",
									"value": "{{UserModule_ProgramId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Active User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a701381-df1d-461f-869b-c06a564a9f1e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "74ef00d9-6cc0-4a38-a391-c8496331e0a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Usermodule_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users/activeUsers"
					},
					"response": []
				},
				{
					"name": "users-programBatchBy-batchId",
					"id": "e32abc0a-0f52-4183-85a8-b1a0585f9fa3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users/programBatch/{batchId}"
					},
					"response": []
				}
			],
			"id": "29c3dcc5-c6e6-4672-8f5a-62b080051a6e"
		},
		{
			"name": "Login-Valid User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "23199d6a-ea53-4459-80ef-4efe21905c47",
						"exec": [
							"var resp = pm.response.json();",
							"var token = resp.token;",
							"pm.environment.set(\"programModuleToken\",token);",
							"//pm.globals.set(\"validUserID\",userID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "3559b2f2-1d27-4ea5-a12b-7a91571fb120",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"password\": \"Numpyninja@1\",\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/login"
			},
			"response": []
		},
		{
			"name": "Get All Programs",
			"id": "a5eafc94-a048-4c51-b565-a22f1ce5f871",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyc0BnbWFpbC5jb20iLCJpYXQiOjE3MDk3NDU4MzQsImV4cCI6MTcwOTc3NDYzNH0.amYSqDiKjBL_Xm37VBpthZGxTJ6Gt4n3BW0gArSwToPf-QmT7X0qHOvRizgTPZXrvYjeOwd4CTBQa7pV2ueVow"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/allPrograms"
			},
			"response": []
		},
		{
			"name": "Get program by programId",
			"id": "7f756fe4-340b-48ca-93f9-595802fd8598",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{programModuleToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{BaseURL}}/programs/{{programModule_programID}}"
			},
			"response": []
		},
		{
			"name": "Get all programs with Users",
			"id": "030c53a0-db96-49cd-a1dc-3d285cc2263d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{programModuleToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{BaseURL}}/allProgramsWithUsers"
			},
			"response": []
		},
		{
			"name": "Create new program",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
						"exec": [
							"var resp = pm.response.json();",
							"var programID = resp.programId;",
							"pm.environment.set(\"programModule_programID\",token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "85c879f0-cf69-4d4f-a57b-f8ad9fe7b896",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{programModuleToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"programDescription\": \"String\",\n  \"programName\": \"String\",\n  \"programStatus\": \"String\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/saveprogram"
			},
			"response": []
		},
		{
			"name": "ProgramNameWithoutAlphabets",
			"id": "856330fe-4a56-4c8a-89be-3b2065cd434f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{programModuleToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"programDescription\": \"MarchHackathon\",\n  \"programName\": \"999999999999\",\n  \"programStatus\": \"Active\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/saveprogram"
			},
			"response": []
		},
		{
			"name": "ProgramName with invalid Combination",
			"id": "f0d773ec-65ad-4f90-99c3-f2c00ca4a2d1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{programModuleToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"programDescription\": \"MarchHackathon\",\n  \"programName\": \"A%%^$#%%%%&&&**************************\",\n  \"programStatus\": \"Active\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/saveprogram"
			},
			"response": []
		},
		{
			"name": "ProgramNameWithSpecialCharacters",
			"id": "c7030f26-5e77-49cc-a233-065642532aa1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{programModuleToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"programDescription\": \"MarchHackathon\",\n  \"programName\": \"^%&$*((*&^%%%$##\",\n  \"programStatus\": \"Active\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/saveprogram"
			},
			"response": []
		},
		{
			"name": "InvalidProgramStatus",
			"id": "9808b8da-b1c1-4337-879a-0140eefb92e4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{programModuleToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"programDescription\": \"MarchHackathon\",\n  \"programName\": \"March24_APIAlchemist_SDET132\",\n  \"programStatus\": \"NotActive\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/saveprogram"
			},
			"response": []
		},
		{
			"name": "ExistingProgramName",
			"id": "3db14e45-be79-4f70-977f-cc4b71ffc1d5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{programModuleToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"programDescription\": \"MarchHackathon\",\n  \"programName\": \"March24-API-DAAA-010\",\n  \"programStatus\": \"Inactive\"\n}\n\n\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/saveprogram"
			},
			"response": []
		},
		{
			"name": "SpecialCharactersInDescription",
			"id": "183f1f97-3ff5-4875-8650-e3aea6628a11",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{programModuleToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"programDescription\": \"&&&&&&********&&&&&&&&&\",\n  \"programName\": \"March24-API-DAAAS-010\",\n  \"programStatus\": \"Inactive\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/saveprogram"
			},
			"response": []
		}
	]
}