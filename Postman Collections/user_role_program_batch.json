{
	"info": {
		"_postman_id": "dd5dddcc-eef0-4deb-9a6a-28df5a9fef55",
		"name": "User Role Program Batch Map Controller- Kamalika",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-requisites",
			"item": [
				{
					"name": "User login (prereq)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "763867e5-98fd-4aa5-a343-da6d787c20ba",
								"exec": [
									"//populate the token in global variables",
									"",
									"pm.globals.set('Bearertoken2', pm.response.json().token)",
									"",
									"//gives a message that token is generated",
									"",
									"pm.test('Bearertoken2 populated - as prerequisite', () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.haveOwnProperty('token');",
									"    pm.expect(jsonData.type).to.include('Bearer');",
									"    pm.expect(jsonData.token.length).to.equal(199);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "70ef2ce5-a95c-48c4-b189-0d00c6f57f9a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"{{loginpass}}\",\n  \"userLoginEmailId\": \"{{loginemail}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Create new user(prereq)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2846e9f-d817-4a8d-a2c9-9b6b447d196b",
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									"    try{",
									"   pm.expect(responseBody).to.have.own.property(\"userId\");",
									"   pm.environment.set(\"userIdkb\", responseBody.userId);",
									"    pm.test(\"PASS - User ID was created successfully - \" + pm.environment.get(\"userIdkb\"), () => true); ",
									"}catch(e){",
									"    pm.test(\"FAIL - User ID was not created as it already exists as the phone number will be duplicated or some other error\", () => {throw new Error(e.message)}); ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "29b4bf72-42e3-4cdb-b100-a286275f05a5",
								"exec": [
									"// Generate a random 10-digit number for user phone number and set environment variable",
									"var randomTenDigitNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"",
									"postman.setEnvironmentVariable('userphonekb', randomTenDigitNumber);",
									"",
									"",
									"//Generate random email address",
									"var useremail= \"team22-notforusermodule\" + pm.variables.replaceIn(\"{{$randomInt}}\") + ",
									"\"@gmail.com\";",
									"pm.globals.set(\"useremailkb\", useremail);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cd9906ae-5c20-48a1-81f5-3c8973d6295a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertoken2}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userComments\": \"this is created for Team 22 User role program batch demo/test\",\n  \"userEduPg\": \"MS in Machine learning\",\n  \"userEduUg\": \"BE Electronics Engineering\",\n  \"userFirstName\": \"APIAlchemistone\",\n  \"userId\": \"U111\",\n  \"userLastName\": \"Blake\",\n  \"userLinkedinUrl\": \"https://www.linkedin.com/in/gideon-blake123/\",\n  \"userLocation\": \"Boston\",\n  \"userLogin\": {\n    \"loginStatus\": \"Active\",\n    \"password\": \"Positive+1\",\n    \"roleIds\": [\n      \"R01\"\n    ],\n    \"status\": \"Active\",\n    \"userLoginEmail\": \"{{useremailkb}}\"\n  },\n  \"userMiddleName\": \"Incham\",\n  \"userPhoneNumber\": {{userphonekb}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"R03\",\n      \"userRoleStatus\": \"Active\"\n    }\n  ],\n  \"userTimeZone\": \"EST\",\n  \"userVisaStatus\": \"US-Citizen\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleStatus"
					},
					"response": [
						{
							"id": "15507525-47f3-4482-ada1-6113d739555d",
							"name": "Create new user",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userComments\": \"this is created for Team 22 User role program batch demo/test\",\n  \"userEduPg\": \"MS in Machine learning\",\n  \"userEduUg\": \"BE Electronics Engineering\",\n  \"userFirstName\": \"APIAlchemistone\",\n  \"userId\": \"U111\",\n  \"userLastName\": \"Blake\",\n  \"userLinkedinUrl\": \"https://www.linkedin.com/in/gideon-blake123/\",\n  \"userLocation\": \"Boston\",\n  \"userLogin\": {\n    \"loginStatus\": \"Active\",\n    \"password\": \"Positive+1\",\n    \"roleIds\": [\n      \"R01\"\n    ],\n    \"status\": \"Active\",\n    \"userLoginEmail\": \"team22-notforusermodule@gmail.com\"\n  },\n  \"userMiddleName\": \"Incham\",\n  \"userPhoneNumber\": 6786666666,\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"R03\",\n      \"userRoleStatus\": \"Active\"\n    }\n  ],\n  \"userTimeZone\": \"EST\",\n  \"userVisaStatus\": \"US-Citizen\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/users/roleStatus"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1710045568&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=vVzMJDijKZeDeEazQk0XuUhvq8kJXOmd0Voji101iQA%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1710045568&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=vVzMJDijKZeDeEazQk0XuUhvq8kJXOmd0Voji101iQA%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 10 Mar 2024 04:39:28 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"userId\": \"U1458\",\n    \"userFirstName\": \"APIAlchemistone\",\n    \"userLastName\": \"Blake\",\n    \"userMiddleName\": \"Incham\",\n    \"userPhoneNumber\": 6786666666,\n    \"userLocation\": \"Boston\",\n    \"userTimeZone\": \"EST\",\n    \"userLinkedinUrl\": \"https://www.linkedin.com/in/gideon-blake123/\",\n    \"userEduUg\": \"BE Electronics Engineering\",\n    \"userEduPg\": \"MS in Machine learning\",\n    \"userComments\": \"this is created for Team 22 User role program batch demo/test\",\n    \"userVisaStatus\": \"US-Citizen\",\n    \"userLoginEmail\": \"team22-notforusermodule@gmail.com\"\n}"
						}
					]
				},
				{
					"name": "Create new program(prereq)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "916e09ca-26ea-4f0a-9eb3-d25e3c9b53eb",
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									"    try{",
									"   pm.expect(responseBody).to.have.own.property(\"programId\");",
									"   pm.environment.set(\"programIdkb\", responseBody.programId);",
									"    pm.test(\"PASS - Program was created successfully \"+ pm.environment.get(\"programIdkb\"), () => true); ",
									"}catch(e){",
									"    pm.test(\"FAIL - Program was not created as it already exists\", () => {throw new Error(e.message)}); ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "561785cc-9398-4885-b67d-98fac5920ae8",
								"exec": [
									"var progName= \"March24-APIAlchemist-DA55-001\" + pm.variables.replaceIn(\"{{$randomInt}}\");",
									"pm.globals.set(\"prog_Namekb\", progName);",
									"",
									"var ProgDesc= \"This is for temporary use \" + pm.variables.replaceIn(\"{{$randomInt}}\");",
									"pm.globals.set(\"prog_Desckb\", ProgDesc);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a9312bb1-82ac-4492-94f0-7cf64457a675",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertoken2}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{prog_Desckb}}\",\n  \"programName\": \"{{prog_Namekb}}\",\n  \"programStatus\": \"Active\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create new batch(prereq)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "688a3198-3619-4d32-873b-ac61f8047504",
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									"    try{",
									"   pm.expect(responseBody).to.have.own.property(\"batchId\");",
									"   pm.environment.set(\"batchIdkb\", responseBody.batchId);",
									"    pm.test(\"PASS - Batch was created successfully \" + pm.environment.get(\"batchIdkb\"), () => true); ",
									"}catch(e){",
									"    pm.test(\"FAIL - Batch was not created as it already exists\", () => {throw new Error(e.message)}); ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fdedb236-6082-4d63-9501-169b6c83a068",
								"exec": [
									"var batchName= \"March24-APIAlchemist-DA55SDET-DA-\" + pm.variables.replaceIn(\"{{$randomInt}}\");",
									"pm.globals.set(\"batch_Namekb\", batchName);",
									"",
									"var batchDesc= \"March24-APIAlchemist-DA55-001-DASDET-\" + pm.variables.replaceIn(\"{{$randomInt}}\");",
									"pm.globals.set(\"batchDesckb\", batchDesc);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ca000745-2b97-4182-9ec4-51c4d57c5646",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertoken2}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"batchDescription\": \"{{batchDesckb}}\",\n    \"batchName\": \"{{batch_Namekb}}\",\n    \"batchNoOfClasses\": 10,\n    \"batchStatus\": \"Active\",\n    \"programId\": \"{{programIdkb}}\",\n    \"programName\": \"{{prog_Namekb}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": [
						{
							"id": "73f75784-bb49-4c4e-a13d-d2a0e92d1add",
							"name": "Create new batch",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"batchDescription\": \"March24-APIAlchemist-March24-APIAlchemist-DA55-001-DASDET-001\",\n    \"batchName\": \"March24-APIAlchemist-DA55SDET-DA-001\",\n    \"batchNoOfClasses\": 10,\n    \"batchStatus\": \"Active\",\n    \"programId\": \"{{programIdkb}}\",\n    \"programName\": \"March24-APIAlchemist-DA55-001\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/batches"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1710048360&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7fzov4%2FCCY5ScgWSkB4Q%2BoTGzre4nAz0ko%2FEHIycNPY%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1710048360&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7fzov4%2FCCY5ScgWSkB4Q%2BoTGzre4nAz0ko%2FEHIycNPY%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 10 Mar 2024 05:26:00 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"batchId\": 8915,\n    \"batchName\": \"March24-APIAlchemist-DA55SDET-DA-001\",\n    \"batchDescription\": \"March24-APIAlchemist-March24-APIAlchemist-DA55-001-DASDET-001\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 10,\n    \"programId\": 17049,\n    \"programName\": \"March24-APIAlchemist-DA55-001\"\n}"
						}
					]
				},
				{
					"name": "Assign newly created user to newly created batch and program(prereq)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b9441a7-f4f1-417a-bfaf-4da2a9c71e95",
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									"    try{",
									"   pm.expect(responseBody.success).to.be.true;",
									"    pm.test(\"PASS - User was assigned to Program/Batch - user \" + pm.environment.get(\"userIdkb\") + \" and program id - \" + pm.environment.get(\"programIdkb\") + \" and batch id - \" + pm.environment.get(\"batchIdkb\"), () => true); ",
									"}catch(e){",
									"    pm.test(\"FAIL - User was not assigned to program/batch as that already exists or other error\", () => {throw new Error(e.message)}); ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9b42020c-8160-44d2-8b42-35dfa90f3f71",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertoken2}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\": {{programIdkb}},\n  \"roleId\": \"{{roleIdkb}}\",\n  \"userId\": \"{{userIdkb}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\": {{batchIdkb}},\n      \"userRoleProgramBatchStatus\": \"Active\"\n    }\n  ]\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/roleProgramBatchStatus/{{userIdkb}}"
					},
					"response": [
						{
							"id": "6b6b7268-6e44-4dff-be2f-6362160a0d3a",
							"name": "Restore deleted Data (Not a part of scenarios)",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"programId\": {{programIdkb}},\n  \"roleId\": \"{{roleIdkb}}\",\n  \"userId\": \"{{userIdkb}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\": {{batchIdkb}},\n      \"userRoleProgramBatchStatus\": \"Active\"\n    }\n  ]\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/users/roleProgramBatchStatus/{{userIdkb}}"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1710048898&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=HES%2B5cZdIcYD4UPMUClonAqrqo4%2FOLlX0OHcXCETzHA%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1710048898&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=HES%2B5cZdIcYD4UPMUClonAqrqo4%2FOLlX0OHcXCETzHA%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 10 Mar 2024 05:34:57 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"message\": \"User U1458 has been successfully assigned to Program/Batch(es)\",\n    \"success\": true\n}"
						}
					]
				}
			],
			"id": "64f25f8e-5b87-4971-ba68-1599a4cc6055"
		},
		{
			"name": "Module based test",
			"item": [
				{
					"name": "Get Assigned Program/Batch(es) of All Users (200) Positive scenario",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31b910c8-2e94-49e6-8251-d8ccfd09bd52",
								"exec": [
									"// Validate that the user id/program/batch created and associated is found",
									"",
									"var responseBody = JSON.parse(responseBody);",
									"",
									"// Define the expected userid value to check",
									"var expectedUserId = pm.environment.get(\"userIdkb\"); ",
									"",
									"///Flag to check if the user id found",
									"var userIdFound = false;",
									"",
									"// Iterate through the array of objects in the JSON response",
									"for (var i = 0; i < responseBody.length; i++) {",
									"    // Check if the current object has the desired userid value",
									"    if (responseBody[i].hasOwnProperty(\"userId\") && responseBody[i].userId === expectedUserId) {",
									"        userIdFound = true;",
									"        break; // Exit the loop once the userid is found",
									"    }",
									"}",
									"",
									"// Perform tests based on whether the userid is found or not",
									"if (userIdFound) {",
									"    // If the userid is found, throw a success test message",
									"    pm.test(\"Newly created userid is found in this list - \" + expectedUserId, function () {",
									"        pm.expect(userIdFound).to.be.true;",
									"    });",
									"} else {",
									"    // If the userid is not found, throw a failure test message",
									"    pm.test(\"Newly created userid is not found in this list\", function () {",
									"        pm.expect(userIdFound).to.be.true; // This will cause the test to fail",
									"    });",
									"}",
									"",
									"",
									"",
									"// status code is 200 validation",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Try catch code to work on",
									"",
									"// try{",
									"//     pm.expect(x).to.be.below(0.5,\"was not below 0.5\");",
									"//     pm.test(\"Pass - it was less than 0.5\", () => true); // this will only execute if no exception raised",
									"// }catch(e){",
									"//     pm.test(\"FAIL - it was more than 0.5\", () => {throw new Error(e.message)}); ",
									"// }",
									"",
									"",
									"//response time is less than 200 ms",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"//content header present",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"//content header is JSON",
									"",
									"pm.test('Content-Type Header is application-json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"})",
									"",
									"",
									"// check the data for each and every object",
									"const response = pm.response.json();",
									"",
									"response.forEach(object => {",
									"    pm.test( \"Data types are correct for user ID \" + object.userId,()=>{",
									"    pm.expect(object.userId).to.be.a(\"string\");",
									"    pm.expect(object.roleId).to.be.a(\"string\");",
									"    pm.expect(object.programId).to.be.a(\"number\");",
									"    pm.expect(object.batchId).to.be.an(\"number\");",
									"    pm.expect(object.userRoleProgramBatchStatus).to.be.a(\"string\");",
									"    });",
									"});",
									"",
									"",
									"// Data content validation",
									"const responseData = pm.response.json();",
									"",
									"pm.test('Each user batch has status active', function () {",
									"    // Iterate through each object in the array",
									"    responseData.forEach(function (user) {",
									"        // status is active check",
									"        pm.expect(user.userRoleProgramBatchStatus).to.be.oneOf(['Active', 'active']); ",
									"    });",
									"});",
									"",
									"//Validating JSON Schema test",
									"",
									"var schema = {",
									"    properties: {",
									"    userId: {",
									"      type: \"string\",",
									"    },",
									"    roleId: {",
									"      type: \"string\",",
									"    },",
									"    programId: {",
									"      type: \"number\",",
									"    },",
									"    batchId: {",
									"      type: \"number\",",
									"    },",
									"    userRoleProgramBatchStatus: {",
									"      type: \"string\",",
									"    },",
									"",
									"  },",
									"  required: [",
									"    \"userId\",",
									"    \"roleId\",",
									"    \"programId\",",
									"    \"batchId\",",
									"    \"userRoleProgramBatchStatus\"",
									"  ],",
									"};",
									"",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d38c56b2-3846-4ef6-9014-b16e095768f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertoken2}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/userRoleProgramBatchMap",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"userRoleProgramBatchMap"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"description": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate assigned program/batch by wrong User ID (404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa2507ad-8bfe-4696-b80d-629059cf0f60",
								"exec": [
									"// Status validation ",
									"",
									"",
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"})",
									"",
									"// response time validation",
									"",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"})",
									"",
									"// validation of content ",
									"",
									"pm.test('Content-Type is present', function () {",
									"    pm.response.to.have.header('Content-Type');",
									"})",
									"",
									"",
									"//validation of content type",
									"",
									"pm.test('Content-Type Header is application-json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"})",
									"",
									"//Data type validation",
									"",
									"pm.test('All Data types are correct', () => {",
									"    var jsondata = pm.response.json();",
									"    pm.expect(jsondata.message).to.be.a('string');",
									"    pm.expect(jsondata.success).to.be.a('boolean');",
									"})",
									"",
									"//Data content validation",
									"",
									"pm.test('Request body contains 404 not found ', () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.haveOwnProperty('message');",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include('UserRoleProgramBatchMap not found with Id');",
									"})",
									"",
									"",
									"//schema validation",
									"",
									"var schema = {",
									"    properties: {",
									"        timestamp: {",
									"            message: { type: 'string' },",
									"            success: { type: 'boolean' }",
									"        },",
									"        required: [",
									"            'message',",
									"            'success'",
									"        ]",
									"    }",
									"};",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"  pm.response.to.have.jsonSchema({",
									"    type: \"object\",",
									"    properties: {",
									"      message: {",
									"        type: \"string\"",
									"      },",
									"      success: {",
									"        type: \"boolean\"",
									"      }",
									"    },",
									"    required: [\"message\", \"success\"]",
									"  });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ddcee388-80db-4c7d-9983-89ac39335e1f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertoken2}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/userRoleProgramBatchMap/U999",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"U999"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"description": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Assigned Program/Batch(es) of All Users (404) wrong endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa2507ad-8bfe-4696-b80d-629059cf0f60",
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"//response time is less than 200 ms",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"//content header present",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"//content header is JSON",
									"",
									"pm.test('Content-Type Header is application-json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"})",
									"",
									"",
									"// Data type validation",
									"",
									"let dateFormat = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;",
									"",
									"pm.test(\"All Data types are correct\",()=>{",
									"    var jsondata = pm.response.json();",
									"    pm.expect(jsondata.timestamp).to.match(dateFormat);",
									"    pm.expect(jsondata.status).to.be.a(\"number\");",
									"    pm.expect(jsondata.error).to.be.a(\"string\");",
									"    pm.expect(jsondata.path).to.be.a(\"string\");",
									"});",
									"",
									"//Validate Response body content",
									"",
									"pm.test(\"Request body contains 404 not found \",() => {",
									"   var jsonData = pm.response.json(); ",
									"   pm.expect(jsonData).to.haveOwnProperty(\"status\");",
									"   pm.expect(jsonData.status).to.eql(404);",
									"   pm.expect(jsonData.error).to.include(\"Not Found\");",
									" ",
									" ",
									"});",
									"",
									"//Validating JSON Schema test",
									"",
									"var schema = {",
									"    properties: {",
									"    timestamp: {",
									"      type: \"string\",",
									"    },",
									"    status: {",
									"      type: \"number\",",
									"    },",
									"    error: {",
									"      type: \"string\",",
									"    },",
									"    path: {",
									"      type: \"string\",",
									"    },",
									"",
									"  },",
									"  required: [",
									"    \"timestamp\",",
									"    \"status\",",
									"    \"error\",",
									"    \"path\"",
									"  ],",
									"};",
									"",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "12744ea8-41c7-44b4-bcf8-816e732ec3b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertoken2}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/userRoleProgramBatchMaps",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"userRoleProgramBatchMaps"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"description": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate assigned program/batch by correct User ID (200) Positive scenario",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa2507ad-8bfe-4696-b80d-629059cf0f60",
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//response time is less than 500 ms",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"//content header present",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"//content header is JSON",
									"",
									"pm.test('Content-Type Header is application-json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"})",
									"",
									"",
									"// Data type validation",
									"",
									"// check the data for each and every object",
									"const response = pm.response.json();",
									"",
									"response.forEach(object => {",
									"    pm.test( \"Data types are correct for user ID \" + object.userId,()=>{",
									"    pm.expect(object.userId).to.be.a(\"string\");",
									"    pm.expect(object.roleId).to.be.a(\"string\");",
									"    pm.expect(object.programId).to.be.a(\"number\");",
									"    pm.expect(object.batchId).to.be.an(\"number\");",
									"    pm.expect(object.userRoleProgramBatchStatus).to.be.a(\"string\");",
									"    });",
									"});",
									"",
									"//Validate Response body content",
									"",
									"const responseData = pm.response.json();",
									"",
									"pm.test('Request body contains user id referred to', function () {",
									"    // Iterate through each object in the array",
									"    responseData.forEach(function (user) {",
									"        // status is active check",
									"        pm.expect(user.userId).to.eql(pm.environment.get(\"userIdkb\"));",
									"    });",
									"});",
									"",
									"",
									"//Validating JSON Schema test",
									"",
									"var schema = {",
									"    properties: {",
									"    userId: {",
									"      type: \"string\",",
									"    },",
									"    roleId: {",
									"      type: \"string\",",
									"    },",
									"    programId: {",
									"      type: \"number\",",
									"    },",
									"    batchId: {",
									"      type: \"number\",",
									"    },",
									"    userRoleProgramBatchStatus: {",
									"      type: \"string\",",
									"    },",
									"",
									"  },",
									"  required: [",
									"    \"userId\",",
									"    \"roleId\",",
									"    \"programId\",",
									"    \"batchId\",",
									"    \"userRoleProgramBatchStatus\"",
									"  ],",
									"};",
									"",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2ba910f7-19a8-431a-bade-7476db4669c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertoken2}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/userRoleProgramBatchMap/{{userIdkb}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"{{userIdkb}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"description": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate assigned program/batch by correct User ID (404) wrong endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa2507ad-8bfe-4696-b80d-629059cf0f60",
								"exec": [
									"// Status validation ",
									"",
									"",
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"})",
									"",
									"// response time validation",
									"",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"})",
									"",
									"// validation of content ",
									"",
									"pm.test('Content-Type is present', function () {",
									"    pm.response.to.have.header('Content-Type');",
									"})",
									"",
									"",
									"//validation of content type",
									"",
									"pm.test('Content-Type Header is application-json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"})",
									"",
									"// Data type validation",
									"",
									"let dateFormat = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;",
									"",
									"pm.test(\"All Data types are correct\",()=>{",
									"    var jsondata = pm.response.json();",
									"    pm.expect(jsondata.timestamp).to.match(dateFormat);",
									"    pm.expect(jsondata.status).to.be.a(\"number\");",
									"    pm.expect(jsondata.error).to.be.a(\"string\");",
									"    pm.expect(jsondata.path).to.be.a(\"string\");",
									"});",
									"",
									"//Validate Response body content",
									"",
									"pm.test(\"Request body contains 404 not found \",() => {",
									"   var jsonData = pm.response.json(); ",
									"   pm.expect(jsonData).to.haveOwnProperty(\"status\");",
									"   pm.expect(jsonData.status).to.eql(404);",
									"   pm.expect(jsonData.error).to.include(\"Not Found\");",
									" ",
									" ",
									"});",
									"",
									"//Validating JSON Schema test",
									"",
									"var schema = {",
									"    properties: {",
									"    timestamp: {",
									"      type: \"string\",",
									"    },",
									"    status: {",
									"      type: \"number\",",
									"    },",
									"    error: {",
									"      type: \"string\",",
									"    },",
									"    path: {",
									"      type: \"string\",",
									"    },",
									"",
									"  },",
									"  required: [",
									"    \"timestamp\",",
									"    \"status\",",
									"    \"error\",",
									"    \"path\"",
									"  ],",
									"};",
									"",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "978a62ae-f736-4377-a29e-67979fa22a20",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertoken2}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/userRoleProgramBatchMaps/{{userIdkb}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"userRoleProgramBatchMaps",
								"{{userIdkb}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"description": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete assigned program/batch by wrong User ID (404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa2507ad-8bfe-4696-b80d-629059cf0f60",
								"exec": [
									"// Status code validation",
									"",
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"})",
									"",
									"// Response time validation",
									"",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"})",
									"",
									"//Content availability validation",
									"",
									"pm.test('Content-Type is present', function () {",
									"    pm.response.to.have.header('Content-Type');",
									"})",
									"",
									"//content type validation",
									"",
									"pm.test('Content-Type Header is application-json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"})",
									"",
									"//Response body Data Type validation",
									"",
									"pm.test('All Data types are correct', () => {",
									"    var jsondata = pm.response.json();",
									"    pm.expect(jsondata.message).to.be.a('string');",
									"    pm.expect(jsondata.success).to.be.a('boolean');",
									"})",
									"",
									"",
									"// Response body content validation",
									"",
									"pm.test('Request body contains user id not found error ', () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message.toLowerCase()).to.include('userroleprogrambatchmap not found with id');",
									"})",
									"",
									"",
									"// Response body schema validation",
									"",
									"var schema = {",
									"    properties: {",
									"        timestamp: {",
									"            message: { type: 'string' },",
									"            success: { type: 'boolean' }",
									"        },",
									"        required: [",
									"            'message',",
									"            'success'",
									"        ]",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema({",
									"        type: 'object',",
									"        properties: {",
									"            message: { type: 'string' },",
									"            success: { type: 'boolean' }",
									"        },",
									"        required: [",
									"            'message',",
									"            'success'",
									"        ]",
									"    });",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a491a162-8965-4913-a52b-ae083b493c63",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertoken2}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/userRoleProgramBatchMap/deleteAll/U999",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"deleteAll",
								"U999"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"description": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete assigned program/batch by correct User ID (404) wrong endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa2507ad-8bfe-4696-b80d-629059cf0f60",
								"exec": [
									"// Status validation ",
									"",
									"",
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"})",
									"",
									"// response time validation",
									"",
									"pm.test('Response time is less than 500ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"})",
									"",
									"// validation of content ",
									"",
									"pm.test('Content-Type is present', function () {",
									"    pm.response.to.have.header('Content-Type');",
									"})",
									"",
									"",
									"//validation of content type",
									"",
									"pm.test('Content-Type Header is application-json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"})",
									"",
									"// Data type validation",
									"",
									"let dateFormat = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;",
									"",
									"pm.test(\"All Data types are correct\",()=>{",
									"    var jsondata = pm.response.json();",
									"    pm.expect(jsondata.timestamp).to.match(dateFormat);",
									"    pm.expect(jsondata.status).to.be.a(\"number\");",
									"    pm.expect(jsondata.error).to.be.a(\"string\");",
									"    pm.expect(jsondata.path).to.be.a(\"string\");",
									"});",
									"",
									"//Validate Response body content",
									"",
									"pm.test(\"Request body contains 404 not found \",() => {",
									"   var jsonData = pm.response.json(); ",
									"   pm.expect(jsonData).to.haveOwnProperty(\"status\");",
									"   pm.expect(jsonData.status).to.eql(404);",
									"   pm.expect(jsonData.error).to.include(\"Not Found\");",
									" ",
									" ",
									"});",
									"",
									"//Validating JSON Schema test",
									"",
									"var schema = {",
									"    properties: {",
									"    timestamp: {",
									"      type: \"string\",",
									"    },",
									"    status: {",
									"      type: \"number\",",
									"    },",
									"    error: {",
									"      type: \"string\",",
									"    },",
									"    path: {",
									"      type: \"string\",",
									"    },",
									"",
									"  },",
									"  required: [",
									"    \"timestamp\",",
									"    \"status\",",
									"    \"error\",",
									"    \"path\"",
									"  ],",
									"};",
									"",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5fcec9ff-1b1a-4316-9a05-645a83c44573",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertoken2}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/userRoleProgramBatchMap/delete/{{userIdkb}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"delete",
								"{{userIdkb}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"description": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete assigned program/batch by correct User ID (200) Positive scenario",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa2507ad-8bfe-4696-b80d-629059cf0f60",
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//response time is less than 500 ms",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"//content header present",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"//content header is JSON",
									"",
									"pm.test('Content-Type Header is application-json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"})",
									"",
									"",
									"// Data type validation",
									"",
									"// check the data for each and every object",
									"const jsondata = pm.response.json();",
									"",
									"pm.test(\"All Data types are correct\",()=>{",
									"    var jsondata = pm.response.json();",
									"    pm.expect(jsondata.message).to.be.a(\"string\");",
									"});",
									"",
									"",
									"//Validate Response body content",
									"",
									"",
									"",
									"pm.test('Request body contains user id referred to', function () {",
									"    ",
									"         pm.expect(jsondata.message.toLowerCase()).to.include(\"deleted all programs/batches assigned to user id\");",
									"    });",
									"",
									"",
									"",
									"// Response body schema validation",
									"",
									"var schema = {",
									"    properties: {",
									"        timestamp: {",
									"            message: { type: 'string' },",
									"            success: { type: 'boolean' }",
									"        },",
									"        required: [",
									"            'message',",
									"            'success'",
									"        ]",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema({",
									"        type: 'object',",
									"        properties: {",
									"            message: { type: 'string' },",
									"            success: { type: 'boolean' }",
									"        },",
									"        required: [",
									"            'message',",
									"            'success'",
									"        ]",
									"    });",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b918b412-4b2a-45e0-8952-05754ea2c2f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertoken2}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/userRoleProgramBatchMap/deleteAll/{{userIdkb}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"deleteAll",
								"{{userIdkb}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"description": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "a55067f1-df23-4272-865c-240d2e3d0983"
		},
		{
			"name": "Post-test restorations",
			"item": [
				{
					"name": "Delete program(postreq)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86236caa-35a8-4462-8e09-4f289f6d355e",
								"exec": [
									"var responseText = pm.response.text();",
									"",
									"",
									"    try{",
									"   pm.expect(responseText).to.include(\"is deleted Successfully!\");",
									"    pm.test(\"PASS- message confirms action on Program ID \" + pm.environment.get(\"programIdkb\") + \" was as per - \" + responseText, () => true); ",
									"}catch(e){",
									"    pm.test(\"FAIL - Program was not deleted or other error\", () => {throw new Error(e.message)}); ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "31f58c7e-a944-442b-b27e-83436e6c5c9f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertoken2}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programIdkb}}"
					},
					"response": []
				},
				{
					"name": "Delete batch(postreq)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86236caa-35a8-4462-8e09-4f289f6d355e",
								"exec": [
									"",
									"var responseText = pm.response.text();",
									"",
									"",
									"    try{",
									"   pm.expect(responseText).to.include(\"deleted Successfully!\");",
									"    pm.test(\"PASS - Batch was deleted as confirmed in body - \" + responseText, () => true); ",
									"}catch(e){",
									"    pm.test(\"FAIL - Batch was not deleted or other error\", () => {throw new Error(e.message)}); ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "726f50a4-4ead-409e-b18b-7c3983f03780",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertoken2}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchIdkb}}"
					},
					"response": []
				},
				{
					"name": "Delete User(postreq)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86236caa-35a8-4462-8e09-4f289f6d355e",
								"exec": [
									"// var responseBody = pm.response.json();",
									"",
									"",
									"//     try{",
									"//    pm.expect(responseBody.success).to.be.true;",
									"//     pm.test(\"PASS - User was deactivated\", () => true); ",
									"// }catch(e){",
									"//     pm.test(\"FAIL - User was not deactivated or other error\", () => {throw new Error(e.message)}); ",
									"// }",
									"",
									"var responseText = pm.response.text();",
									"var useridkb = pm.environment.get(\"userIdkb\")",
									"",
									"    try{",
									"   pm.expect(responseText).to.include(\"Deleted User ID:  \" + useridkb);",
									"    pm.test(\"PASS - User was deactivated/deleted as confirmed in body - \" + responseText, () => true); ",
									"}catch(e){",
									"    pm.test(\"FAIL - Batch was not deleted or other error\", () => {throw new Error(e.message)}); ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d610b313-99fa-437b-a176-02a3a8f4707a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertoken2}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/users/{{userIdkb}}"
					},
					"response": []
				},
				{
					"name": "User logout(postreq)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa7a1fd8-eba7-42f4-a11e-2e45a1cb864a",
								"exec": [
									"//verify if test achieved results",
									"",
									"",
									"pm.test(\"Logout was successful\", function () {",
									"   pm.expect(pm.response.text()).to.include(\"Logout successful\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c31cb03a-803f-407c-8284-c3476e9b4d08",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertoken2}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/logoutlms",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"logoutlms"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"description": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "59aa0555-b0cf-4a97-8be1-41da704817e8"
		}
	]
}