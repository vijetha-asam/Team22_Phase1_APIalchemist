{
	"info": {
		"_postman_id": "8d845570-3a9d-4393-a545-8cdb11adaffd",
		"name": "User Login Controller- Kamalika",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "POST REQUEST -  User Sign In (200) Positive scenario",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "763867e5-98fd-4aa5-a343-da6d787c20ba",
						"exec": [
							"pm.globals.set('Bearertoken2', pm.response.json().token)",
							"",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Response Time is less than 500ms', () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"})",
							"",
							"pm.test('Content-Type Header is present', () => {",
							"    pm.response.to.have.header('Content-Type');",
							"})",
							"",
							"pm.test('Content-Type Header is application-json', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
							"})",
							"",
							"let emailFormat = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/;",
							"",
							"pm.test(\"All Data types are correct\",()=>{",
							"    var jsondata = pm.response.json();",
							"    pm.expect(jsondata.token).to.be.a(\"string\");",
							"    pm.expect(jsondata.type).to.be.a(\"string\");",
							"    pm.expect(jsondata.userId).to.be.a(\"string\");",
							"    pm.expect(jsondata.email).to.match(emailFormat);",
							"    pm.expect(jsondata.roles).to.be.an(\"array\");",
							"    pm.expect(jsondata.status).to.be.a(\"string\");",
							"});",
							"",
							"pm.test('Bearer Token of 199 characters generated for correct email address and is Active/Logged', () => {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.haveOwnProperty('token');",
							"    pm.expect(jsonData.email).to.eql(pm.globals.get('loginemail'));",
							"    pm.expect(jsonData.status).to.be.oneOf([",
							"        'Active',",
							"        'logged'",
							"    ]);",
							"    pm.expect(jsonData.type).to.include('Bearer');",
							"    pm.expect(jsonData.token.length).to.equal(199);",
							"})",
							"",
							"var schema = {",
							"    properties: {",
							"        token: { type: 'string' },",
							"        type: { type: 'string' },",
							"        userId: { type: 'string' },",
							"        email: { type: 'string' },",
							"        roles: { type: 'array' },",
							"        status: { type: 'string' }",
							"    },",
							"    required: [",
							"        'token',",
							"        'type',",
							"        'userId',",
							"        'email',",
							"        'roles',",
							"        'status'",
							"    ]",
							"};",
							"",
							"pm.test('Schema is valid', () => {",
							"    pm.response.to.have.jsonSchema(schema);",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "32cfffa9-e944-4f44-ade9-17508362d2ce",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"password\": \"{{loginpass}}\",\n  \"userLoginEmailId\": \"{{loginemail}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/login"
			},
			"response": []
		},
		{
			"name": "POST REQUEST -  User Sign In (401) wrong endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "763867e5-98fd-4aa5-a343-da6d787c20ba",
						"exec": [
							"",
							"",
							"//status code is 200",
							"",
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"//Check Response Time",
							"",
							"pm.test(\"Response Time is less than 500ms\", () => {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//Header validation",
							"",
							"pm.test(\"Content-Type Header is present\", () => {",
							"  pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"//Header Type Validation",
							"",
							"pm.test(\"Content-Type Header is application-json\", () => {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
							"});",
							"",
							"// Data type validation",
							"",
							"let dateFormat = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;",
							"",
							"pm.test(\"All Data types are correct\",()=>{",
							"    var jsondata = pm.response.json();",
							"    pm.expect(jsondata.timestamp).to.match(dateFormat);",
							"    pm.expect(jsondata.status).to.be.a(\"number\");",
							"    pm.expect(jsondata.error).to.be.a(\"string\");",
							"    pm.expect(jsondata.path).to.be.a(\"string\");",
							"});",
							"",
							"//Validate Response body content",
							"",
							"pm.test(\"Request body contains bad request confirmation \",() => {",
							"   var jsonData = pm.response.json(); ",
							"   pm.expect(jsonData).to.haveOwnProperty(\"status\");",
							"   pm.expect(jsonData.status).to.eql(401);",
							"   pm.expect(jsonData.error).to.include(\"Unauthorized\");",
							" ",
							" ",
							"});",
							"",
							"//Validating JSON Schema test",
							"",
							"var schema = {",
							"    properties: {",
							"    timestamp: {",
							"      type: \"string\",",
							"    },",
							"    status: {",
							"      type: \"number\",",
							"    },",
							"    error: {",
							"      type: \"string\",",
							"    },",
							"    path: {",
							"      type: \"string\",",
							"    },",
							"",
							"  },",
							"  required: [",
							"    \"timestamp\",",
							"    \"status\",",
							"    \"error\",",
							"    \"path\"",
							"  ],",
							"};",
							"",
							"",
							"pm.test(\"Schema is valid\", () => {",
							"  pm.response.to.have.jsonSchema(schema);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "bd61101e-b6f5-46f7-9437-dc4088e86493",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"password\": \"{{loginpass}}\",\n  \"userLoginEmailId\": \"{{loginemail}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/logon"
			},
			"response": []
		},
		{
			"name": "POST REQUEST -  User Sign In (400) invalid body",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "763867e5-98fd-4aa5-a343-da6d787c20ba",
						"exec": [
							"",
							"",
							"//status code is 400",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"//Check Response Time",
							"",
							"pm.test(\"Response Time is less than 500ms\", () => {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//Header validation",
							"",
							"pm.test(\"Content-Type Header is present\", () => {",
							"  pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"//Header Type Validation",
							"",
							"pm.test(\"Content-Type Header is application-json\", () => {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
							"});",
							"",
							"// Data type validation",
							"",
							"pm.test(\"All Data types are correct\",()=>{",
							"    var jsondata = pm.response.json();",
							"    pm.expect(jsondata.timestamp).to.be.a(\"string\");",
							"    pm.expect(jsondata.status).to.be.an(\"number\");",
							"    pm.expect(jsondata.error).to.be.a(\"string\");",
							"    pm.expect(jsondata.path).to.be.a(\"string\");",
							"});",
							"",
							"//Validate Response body content",
							"pm.test(\"Request body contains bad request confirmation \",() => {",
							"   var jsonData = pm.response.json(); ",
							"   pm.expect(jsonData).to.haveOwnProperty(\"status\");",
							"   pm.expect(jsonData.status).to.eql(400);",
							"   pm.expect(jsonData.error).to.include(\"Bad Request\");",
							" ",
							" ",
							"});",
							"",
							"//Validating JSON Schema test",
							"",
							"var schema = {",
							"    properties: {",
							"    timestamp: {",
							"      type: \"string\",",
							"    },",
							"    status: {",
							"      type: \"number\",",
							"    },",
							"    error: {",
							"      type: \"string\",",
							"    },",
							"    path: {",
							"      type: \"string\",",
							"    },",
							"",
							"  },",
							"  required: [",
							"    \"timestamp\",",
							"    \"status\",",
							"    \"error\",",
							"    \"path\"",
							"  ],",
							"};",
							"",
							"",
							"pm.test(\"Schema is valid\", () => {",
							"  pm.response.to.have.jsonSchema(schema);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "0774e914-339c-4843-8264-991d4720a965",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\",\n  \"password\": \"Numpyninja@12\",\n  \"domain\": \"LMS\"\n}\n\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/login"
			},
			"response": []
		},
		{
			"name": "GET REQUEST - User log out (401) remove bearer token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa7a1fd8-eba7-42f4-a11e-2e45a1cb864a",
						"exec": [
							"",
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"//Check Response Time",
							"pm.test(\"Response Time is less than 500ms\", () => {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//Header validation",
							"pm.test(\"Content-Type Header is present\", () => {",
							"  pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"//Header Type Validation",
							"",
							"pm.test(\"Content-Type Header is application-json\", () => {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
							"});",
							"",
							"// Data type validation",
							"",
							"let dateFormat = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;",
							"",
							"pm.test(\"All Data types are correct\",()=>{",
							"    var jsondata = pm.response.json();",
							"    pm.expect(jsondata.timestamp).to.match(dateFormat);",
							"    pm.expect(jsondata.status).to.be.an(\"number\");",
							"    pm.expect(jsondata.error).to.be.a(\"string\");",
							"    pm.expect(jsondata.path).to.be.a(\"string\");",
							"});",
							"",
							"//Validate Response body content",
							"pm.test(\"Request body contains bad request confirmation \",() => {",
							"   var jsonData = pm.response.json(); ",
							"   pm.expect(jsonData).to.haveOwnProperty(\"status\");",
							"   pm.expect(jsonData.status).to.eql(401);",
							"   pm.expect(jsonData.error).to.include(\"Unauthorized\");",
							" ",
							" ",
							"});",
							"",
							"//Validating JSON Schema test",
							"",
							"var schema = {",
							"    properties: {",
							"    timestamp: {",
							"      type: \"string\",",
							"    },",
							"    status: {",
							"      type: \"number\",",
							"    },",
							"    error: {",
							"      type: \"string\",",
							"    },",
							"    path: {",
							"      type: \"string\",",
							"    },",
							"",
							"  },",
							"  required: [",
							"    \"timestamp\",",
							"    \"status\",",
							"    \"error\",",
							"    \"path\"",
							"  ],",
							"};",
							"",
							"",
							"pm.test(\"Schema is valid\", () => {",
							"  pm.response.to.have.jsonSchema(schema);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f3aa23e0-02f4-4c44-8f56-18901358f861",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": ""
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/logoutlms",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"logoutlms"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"description": "application/json",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET REQUEST - User log out (405) wrong endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa7a1fd8-eba7-42f4-a11e-2e45a1cb864a",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"//Check Response Time",
							"pm.test(\"Response Time is less than 500ms\", () => {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//Header validation",
							"pm.test(\"Content-Type Header is present\", () => {",
							"  pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"//Header Type Validation",
							"",
							"pm.test(\"Content-Type Header is application-json\", () => {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
							"});",
							"",
							"// Data type validation",
							"",
							"let dateFormat = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;",
							"",
							"pm.test(\"All Data types are correct\",()=>{",
							"    var jsondata = pm.response.json();",
							"    pm.expect(jsondata.timestamp).to.match(dateFormat);",
							"    pm.expect(jsondata.status).to.be.an(\"number\");",
							"    pm.expect(jsondata.error).to.be.a(\"string\");",
							"    pm.expect(jsondata.path).to.be.a(\"string\");",
							"});",
							"",
							"//Validate Response body content",
							"pm.test(\"Request body contains 405 method not allowed confirmation \",() => {",
							"   var jsonData = pm.response.json(); ",
							"   pm.expect(jsonData).to.haveOwnProperty(\"status\");",
							"   pm.expect(jsonData.status).to.eql(405);",
							"   pm.expect(jsonData.error).to.include(\"Method Not Allowed\");",
							" ",
							" ",
							"});",
							"",
							"//Validating JSON Schema test",
							"",
							"var schema = {",
							"    properties: {",
							"    timestamp: {",
							"      type: \"string\",",
							"    },",
							"    status: {",
							"      type: \"number\",",
							"    },",
							"    error: {",
							"      type: \"string\",",
							"    },",
							"    path: {",
							"      type: \"string\",",
							"    },",
							"",
							"  },",
							"  required: [",
							"    \"timestamp\",",
							"    \"status\",",
							"    \"error\",",
							"    \"path\"",
							"  ],",
							"};",
							"",
							"",
							"pm.test(\"Schema is valid\", () => {",
							"  pm.response.to.have.jsonSchema(schema);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "825b67cf-9fd2-498e-bd58-34bb92bec4c6",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{Bearertoken2}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/logout",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"logout"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"description": "application/json",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET REQUEST - User log out (200) Positive scenario",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa7a1fd8-eba7-42f4-a11e-2e45a1cb864a",
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Check Response Time",
							"pm.test(\"Response Time is less than 500ms\", () => {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//Header validation",
							"pm.test(\"Content-Type Header is present\", () => {",
							"  pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"",
							"//Header Type Validation",
							"pm.test(\"Content-Type Header is plaintext\", () => {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/plain;charset=UTF-8\");",
							"});",
							"",
							"",
							"",
							"",
							"//verify if test achieved results",
							"",
							"",
							"pm.test(\"Logout was successful\", function () {",
							"   pm.expect(pm.response.text()).to.include(\"Logout successful\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "c13ee58f-bfef-4523-991f-9d539eb5567f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{Bearertoken2}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/logoutlms",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"logoutlms"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"description": "application/json",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}