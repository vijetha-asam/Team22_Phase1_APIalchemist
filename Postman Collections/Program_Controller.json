{
	"info": {
		"_postman_id": "6e17e152-fa7b-4996-b48e-93b9561b1421",
		"name": "Team22_APIAlchemist_ProgramModule",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login_Prerequisite",
			"item": [
				{
					"name": "Login-Valid User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6e48c3e-8f19-4506-9ef4-e3595115cf6e",
								"exec": [
									"var resp = pm.response.json();",
									"var token = resp.token;",
									"pm.environment.set(\"programModuleToken\",token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "87dcef6d-e360-43bf-b80d-a50981da72df",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"{{Password}}\",\n  \"userLoginEmailId\": \"{{UserLoginEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				}
			],
			"id": "4385ce69-768c-433d-b758-ec638ce49304"
		},
		{
			"name": "Post Program",
			"item": [
				{
					"name": "Create new program_one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
								"exec": [
									"var resp = pm.response.json();",
									"var programID = resp.programId;",
									"var programName = resp.programName;",
									"var programname = resp.programName;",
									"var programdescription = resp.programDescription;",
									"var programStatus = resp.programStatus;",
									"pm.environment.set(\"programModule_programID\",programID);",
									"pm.environment.set(\"Program1_ProgramName\",programname);",
									"pm.environment.set(\"Program1_programID\",programID);",
									"pm.environment.set(\"Program1_ProgramDescription\",programdescription);",
									"pm.environment.set(\"Program1_programStatus\",programStatus);",
									"",
									"",
									"// Perform header-content-type validation",
									"pm.test(\"Content-Type header is present\", ()=> {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", ()=> {",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 201\",()=>{",
									"pm.response.to.have.status(201);",
									"});",
									"// Perform response json validation",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as created\",()=>{",
									"pm.response.to.have.status('Created')",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});",
									"// Perform schema validation",
									"pm.test(\"Validate Response Schema\", function() {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"programId\": {\"type\": \"number\"},",
									"            \"programName\": {\"type\": \"string\"},",
									"            \"programDescription\": {\"type\": \"string\"},",
									"            \"programStatus\": {\"type\": \"string\"},",
									"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},",
									"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}",
									"        },",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
									"    };",
									"",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"pm.test(\"Validate Data Types\", function() {",
									"    const response = pm.response.json();",
									"    pm.expect(response.programId).to.be.a(\"number\");",
									"    pm.expect(response.programName).to.be.a(\"string\");",
									"    pm.expect(response.programDescription).to.be.a(\"string\");",
									"    pm.expect(response.programStatus).to.be.a(\"string\");",
									"    pm.expect(response.creationTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
									"    pm.expect(response.lastModTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
									"});",
									"// Get the request body",
									"const requestBody = pm.request.body.raw;",
									"// Log the request body",
									"console.log(\"Request Body:\", requestBody);",
									"",
									"// Log the response body",
									"console.log(\"Response Body:\", pm.response.json());",
									"// Parse the request body as JSON",
									"const requestData = JSON.parse(requestBody);",
									"// Validate the data entered in the request",
									"pm.test(\"Response body contains entered data\", function() {",
									"    pm.expect(resp.programDescription).to.equal(requestData.programDescription);",
									"    pm.expect(resp.programName).to.equal(requestData.programName);",
									"    pm.expect(resp.programStatus).to.equal(requestData.programStatus);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6d13c452-af12-498c-a5af-34e7a350901d",
								"exec": [
									"// Generate a random serial number",
									"const serialNumber = generateRandomNumber(1, 9999);",
									"const programNameValue = `March24-ApiAlchemist-QA-${serialNumber}`;",
									"",
									"// Function to generate a random number within a range",
									"function generateRandomNumber(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// Get the request body from the request editor",
									"const requestBody = {",
									"    programDescription: \"APIHackathon_Phase1\",",
									"    programName: programNameValue,",
									"    programStatus: \"Active\"",
									"};",
									"",
									"// Update the request body in the request editor",
									"pm.request.headers.add({",
									"    key: 'Content-Type',",
									"    value: 'application/json'",
									"});",
									"",
									"pm.request.body = {",
									"    mode: 'raw',",
									"    raw: JSON.stringify(requestBody)",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "045410d9-c071-4df3-a09d-d0c226e7fbdb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"APIHackathon_Phase1\",\n  \"programName\": \"{{programNameValue}}\",\n  \"programStatus\": \"Active\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create new program_two",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
								"exec": [
									"var resp = pm.response.json();",
									"var programID = resp.programId;",
									"var programname = resp.programName;",
									"var programdescription = resp.programDescription;",
									"var programStatus = resp.programStatus;",
									"pm.environment.set(\"programModule_programID_two\",programID);",
									"pm.environment.set(\"programModule_programName\",programname)",
									"",
									"//pm.environment.set(\"programModule_programID\",programID);",
									"pm.environment.set(\"Program2_ProgramName\",programname);",
									"pm.environment.set(\"Program2_programID\",programID);",
									"pm.environment.set(\"Program2_ProgramDescription\",programdescription);",
									"pm.environment.set(\"Program2_programStatus\",programStatus);",
									"",
									"// Perform header-content-type validation",
									"pm.test(\"Content-Type header is present\", ()=> {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", ()=> {",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 201\",()=>{",
									"pm.response.to.have.status(201);",
									"});",
									"// Perform response json validation",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as created\",()=>{",
									"pm.response.to.have.status('Created')",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});",
									"// Perform schema validation",
									"pm.test(\"Validate Response Schema\", function() {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"programId\": {\"type\": \"number\"},",
									"            \"programName\": {\"type\": \"string\"},",
									"            \"programDescription\": {\"type\": \"string\"},",
									"            \"programStatus\": {\"type\": \"string\"},",
									"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},",
									"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}",
									"        },",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
									"    };",
									"",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"pm.test(\"Validate Data Types\", function() {",
									"    const response = pm.response.json();",
									"//pm.expect(pm.response.json().programId).to.not.be.empty;",
									"    pm.expect(response.programId).to.be.a(\"number\");",
									"    pm.expect(response.programName).to.be.a(\"string\");",
									"    pm.expect(response.programDescription).to.be.a(\"string\");",
									"    pm.expect(response.programStatus).to.be.a(\"string\");",
									"    pm.expect(response.creationTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
									"    pm.expect(response.lastModTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
									"});",
									"// Get the request body",
									"const requestBody = pm.request.body.raw;",
									"// Parse the request body as JSON",
									"const requestData = JSON.parse(requestBody);",
									"// Validate the data entered in the request",
									"pm.test(\"Response body contains entered data\", function() {",
									"    pm.expect(resp.programDescription).to.equal(requestData.programDescription);",
									"    pm.expect(resp.programName).to.equal(requestData.programName);",
									"    pm.expect(resp.programStatus).to.equal(requestData.programStatus);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "145fbc5a-7c56-4370-b875-5b7066eccdaf",
								"exec": [
									"// Generate a random serial number",
									"const serialNumber = generateRandomNumber(1, 9999);",
									"const programNameValue = `March24-ApiAlchemist-DAA-${serialNumber}`;",
									"",
									"// Function to generate a random number within a range",
									"function generateRandomNumber(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// Get the request body from the request editor",
									"const requestBody = {",
									"    programDescription: \"APIHackathon_Phase1\",",
									"    programName: programNameValue,",
									"    programStatus: \"Active\"",
									"};",
									"",
									"// Update the request body in the request editor",
									"pm.request.headers.add({",
									"    key: 'Content-Type',",
									"    value: 'application/json'",
									"});",
									"",
									"pm.request.body = {",
									"    mode: 'raw',",
									"    raw: JSON.stringify(requestBody)",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b151ebe3-b54f-4d28-b0c5-e34785b10d6b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"APIHackathon_Phase1\",\n  \"programName\": \"{{programNameValue}}\",\n  \"programStatus\": \"Active\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "MissingProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
								"exec": [
									"// Perform header-content-type validation",
									"pm.test(\"Content-Type header is present\", ()=> {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", ()=> {",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');",
									"});",
									"// Perform status code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform response json validation",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3171e6cf-c1af-43d4-a7ae-c93268375a8e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"APIHackathon_Phase1\",\n  \"programName\": \"\",\n  \"programStatus\": \"Active\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "ProgramNameWithNumbers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
								"exec": [
									"resp = pm.response.json();",
									"// Perform response json validation",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"programName must begin with alphabet and can contain only alphanumeric characters\",",
									"    \"success\": false",
									"};",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b076fff9-fe11-4f96-ac2a-4e20ae159bfc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"APIHackathon_Phase1\",\n  \"programName\": \"{{UpdateToOnlyNumbers}}\",\n  \"programStatus\": \"Active\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "ProgramName with invalid Combination",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "850fa9d6-4abe-4739-8e2c-74851edf428f",
								"exec": [
									"var resp = pm.response.json();",
									"var programID = resp.programId;",
									"var programNameBug = resp.programName;",
									"//pm.environment.set(\"BugDelete_programModule_programName\",programNameBug);",
									"console.log(\"Bug ProgramName \", programNameBug);",
									"// Perform response json validation",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Log the request body",
									"console.log(\"Request Body:\", pm.request.body.raw);",
									"",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"programName must begin with alphabet and can contain only alphanumeric characters\",",
									"    \"success\": false",
									"};",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});",
									"",
									"// Check the response status code",
									"if (pm.response.code === 201) {",
									"  pm.environment.set(\"skipBugDeleteProgramName\", \"false\");",
									"} else {",
									"  pm.environment.set(\"skipBugDeleteProgramName\", \"true\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2730cfa9-2d70-415d-ab40-0dba69f7575f",
								"exec": [
									"//Function to generate a random string of special characters",
									"function generateRandomString(length) {",
									"  const specialCharacters = '!@#$%^&*()_+-=[]{}|;:,.<>?';",
									"  let result = '';",
									"  for (let i = 0; i < length; i++) {",
									"    const randomIndex = Math.floor(Math.random() * specialCharacters.length);",
									"    result += specialCharacters.charAt(randomIndex);",
									"  }",
									"  return result;",
									"}",
									"",
									"// Generate a random string of 10 special characters",
									"const randomSpecialCharacters = generateRandomString(10);",
									"const programNameValue = `A-${randomSpecialCharacters}`;",
									"",
									"// Function to generate a random number within a range",
									"// function generateRandomNumber(min, max) {",
									"//     return Math.floor(Math.random() * (max - min + 1)) + min;",
									"// }",
									"",
									"// Get the request body from the request editor",
									"const requestBody = {",
									"    programDescription: \"APIHackathon_Phase1_Bugs\",",
									"    programName: programNameValue,",
									"    programStatus: \"Active\"",
									"};",
									"",
									"// Update the request body in the request editor",
									"pm.request.headers.add({",
									"    key: 'Content-Type',",
									"    value: 'application/json'",
									"});",
									"",
									"pm.request.body = {",
									"    mode: 'raw',",
									"    raw: JSON.stringify(requestBody)",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "11b61a23-a224-4850-803e-69e579c7b275",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"programDescription\": \"APIHackathon_Phase1_Bugs\",\n    \"programName\": \"{{programNameValue}}\",\n    \"programStatus\": \"Active\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "ProgramNameWithSpecialCharacters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a43fad2-3681-4c38-95f3-4e60915aa046",
								"exec": [
									"resp = pm.response.json();",
									"// Perform response json validation",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"programName must begin with alphabet and can contain only alphanumeric characters\",",
									"    \"success\": false",
									"};",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "05cd2b3b-8003-4bbb-a85c-e481303c5a20",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"APIHackathon_Phase1\",\n  \"programName\": \"{{UpdateToSpecialChar}}\",\n  \"programStatus\": \"Active\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "ExistingProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "483c273a-57b0-4d7c-83d1-01f5bc682e46",
								"exec": [
									"resp = pm.response.json();",
									"// Perform response json validation",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"cannot create program , since already exists\",",
									"    \"success\": false",
									"};",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e98879de-5ab8-4d0e-af71-b4f2aa497e7b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"APIHackathon_Phase1\",\n  \"programName\": \"{{ExistingProgramName}}\",\n  \"programStatus\": \"Active\"\n}\n\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "InvalidProgramStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa7a42ac-6cdf-4f23-9032-721c962db3ae",
								"exec": [
									"resp = pm.response.json();",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"Invalid Status: must be Active or Inactive\",",
									"    \"success\": false",
									"};",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9ee5a74c-6da6-44b4-a8e2-8e6899c40ed4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"APIHackathon_Phase1\",\n  \"programName\": \"March24_APIAlchemist_SDET132\",\n  \"programStatus\": \"{{InvalidProgramStatus}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "NullProgramStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa7a42ac-6cdf-4f23-9032-721c962db3ae",
								"exec": [
									"resp = pm.response.json();",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"Invalid Status: must be Active or Inactive\",",
									"    \"success\": false",
									"};",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8fb27f97-da9d-4a15-b3b8-0b0e3e394e9e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"APIHackathon_Phase1\",\n  \"programName\": \"March24_APIAlchemist_SDET132\",\n  \"programStatus\": \"null\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "MissingProgramStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
								"exec": [
									"resp = pm.response.json();",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"Invalid Status: must be Active or Inactive\",",
									"    \"success\": false",
									"};",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a07eaa96-e63c-4d52-b572-e33475f9b97f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"APIHackathon_Phase1\",\n  \"programName\": \"March24_APIalchemist_SDET_132\",\n  \"programStatus\": \"\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "OnlyNumbersProgramDescription",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
								"exec": [
									"resp = pm.response.json();",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"programDescription must begin with alphabet and can contain only alphanumeric characters\",",
									"    \"success\": false",
									"};",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "69190835-98a1-4aa1-9525-70101cc24c4f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{UpdateToOnlyNumbers}}\",\n  \"programName\": \"March24_APIalchemist_SDET_132\",\n  \"programStatus\": \"Inactive\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "SpecialCharactersInDescription",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5d0af6e-3ca4-475e-bc1a-52c73998b7b8",
								"exec": [
									"resp = pm.response.json();",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"programDescription must begin with alphabet and can contain only alphanumeric characters\",",
									"    \"success\": false",
									"};",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c8ec1673-2e3f-457a-b099-e78569f20475",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{UpdateToSpecialChar}}\",\n  \"programName\": \"March24-API-DA-010\",\n  \"programStatus\": \"Inactive\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "InvalidCombinationInProgramDescription",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
								"exec": [
									"var resp = pm.response.json();",
									"var programID = resp.programId;",
									"var programNameBug = resp.programName;",
									"pm.environment.set(\"Bug_programModule_programID\",programID);",
									"pm.environment.set(\"BugDelete_programModule_programName\",programNameBug);",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Log the request body",
									"console.log(\"Request Body:\", pm.request.body.raw);",
									"",
									"// Perform status code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"// Perform actions based on the response code",
									"if (pm.response.code === 201) {",
									"        // Get the request name",
									"        const requestName = pm.info.requestName;",
									"        console.log(\"FAILED : create new program with \"+requestName+\" request\");",
									"        // Handle the unexpected updation",
									"        console.log(\"Program is created with invalid combination of an alphabet and special characters in ProgramDescription \");",
									"    }",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"programDescription must begin with alphabet and can contain only alphanumeric characters\",",
									"    \"success\": false",
									"};",
									"if(pm.response.code === 201){",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});}",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});",
									"// Check the response status code",
									"if (pm.response.code === 201) {",
									"  pm.environment.set(\"skip\", \"false\");",
									"} else {",
									"  pm.environment.set(\"skip\", \"true\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7c9f37cf-1b54-43a6-a317-b5788294bdaa",
								"exec": [
									"//Function to generate a random string of special characters",
									"function generateRandomString(length) {",
									"  const specialCharacters = '!@#$%^&*()_+-=[]{}|;:,.<>?';",
									"  let result = '';",
									"  for (let i = 0; i < length; i++) {",
									"    const randomIndex = Math.floor(Math.random() * specialCharacters.length);",
									"    result += specialCharacters.charAt(randomIndex);",
									"  }",
									"  return result;",
									"}",
									"// Function to generate a random number within a range",
									"function generateRandomNumber(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"// Generate a random string of 10 special characters",
									"const randomSpecialCharacters = generateRandomString(10);",
									"const programDescriptionValue = `A-${randomSpecialCharacters}`;",
									"const randomNumber = generateRandomNumber(10001,99999);",
									"const programNameValue = `APIHackathon_Phase1_Bugs_${randomNumber}`;",
									"",
									"",
									"// Get the request body from the request editor",
									"const requestBody = {",
									"    programDescription: programDescriptionValue,",
									"    programName: programNameValue,",
									"    programStatus: \"Active\"",
									"};",
									"",
									"// Update the request body in the request editor",
									"pm.request.headers.add({",
									"    key: 'Content-Type',",
									"    value: 'application/json'",
									"});",
									"",
									"pm.request.body = {",
									"    mode: 'raw',",
									"    raw: JSON.stringify(requestBody)",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c4caa146-75b4-42f1-8b52-e69057a89719",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"programDescription\": \"{{programDescriptionValue}}\",\n    \"programName\": \"{{programNameValue}}\",\n    \"programStatus\": \"Active\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				}
			],
			"id": "d1ce667b-08cb-437b-a02f-b96b9a685822"
		},
		{
			"name": "Get Programs",
			"item": [
				{
					"name": "Get by programId",
					"item": [
						{
							"name": "Get Program by ProgramId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24dafda5-4c06-408b-ac81-124cb36d69c6",
										"exec": [
											"var resp = pm.response.json();",
											"",
											"var schema = {",
											"  \"type\": \"object\",",
											"        \"properties\": {",
											"            \"programId\": { \"type\": \"number\" },",
											"            \"programName\": { \"type\": \"string\" },",
											"            \"programDescription\": { \"type\": \"string\" },",
											"            \"programStatus\": { \"type\": \"string\" },",
											"            \"creationTime\": { \"type\": \"string\", \"format\": \"date-time\" },",
											"            \"lastModTime\": { \"type\": \"string\", \"format\": \"date-time\" }",
											"        },",
											"  \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
											"};",
											"//Validate the response body",
											"pm.test('Schema validation', function()  {",
											"  //pm.response.to.have.jsonSchema (schema);",
											"  pm.expect(resp).to.be.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3466e3a7-5b9d-4360-884c-04bdadfb713e",
										"exec": [
											"// Get the request URL",
											"const requestUrl = pm.request.url.toString();",
											"",
											"// Extract the base URL from the request URL",
											"const baseUrl = requestUrl.split(\"?\")[0];",
											"",
											"// Define the path parameter value",
											"var pathParamValue =pm.environment.get(\"programModule_programID\");",
											"",
											"// Validate the path parameter value",
											"if (!pathParamValue) {",
											"    //throw new Error(\"Path parameter value is missing\");",
											"    console.log(\"ERROR : Path parameter value is missing\");",
											"}",
											"else{",
											"// Log the path parameter value",
											"console.log(\"Path parameter value:\", pathParamValue);",
											"",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "36a16b16-d733-4518-9e4e-c5f8a3fdf065",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/programs"
							},
							"response": []
						},
						{
							"name": "Get program by deleted programId",
							"id": "85885faa-abbb-443f-bdc8-7d09028b0724",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/programs/{{deletedProgramId_programModule}}"
							},
							"response": []
						},
						{
							"name": "Get program by non existing programId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25379b5a-d287-48da-ad58-19a7246f8232",
										"exec": [
											"var resp = pm.response.json();",
											"",
											"// Get the runtime programName from the environment variable",
											"const programID = pm.environment.get(\"Nonexisting_programID_programModule\");",
											"",
											"//Define expected Data",
											"const expectedData = {",
											"    \"message\": \"program with this: \" + programID+\"not found\",",
											"    \"success\": false",
											"};",
											"",
											"// Validate the response body",
											"pm.test(\"Response body contains expected error message and success flag\", function() {",
											"    pm.expect(resp.message).to.equal(expectedData.message);",
											"    pm.expect(resp.success).to.equal(expectedData.success);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2686a9ba-d4bc-4e4a-8d38-9aaf3ee4cbb9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/programs/{{Nonexisting_programID_programModule}}"
							},
							"response": []
						}
					],
					"id": "a221793c-394e-4d68-8457-cf31d312f49d"
				},
				{
					"name": "Get all programs",
					"item": [
						{
							"name": "Get All Programs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7225bca6-f2df-4234-968b-c8d23ebded6e",
										"exec": [
											"// Perform validations",
											"pm.test(\"Response is valid JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"// Perform status validation",
											"pm.test(\"Check Status as OK\",()=>{",
											"pm.response.to.have.status('OK')",
											"});",
											"// Perform response time validation",
											"pm.test(\"response time is less than 700ms\", ()=>{",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"// Perform schema validation",
											"pm.test(\"Validate Response Schema\", function() {",
											"    // Define the JSON schema",
											"const schema ={",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"programId\": {\"type\": \"number\"},",
											"            \"programName\": {\"type\": \"string\"},",
											"            \"programDescription\": {\"type\": \"string\"},",
											"            \"programStatus\": {\"type\": \"string\"},",
											"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},",
											"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}",
											"        },",
											"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
											"    }",
											"}",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5b6b630c-f99f-40e7-af28-f62b132903d0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/allPrograms"
							},
							"response": []
						}
					],
					"id": "f706ddff-46bc-463f-bdbc-a2e0001186f8"
				},
				{
					"name": "Get all programs with Users",
					"item": [
						{
							"name": "Get all programs with Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f22cb71-5a95-44c9-a74d-09b2eaba82d0",
										"exec": [
											"// Perform validations",
											"pm.test(\"Response is valid JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"// Perform status validation",
											"pm.test(\"Check Status as OK\",()=>{",
											"pm.response.to.have.status('OK')",
											"});",
											"// Perform response time validation",
											"pm.test(\"response time is less than 700ms\", ()=>{",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"// Define the JSON schema",
											"const schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"programId\": { \"type\": \"number\" },",
											"            \"programName\": { \"type\": \"string\" },",
											"            \"programDescription\": { \"type\": \"string\" },",
											"            \"programStatus\": { \"type\": \"string\" },",
											"            \"creationTime\": { \"type\": \"string\", \"format\": \"date-time\" },",
											"            \"lastModTime\": { \"type\": \"string\", \"format\": \"date-time\" },",
											"            \"programUsers\": {",
											"                \"type\": \"array\",",
											"                \"items\": {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"userId\": { \"type\": \"string\" },",
											"                        \"userFirstName\": { \"type\": \"string\" },",
											"                        \"userLastName\": { \"type\": \"string\" },",
											"                        \"userMiddleName\": { \"type\": \"string\" },",
											"                        \"userPhoneNumber\": { \"type\": \"number\" },",
											"                        \"userLocation\": { \"type\": \"string\" },",
											"                        \"userTimeZone\": { \"type\": \"string\" },",
											"                        \"userLinkedinUrl\": { \"type\": \"string\"},",
											"                        \"userEduUg\": { \"type\": \"string\" },",
											"                        \"userEduPg\": { \"type\": \"string\" },",
											"                        \"userComments\": { \"type\": \"string\" },",
											"                        \"userVisaStatus\": { \"type\": \"string\" },",
											"                        \"userLoginEmail\": { \"type\": [\"string\", \"null\"] }",
											"                    },",
											"                    \"required\": [\"userId\", \"userFirstName\", \"userLastName\", \"userPhoneNumber\"]",
											"                }",
											"            }",
											"        },",
											"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
											"    }",
											"};",
											"",
											"// Perform schema validation",
											"pm.test(\"Schema Validation\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "45a01115-149d-4dc8-bf4e-ec2f88830329",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/allProgramsWithUsers"
							},
							"response": []
						}
					],
					"id": "f662d5b1-378d-42da-8b34-b8acdaa57ae1"
				}
			],
			"id": "c1526b18-b41e-4a4b-8bc0-8804741b2701"
		},
		{
			"name": "Update Programs",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Update by programId",
							"item": [
								{
									"name": "UpdateProgramDescriptionByProgramID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5fac4e8e-2284-4360-9da9-9bc2e52e4bb4",
												"exec": [
													"//Get the request URL",
													"const requestUrl = pm.request.url.toString();",
													"",
													"// Extract the base URL from the request URL",
													"const baseUrl = requestUrl.split(\"?\")[0];",
													"",
													"// Extract request values from environment var",
													"const ProgramName = pm.environment.get(\"Program1_ProgramName\");",
													"const ProgramStatus = pm.environment.get(\"Program1_programStatus\");",
													"const ProgramDescription = pm.environment.get(\"Program1_ProgramDescription\");",
													"const updatedProgramDescription = ProgramDescription + \"_Updated\";",
													"",
													"// Create the request body object",
													"const requestBody = {",
													"    programName: ProgramName,",
													"    programDescription: updatedProgramDescription,",
													"    programStatus: \"Active\"",
													"};",
													"// Set the request body",
													"pm.request.body.update(JSON.stringify(requestBody));",
													"",
													"// Set the \"Content-Type\" header",
													"pm.request.headers.add({",
													"    key: \"Content-Type\",",
													"    value: \"application/json\"",
													"});",
													"",
													"// Log the request body",
													"console.log(\"Request body:\", pm.request.body.toString());",
													"// Validate the presence of the request body",
													"if (!pm.request.body.toString() || Object.keys(requestBody).length === 0) {",
													"    console.log(\"ERROR: Request body is missing\");",
													"} else {",
													"",
													"    // Log the request body",
													"    console.log(\"Request body:\", pm.request.body.raw);",
													"",
													"    // Define the path parameter value",
													"    var pathParamValue = pm.environment.get(\"Program1_programID\");",
													"    console.log(\"PathParam value:\", pathParamValue);",
													"",
													"    // Validate the path parameter value",
													"    if (!pathParamValue) {",
													"        console.log(\"ERROR: Path parameter value is missing\");",
													"    } else {",
													"        // Log the path parameter value",
													"        console.log(\"Path parameter value:\", pathParamValue);",
													"",
													"        // Construct the complete URL with the path parameter",
													"        const url = `${baseUrl}/${pathParamValue}`;",
													"",
													"        // Set the request URL",
													"        pm.request.url = url;",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c701a1c3-9d53-4d62-b2dc-91731558e5e4",
												"exec": [
													"var newResp = pm.response.json();",
													"var programDesc = newResp.programDescription;",
													"pm.environment.set(\"Program1_ProgramDescription\",programDesc);",
													"",
													"",
													"// Perform header-content-type validation",
													"pm.test(\"Content-Type header is present\", ()=> {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header is application/json\", ()=> {",
													" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');",
													"});",
													"// Perform statuc code validation",
													"pm.test(\"Status code is 200\",()=>{",
													"pm.response.to.have.status(200);",
													"});",
													"// Perform response json validation",
													"pm.test(\"Response is valid JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"// Perform status validation",
													"pm.test(\"Check Status as OK\",()=>{",
													"pm.response.to.have.status('OK')",
													"});",
													"// Perform response time validation",
													"pm.test(\"response time is less than 700ms\", ()=>{",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});",
													"// Perform schema validation",
													"pm.test(\"Validate Response Schema\", function() {",
													"    const schema = {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"programId\": {\"type\": \"number\"},",
													"            \"programName\": {\"type\": \"string\"},",
													"            \"programDescription\": {\"type\": \"string\"},",
													"            \"programStatus\": {\"type\": \"string\"},",
													"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},",
													"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}",
													"        },",
													"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
													"    };",
													"",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"pm.test(\"Validate Data Types\", function() {",
													"    const response = pm.response.json();",
													"//pm.expect(pm.response.json().programId).to.not.be.empty;",
													"    pm.expect(response.programId).to.be.a(\"number\");",
													"    pm.expect(response.programName).to.be.a(\"string\");",
													"    pm.expect(response.programDescription).to.be.a(\"string\");",
													"    pm.expect(response.programStatus).to.be.a(\"string\");",
													"    pm.expect(response.creationTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
													"    pm.expect(response.lastModTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
													"});",
													"// Get the request body",
													"const requestBody = pm.request.body.raw;",
													"// Parse the request body as JSON",
													"const requestData = JSON.parse(requestBody);",
													"// Validate the data entered in the request",
													"pm.test(\"Response body contains entered data\", function() {",
													"    const resp = pm.response.json();",
													"    pm.expect(resp.programId).to.equal(Number(pm.environment.get(\"Program1_programID\")));",
													"    pm.expect(resp.programDescription).to.equal(requestData.programDescription);",
													"    pm.expect(resp.programName).to.equal(requestData.programName);",
													"    pm.expect(resp.programStatus).to.equal(requestData.programStatus);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "176fa377-3a99-4fdd-91ee-117d89eeb23b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{programModuleToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"programName\": \"{{ProgramName}}\",\n    \"programDescription\": \"{{updatedProgramDescription}}\",\n    \"programStatus\": \"Active\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/putprogram"
									},
									"response": []
								},
								{
									"name": "UpdateProgramStatusByProgramID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6e09d942-985b-4c91-a846-b796ad6c2e80",
												"exec": [
													"//Get the request URL",
													"const requestUrl = pm.request.url.toString();",
													"",
													"// Extract the base URL from the request URL",
													"const baseUrl = requestUrl.split(\"?\")[0];",
													"",
													"// Extract request values from environment var",
													"const ProgramName = pm.environment.get(\"Program1_ProgramName\");",
													"const ProgramStatus = pm.environment.get(\"Program1_programStatus\");",
													"const ProgramDescription = pm.environment.get(\"Program1_ProgramDescription\");",
													"//const updatedProgramDescription = ProgramDescription + \"_Updated\";",
													"",
													"// Create the request body object",
													"const requestBody = {",
													"    programName: ProgramName,",
													"    programDescription: ProgramDescription,",
													"    programStatus: \"ACTIVE\"",
													"};",
													"// Set the request body",
													"pm.request.body.update(JSON.stringify(requestBody));",
													"",
													"// Set the \"Content-Type\" header",
													"pm.request.headers.add({",
													"    key: \"Content-Type\",",
													"    value: \"application/json\"",
													"});",
													"",
													"// Log the request body",
													"console.log(\"Request body:\", pm.request.body.toString());",
													"// Validate the presence of the request body",
													"if (!pm.request.body.toString() || Object.keys(requestBody).length === 0) {",
													"    console.log(\"ERROR: Request body is missing\");",
													"} else {",
													"    // // Parse the request body as JSON",
													"    // const requestData = JSON.parse(requestBody);",
													"",
													"    // // Replace variables in the request body",
													"    // requestData.programName = pm.variables.replaceIn(requestData.programName);",
													"    // requestData.programDescription = pm.variables.replaceIn(requestData.programDescription);",
													"",
													"    // // Set the updated request body",
													"    // pm.request.body.raw = JSON.stringify(requestData);",
													"",
													"    // Log the request body",
													"    console.log(\"Request body:\", pm.request.body.raw);",
													"",
													"    // Define the path parameter value",
													"    var pathParamValue = pm.environment.get(\"Program1_programID\");",
													"    console.log(\"PathParam value:\", pathParamValue);",
													"",
													"    // Validate the path parameter value",
													"    if (!pathParamValue) {",
													"        console.log(\"ERROR: Path parameter value is missing\");",
													"    } else {",
													"        // Log the path parameter value",
													"        console.log(\"Path parameter value:\", pathParamValue);",
													"",
													"        // Construct the complete URL with the path parameter",
													"        const url = `${baseUrl}/${pathParamValue}`;",
													"",
													"        // Set the request URL",
													"        pm.request.url = url;",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b9f5ff96-2b22-486b-8500-7be6079fac6d",
												"exec": [
													"var newResp = pm.response.json();",
													"var programStat = newResp.programStatus;",
													"pm.environment.set(\"Program1_ProgramStatus\",programStat);",
													"//const ProgramDescription= pm.environment.get(\"Program1_ProgramDescription\");",
													"",
													"// Perform header-content-type validation",
													"pm.test(\"Content-Type header is present\", ()=> {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header is application/json\", ()=> {",
													" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');",
													"});",
													"// Perform statuc code validation",
													"pm.test(\"Status code is 200\",()=>{",
													"pm.response.to.have.status(200);",
													"});",
													"// Perform response json validation",
													"pm.test(\"Response is valid JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"// Perform status validation",
													"pm.test(\"Check Status as OK\",()=>{",
													"pm.response.to.have.status('OK')",
													"});",
													"// Perform response time validation",
													"pm.test(\"response time is less than 700ms\", ()=>{",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});",
													"// Perform schema validation",
													"pm.test(\"Validate Response Schema\", function() {",
													"    const schema = {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"programId\": {\"type\": \"number\"},",
													"            \"programName\": {\"type\": \"string\"},",
													"            \"programDescription\": {\"type\": \"string\"},",
													"            \"programStatus\": {\"type\": \"string\"},",
													"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},",
													"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}",
													"        },",
													"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
													"    };",
													"",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"pm.test(\"Validate Data Types\", function() {",
													"    const response = pm.response.json();",
													"//pm.expect(pm.response.json().programId).to.not.be.empty;",
													"    pm.expect(response.programId).to.be.a(\"number\");",
													"    pm.expect(response.programName).to.be.a(\"string\");",
													"    pm.expect(response.programDescription).to.be.a(\"string\");",
													"    pm.expect(response.programStatus).to.be.a(\"string\");",
													"    pm.expect(response.creationTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
													"    pm.expect(response.lastModTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
													"});",
													"// Get the request body",
													"const requestBody = pm.request.body.raw;",
													"// Parse the request body as JSON",
													"const requestData = JSON.parse(requestBody);",
													"// Validate the data entered in the request",
													"pm.test(\"Response body contains entered data\", function() {",
													"    const resp = pm.response.json();",
													"    pm.expect(resp.programId).to.equal(pm.environment.get(\"Program1_programID\"));",
													"    pm.expect(resp.programDescription).to.equal(requestData.programDescription);",
													"    pm.expect(resp.programName).to.equal(requestData.programName);",
													"    pm.expect(resp.programStatus).to.equal(requestData.programStatus);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4fb3da9a-3f2b-431d-b609-ad8eeeeee985",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{programModuleToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"programName\": \"{{ProgramName}}\",\n    \"programDescription\": \"{{ProgramDescription}}\",\n    \"programStatus\": \"ACTIVE\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/putprogram"
									},
									"response": []
								},
								{
									"name": "UpdateProgramNameByProgramID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4bb42460-35f2-4984-b0b2-369d41c05860",
												"exec": [
													"//Get the request URL",
													"const requestUrl = pm.request.url.toString();",
													"",
													"// Extract the base URL from the request URL",
													"const baseUrl = requestUrl.split(\"?\")[0];",
													"",
													"// Extract request values from environment var",
													"const ProgramName = pm.environment.get(\"Program1_ProgramName\");",
													"const ProgramStatus = pm.environment.get(\"Program1_programStatus\");",
													"const ProgramDescription = pm.environment.get(\"Program1_ProgramDescription\");",
													"const updatedProgramName= ProgramName+\"_Updated\";",
													"// Create the request body object",
													"const requestBody = {",
													"    programName: updatedProgramName,",
													"    programDescription: ProgramDescription,",
													"    programStatus: \"ACTIVE\"",
													"};",
													"// Set the request body",
													"pm.request.body.update(JSON.stringify(requestBody));",
													"",
													"// Set the \"Content-Type\" header",
													"pm.request.headers.add({",
													"    key: \"Content-Type\",",
													"    value: \"application/json\"",
													"});",
													"",
													"// Log the request body",
													"console.log(\"Request body:\", pm.request.body.toString());",
													"// Validate the presence of the request body",
													"if (!pm.request.body.toString() || Object.keys(requestBody).length === 0) {",
													"    console.log(\"ERROR: Request body is missing\");",
													"} else {",
													"    // // Parse the request body as JSON",
													"    // const requestData = JSON.parse(requestBody);",
													"",
													"    // // Replace variables in the request body",
													"    // requestData.programName = pm.variables.replaceIn(requestData.programName);",
													"    // requestData.programDescription = pm.variables.replaceIn(requestData.programDescription);",
													"",
													"    // // Set the updated request body",
													"    // pm.request.body.raw = JSON.stringify(requestData);",
													"",
													"    // Log the request body",
													"    console.log(\"Request body:\", pm.request.body.raw);",
													"",
													"    // Define the path parameter value",
													"    var pathParamValue = pm.environment.get(\"Program1_programID\");",
													"    console.log(\"PathParam value:\", pathParamValue);",
													"",
													"    // Validate the path parameter value",
													"    if (!pathParamValue) {",
													"        console.log(\"ERROR: Path parameter value is missing\");",
													"    } else {",
													"        // Log the path parameter value",
													"        console.log(\"Path parameter value:\", pathParamValue);",
													"",
													"        // Construct the complete URL with the path parameter",
													"        const url = `${baseUrl}/${pathParamValue}`;",
													"",
													"        // Set the request URL",
													"        pm.request.url = url;",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "48c3d66e-4817-49c5-b8b7-5a9eddafbbef",
												"exec": [
													"var newResp = pm.response.json();",
													"var programname = newResp.programName;",
													"pm.environment.set(\"Program1_ProgramName\",programname);",
													"// Perform header-content-type validation",
													"pm.test(\"Content-Type header is present\", ()=> {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header is application/json\", ()=> {",
													" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');",
													"});",
													"// Perform statuc code validation",
													"pm.test(\"Status code is 200\",()=>{",
													"pm.response.to.have.status(200);",
													"});",
													"// Perform response json validation",
													"pm.test(\"Response is valid JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"// Perform status validation",
													"pm.test(\"Check Status as OK\",()=>{",
													"pm.response.to.have.status('OK')",
													"});",
													"// Perform response time validation",
													"pm.test(\"response time is less than 700ms\", ()=>{",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});",
													"// Perform schema validation",
													"pm.test(\"Validate Response Schema\", function() {",
													"    const schema = {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"programId\": {\"type\": \"number\"},",
													"            \"programName\": {\"type\": \"string\"},",
													"            \"programDescription\": {\"type\": \"string\"},",
													"            \"programStatus\": {\"type\": \"string\"},",
													"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},",
													"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}",
													"        },",
													"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
													"    };",
													"",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"pm.test(\"Validate Data Types\", function() {",
													"    const response = pm.response.json();",
													"//pm.expect(pm.response.json().programId).to.not.be.empty;",
													"    pm.expect(response.programId).to.be.a(\"number\");",
													"    pm.expect(response.programName).to.be.a(\"string\");",
													"    pm.expect(response.programDescription).to.be.a(\"string\");",
													"    pm.expect(response.programStatus).to.be.a(\"string\");",
													"    pm.expect(response.creationTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
													"    pm.expect(response.lastModTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
													"});",
													"// Get the request body",
													"const requestBody = pm.request.body.raw;",
													"// Parse the request body as JSON",
													"const requestData = JSON.parse(requestBody);",
													"// Validate the data entered in the request",
													"pm.test(\"Response body contains entered data\", function() {",
													"    const resp = pm.response.json();",
													"    pm.expect(resp.programId).to.equal(Number(pm.environment.get(\"Program1_programID\")));",
													"    pm.expect(resp.programDescription).to.equal(requestData.programDescription);",
													"    pm.expect(resp.programName).to.equal(requestData.programName);",
													"    pm.expect(resp.programStatus).to.equal(requestData.programStatus);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "191b8027-55a9-4710-bd20-33632c5e0769",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{programModuleToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"programName\": \"{{updatedProgramName}}\",\n    \"programDescription\": \"{{ProgramDescription}}\",\n    \"programStatus\": \"ACTIVE\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/putprogram"
									},
									"response": []
								}
							],
							"id": "db789302-362f-41f8-9ef8-ae1edcca4a24"
						},
						{
							"name": "Update by programName",
							"item": [
								{
									"name": "UpdateProgramStatus ByProgramName",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "711c6b19-ac38-4d94-8e66-7aede753ef67",
												"exec": [
													"var newResp = pm.response.json();",
													"var programStat = newResp.programStatus;",
													"pm.environment.set(\"Program1_ProgramStatus\",programStat);",
													"//const ProgramDescription= pm.environment.get(\"Program1_ProgramDescription\");",
													"",
													"// Perform header-content-type validation",
													"pm.test(\"Content-Type header is present\", ()=> {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header is application/json\", ()=> {",
													" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');",
													"});",
													"// Perform statuc code validation",
													"pm.test(\"Status code is 200\",()=>{",
													"pm.response.to.have.status(200);",
													"});",
													"// Perform response json validation",
													"pm.test(\"Response is valid JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"// Perform status validation",
													"pm.test(\"Check Status as OK\",()=>{",
													"pm.response.to.have.status('OK')",
													"});",
													"// Perform response time validation",
													"pm.test(\"response time is less than 700ms\", ()=>{",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});",
													"// Perform schema validation",
													"pm.test(\"Validate Response Schema\", function() {",
													"    const schema = {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"programId\": {\"type\": \"number\"},",
													"            \"programName\": {\"type\": \"string\"},",
													"            \"programDescription\": {\"type\": \"string\"},",
													"            \"programStatus\": {\"type\": \"string\"},",
													"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},",
													"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}",
													"        },",
													"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
													"    };",
													"",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"pm.test(\"Validate Data Types\", function() {",
													"    const response = pm.response.json();",
													"//pm.expect(pm.response.json().programId).to.not.be.empty;",
													"    pm.expect(response.programId).to.be.a(\"number\");",
													"    pm.expect(response.programName).to.be.a(\"string\");",
													"    pm.expect(response.programDescription).to.be.a(\"string\");",
													"    pm.expect(response.programStatus).to.be.a(\"string\");",
													"    pm.expect(response.creationTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
													"    pm.expect(response.lastModTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
													"});",
													"// Get the request body",
													"const requestBody = pm.request.body.raw;",
													"// Parse the request body as JSON",
													"const requestData = JSON.parse(requestBody);",
													"// Validate the data entered in the request",
													"pm.test(\"Response body contains entered data\", function() {",
													"    const resp = pm.response.json();",
													"    pm.expect(resp.programId).to.equal(Number(pm.environment.get(\"Program1_programID\")));",
													"    pm.expect(resp.programDescription).to.equal(requestData.programDescription);",
													"    pm.expect(resp.programName).to.equal(requestData.programName);",
													"    pm.expect(resp.programStatus).to.equal(requestData.programStatus);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fa59fbeb-dd1d-431b-a322-6cbac42cee10",
												"exec": [
													"//Get the request URL",
													"const requestUrl = pm.request.url.toString();",
													"",
													"// Extract the base URL from the request URL",
													"const baseUrl = requestUrl.split(\"?\")[0];",
													"",
													"// Extract request values from environment var",
													"const ProgramName = pm.environment.get(\"Program1_ProgramName\");",
													"const ProgramStatus = pm.environment.get(\"Program1_programStatus\");",
													"const ProgramDescription = pm.environment.get(\"Program1_ProgramDescription\");",
													"//const updatedProgramDescription = ProgramDescription + \"_Updated\";",
													"",
													"// Create the request body object",
													"const requestBody = {",
													"    programName: ProgramName,",
													"    programDescription: ProgramDescription,",
													"    programStatus: \"InACTIVE\"",
													"};",
													"// Set the request body",
													"pm.request.body.update(JSON.stringify(requestBody));",
													"",
													"// Set the \"Content-Type\" header",
													"pm.request.headers.add({",
													"    key: \"Content-Type\",",
													"    value: \"application/json\"",
													"});",
													"",
													"// Log the request body",
													"console.log(\"Request body:\", pm.request.body.toString());",
													"// Validate the presence of the request body",
													"if (!pm.request.body.toString() || Object.keys(requestBody).length === 0) {",
													"    console.log(\"ERROR: Request body is missing\");",
													"} else {",
													"    // // Parse the request body as JSON",
													"    // const requestData = JSON.parse(requestBody);",
													"",
													"    // // Replace variables in the request body",
													"    // requestData.programName = pm.variables.replaceIn(requestData.programName);",
													"    // requestData.programDescription = pm.variables.replaceIn(requestData.programDescription);",
													"",
													"    // // Set the updated request body",
													"    // pm.request.body.raw = JSON.stringify(requestData);",
													"",
													"    // Log the request body",
													"    console.log(\"Request body:\", pm.request.body.raw);",
													"",
													"    // Define the path parameter value",
													"    var pathParamValue = pm.environment.get(\"Program1_ProgramName\");",
													"    console.log(\"PathParam value:\", pathParamValue);",
													"",
													"    // Validate the path parameter value",
													"    if (!pathParamValue) {",
													"        console.log(\"ERROR: Path parameter value is missing\");",
													"    } else {",
													"        // Log the path parameter value",
													"        console.log(\"Path parameter value:\", pathParamValue);",
													"",
													"        // Construct the complete URL with the path parameter",
													"        const url = `${baseUrl}/${pathParamValue}`;",
													"",
													"        // Set the request URL",
													"        pm.request.url = url;",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a1732573-0ec6-46f8-9605-ee6085f343d7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{programModuleToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"programName\": \"{{ProgramName}}\",\n    \"programDescription\": \"{{ProgramDescription}}\",\n    \"programStatus\": \"InACTIVE\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/program"
									},
									"response": []
								},
								{
									"name": "UpdateProgramDescriptionByProgramName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4cff74f5-d87f-4d64-b3f1-b02e69b21366",
												"exec": [
													"//Get the request URL",
													"const requestUrl = pm.request.url.toString();",
													"",
													"// Extract the base URL from the request URL",
													"const baseUrl = requestUrl.split(\"?\")[0];",
													"",
													"// Extract request values from environment var",
													"const ProgramName = pm.environment.get(\"Program1_ProgramName\");",
													"const ProgramStatus = pm.environment.get(\"Program1_programStatus\");",
													"const ProgramDescription = pm.environment.get(\"Program1_ProgramDescription\");",
													"const updatedProgramDescription = ProgramDescription + \"_Updated\";",
													"",
													"// Create the request body object",
													"const requestBody = {",
													"    programName: ProgramName,",
													"    programDescription: updatedProgramDescription,",
													"    programStatus: ProgramStatus",
													"};",
													"// Set the request body",
													"pm.request.body.update(JSON.stringify(requestBody));",
													"",
													"// Set the \"Content-Type\" header",
													"pm.request.headers.add({",
													"    key: \"Content-Type\",",
													"    value: \"application/json\"",
													"});",
													"",
													"// Log the request body",
													"console.log(\"Request body:\", pm.request.body.toString());",
													"// Validate the presence of the request body",
													"if (!pm.request.body.toString() || Object.keys(requestBody).length === 0) {",
													"    console.log(\"ERROR: Request body is missing\");",
													"} else {",
													"",
													"    // Log the request body",
													"    console.log(\"Request body:\", pm.request.body.raw);",
													"",
													"    // Define the path parameter value",
													"    var pathParamValue = pm.environment.get(\"Program1_ProgramName\");",
													"    console.log(\"PathParam value:\", pathParamValue);",
													"",
													"    // Validate the path parameter value",
													"    if (!pathParamValue) {",
													"        console.log(\"ERROR: Path parameter value is missing\");",
													"    } else {",
													"        // Log the path parameter value",
													"        console.log(\"Path parameter value:\", pathParamValue);",
													"",
													"        // Construct the complete URL with the path parameter",
													"        const url = `${baseUrl}/${pathParamValue}`;",
													"",
													"        // Set the request URL",
													"        pm.request.url = url;",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d1c5511b-cda1-4bfb-8b7f-4b34befa13ed",
												"exec": [
													"var newResp = pm.response.json();",
													"var programDesc = newResp.programDescription;",
													"pm.environment.set(\"Program1_ProgramDescription\",programDesc);",
													"",
													"",
													"// Perform header-content-type validation",
													"pm.test(\"Content-Type header is present\", ()=> {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header is application/json\", ()=> {",
													" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');",
													"});",
													"// Perform statuc code validation",
													"pm.test(\"Status code is 200\",()=>{",
													"pm.response.to.have.status(200);",
													"});",
													"// Perform response json validation",
													"pm.test(\"Response is valid JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"// Perform status validation",
													"pm.test(\"Check Status as OK\",()=>{",
													"pm.response.to.have.status('OK')",
													"});",
													"// Perform response time validation",
													"pm.test(\"response time is less than 700ms\", ()=>{",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});",
													"// Perform schema validation",
													"pm.test(\"Validate Response Schema\", function() {",
													"    const schema = {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"programId\": {\"type\": \"number\"},",
													"            \"programName\": {\"type\": \"string\"},",
													"            \"programDescription\": {\"type\": \"string\"},",
													"            \"programStatus\": {\"type\": \"string\"},",
													"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},",
													"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}",
													"        },",
													"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
													"    };",
													"",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"pm.test(\"Validate Data Types\", function() {",
													"    const response = pm.response.json();",
													"//pm.expect(pm.response.json().programId).to.not.be.empty;",
													"    pm.expect(response.programId).to.be.a(\"number\");",
													"    pm.expect(response.programName).to.be.a(\"string\");",
													"    pm.expect(response.programDescription).to.be.a(\"string\");",
													"    pm.expect(response.programStatus).to.be.a(\"string\");",
													"    pm.expect(response.creationTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
													"    pm.expect(response.lastModTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
													"});",
													"// Get the request body",
													"const requestBody = pm.request.body.raw;",
													"// Parse the request body as JSON",
													"const requestData = JSON.parse(requestBody);",
													"// Validate the data entered in the request",
													"pm.test(\"Response body contains entered data\", function() {",
													"    const resp = pm.response.json();",
													"    pm.expect(resp.programId).to.equal(Number(pm.environment.get(\"Program1_programID\")));",
													"    pm.expect(resp.programDescription).to.equal(requestData.programDescription);",
													"    pm.expect(resp.programName).to.equal(requestData.programName);",
													"    pm.expect(resp.programStatus).to.equal(requestData.programStatus);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d644a1b3-ca2e-4aa8-8caa-acf828072798",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{programModuleToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"programName\": \"{{ProgramName}}\",\n    \"programDescription\": \"{{updatedProgramDescription}}\",\n    \"programStatus\": \"{{ProgramStatus}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/program"
									},
									"response": []
								},
								{
									"name": "UpdateProgramNameByProgramName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4cff74f5-d87f-4d64-b3f1-b02e69b21366",
												"exec": [
													"//Get the request URL",
													"const requestUrl = pm.request.url.toString();",
													"",
													"// Extract the base URL from the request URL",
													"const baseUrl = requestUrl.split(\"?\")[0];",
													"",
													"// Extract request values from environment var",
													"const ProgramName = pm.environment.get(\"Program1_ProgramName\");",
													"const ProgramStatus = pm.environment.get(\"Program1_programStatus\");",
													"const ProgramDescription = pm.environment.get(\"Program1_ProgramDescription\");",
													"//const updatedProgramDescription = ProgramDescription + \"_Updated\";",
													"const updatedProgramName = ProgramName+\"_UpdatedBYProgramName\";",
													"// Create the request body object",
													"const requestBody = {",
													"    programName: updatedProgramName,",
													"    programDescription: ProgramDescription,",
													"    programStatus: ProgramStatus",
													"};",
													"// Set the request body",
													"pm.request.body.update(JSON.stringify(requestBody));",
													"",
													"// Set the \"Content-Type\" header",
													"pm.request.headers.add({",
													"    key: \"Content-Type\",",
													"    value: \"application/json\"",
													"});",
													"",
													"// Log the request body",
													"console.log(\"Request body:\", pm.request.body.toString());",
													"// Validate the presence of the request body",
													"if (!pm.request.body.toString() || Object.keys(requestBody).length === 0) {",
													"    console.log(\"ERROR: Request body is missing\");",
													"} else {",
													"",
													"    // Log the request body",
													"    console.log(\"Request body:\", pm.request.body.raw);",
													"",
													"    // Define the path parameter value",
													"    var pathParamValue = pm.environment.get(\"Program1_ProgramName\");",
													"    console.log(\"PathParam value:\", pathParamValue);",
													"",
													"    // Validate the path parameter value",
													"    if (!pathParamValue) {",
													"        console.log(\"ERROR: Path parameter value is missing\");",
													"    } else {",
													"        // Log the path parameter value",
													"        console.log(\"Path parameter value:\", pathParamValue);",
													"",
													"        // Construct the complete URL with the path parameter",
													"        const url = `${baseUrl}/${pathParamValue}`;",
													"",
													"        // Set the request URL",
													"        pm.request.url = url;",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d1c5511b-cda1-4bfb-8b7f-4b34befa13ed",
												"exec": [
													"var newResp = pm.response.json();",
													"var programname = newResp.programName;",
													"pm.environment.set(\"Program1_ProgramName\",programname);",
													"// Perform header-content-type validation",
													"pm.test(\"Content-Type header is present\", ()=> {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type header is application/json\", ()=> {",
													" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');",
													"});",
													"// Perform statuc code validation",
													"pm.test(\"Status code is 200\",()=>{",
													"pm.response.to.have.status(200);",
													"// Perform actions based on the response code",
													"    if (pm.response.code === 500) {",
													"        // Get the request name",
													"        const requestName = pm.info.requestName;",
													"        console.log(\"Unexpected 500 Internal Server Error occurred while executing \"+requestName+\" request\");",
													"        // Handle the 500 error",
													"        console.log(\"API couldn't give appropriate error message\");",
													"        ",
													"    }",
													"    if (pm.response.code === 400) {",
													"        // Get the request name",
													"        const requestName = pm.info.requestName;",
													"        console.log(\"Unexpected 400 Error occurred while executing \"+requestName+\" request\");",
													"        // Handle the 400 error",
													"        //console.log(\"API couldn't give appropriate error message\");",
													"        ",
													"    }",
													"});",
													"// Perform response json validation",
													"pm.test(\"Response is valid JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"// Perform status validation",
													"pm.test(\"Check Status as OK\",()=>{",
													"pm.response.to.have.status('OK')",
													"});",
													"// Perform response time validation",
													"pm.test(\"response time is less than 700ms\", ()=>{",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});",
													"if(pm.response.code === 200){",
													"// Perform schema validation",
													"pm.test(\"Validate Response Schema\", function() {",
													"    const schema = {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"programId\": {\"type\": \"number\"},",
													"            \"programName\": {\"type\": \"string\"},",
													"            \"programDescription\": {\"type\": \"string\"},",
													"            \"programStatus\": {\"type\": \"string\"},",
													"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},",
													"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}",
													"        },",
													"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
													"    };",
													"",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"pm.test(\"Validate Data Types\", function() {",
													"    const response = pm.response.json();",
													"//pm.expect(pm.response.json().programId).to.not.be.empty;",
													"    pm.expect(response.programId).to.be.a(\"number\");",
													"    pm.expect(response.programName).to.be.a(\"string\");",
													"    pm.expect(response.programDescription).to.be.a(\"string\");",
													"    pm.expect(response.programStatus).to.be.a(\"string\");",
													"    pm.expect(response.creationTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
													"    pm.expect(response.lastModTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
													"});",
													"// Get the request body",
													"const requestBody = pm.request.body.raw;",
													"// Parse the request body as JSON",
													"const requestData = JSON.parse(requestBody);",
													"// Validate the data entered in the request",
													"pm.test(\"Response body contains entered data\", function() {",
													"    const resp = pm.response.json();",
													"    pm.expect(resp.programId).to.equal(Number(pm.environment.get(\"Program1_programID\")));",
													"    pm.expect(resp.programDescription).to.equal(requestData.programDescription);",
													"    pm.expect(resp.programName).to.equal(requestData.programName);",
													"    pm.expect(resp.programStatus).to.equal(requestData.programStatus);",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7e9378e6-c20b-4717-a887-e1cd4eafd281",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{programModuleToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"programName\": \"{{updatedProgramName}}\",\n    \"programDescription\": \"{{ProgramDescription}}\",\n    \"programStatus\": \"{{ProgramStatus}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/program"
									},
									"response": []
								}
							],
							"id": "b32a06f5-b23a-4736-90ba-0d54dd329a00"
						}
					],
					"id": "7acd100a-5d02-45e9-944c-c64e05965dee"
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Update by programId",
							"item": [
								{
									"name": "UpdateProgramNameToSpecialCharactersByID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4bb42460-35f2-4984-b0b2-369d41c05860",
												"exec": [
													"// Get the request URL",
													"const requestUrl = pm.request.url.toString();",
													"",
													"// Extract the base URL from the request URL",
													"const baseUrl = requestUrl.split(\"?\")[0];",
													"",
													"// Get the request body",
													"const requestBody = pm.request.body;",
													"",
													"// Validate the presence of the request body",
													"if (!requestBody || !requestBody.raw || requestBody.raw.length === 0) {",
													"    //throw new Error(\"Request body is missing\");",
													"    console.log(\"ERROR : Request body is missing\");",
													"}",
													"else{",
													"// Log the request body",
													"console.log(\"Request body:\", requestBody.raw);",
													"// Define the path parameter value",
													"var pathParamValue =pm.environment.get(\"programModule_programID\");",
													"",
													"// Validate the path parameter value",
													"if (!pathParamValue) {",
													"    //throw new Error(\"Path parameter value is missing\");",
													"    console.log(\"ERROR : Path parameter value is missing\");",
													"}",
													"else{",
													"// Log the path parameter value",
													"console.log(\"Path parameter value:\", pathParamValue);",
													"",
													"// Construct the complete URL with the path parameter",
													"const url = `${baseUrl}/${pathParamValue}`;",
													"",
													"// Set the request URL",
													"pm.request.url = url;",
													"} }"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b6e1c603-adec-445d-90fb-153389dfeafb",
												"exec": [
													"resp = pm.response.json();",
													"// Perform response json validation",
													"pm.test(\"Response is valid JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"// Perform statuc code validation",
													"pm.test(\"Status code is 400\",()=>{",
													"pm.response.to.have.status(400);",
													"});",
													"// Perform status validation",
													"pm.test(\"Check Status as Bad Request\",()=>{",
													"pm.response.to.have.status('Bad Request')",
													"});",
													"//Define expected Data",
													"const expectedData = {",
													"    \"message\": \"programName must begin with alphabet and can contain only alphanumeric characters\",",
													"    \"success\": false",
													"};",
													"if (pm.response.code === 400) {",
													"// Validate the response body",
													"pm.test(\"Response body contains expected error message and success flag\", function() {",
													"    pm.expect(resp.message).to.equal(expectedData.message);",
													"    pm.expect(resp.success).to.equal(expectedData.success);",
													"}); }",
													"// Perform response time validation",
													"pm.test(\"response time is less than 700ms\", ()=>{",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a7201673-435c-470b-89e9-d6f7bea00e0a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{programModuleToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"programName\": \"{{UpdateToSpecialChar}}\",\n    \"programDescription\": \"{{UpdateProgramDescription_ID}}\",\n    \"programStatus\": \"{{UpdateProgramStatus_ID}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/putprogram"
									},
									"response": []
								},
								{
									"name": "UpdateProgramNameToOnlyNumbersByID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4bb42460-35f2-4984-b0b2-369d41c05860",
												"exec": [
													"// Get the request URL",
													"const requestUrl = pm.request.url.toString();",
													"",
													"// Extract the base URL from the request URL",
													"const baseUrl = requestUrl.split(\"?\")[0];",
													"",
													"// Get the request body",
													"const requestBody = pm.request.body;",
													"",
													"// Validate the presence of the request body",
													"if (!requestBody || !requestBody.raw || requestBody.raw.length === 0) {",
													"    //throw new Error(\"Request body is missing\");",
													"    console.log(\"ERROR : Request body is missing\");",
													"}",
													"else{",
													"// Log the request body",
													"console.log(\"Request body:\", requestBody.raw);",
													"// Define the path parameter value",
													"var pathParamValue =pm.environment.get(\"programModule_programID\");",
													"",
													"// Validate the path parameter value",
													"if (!pathParamValue) {",
													"    //throw new Error(\"Path parameter value is missing\");",
													"    console.log(\"ERROR : Path parameter value is missing\");",
													"}",
													"else{",
													"// Log the path parameter value",
													"console.log(\"Path parameter value:\", pathParamValue);",
													"",
													"// Construct the complete URL with the path parameter",
													"const url = `${baseUrl}/${pathParamValue}`;",
													"",
													"// Set the request URL",
													"pm.request.url = url;",
													"} }"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b6e1c603-adec-445d-90fb-153389dfeafb",
												"exec": [
													"resp = pm.response.json();",
													"// Perform response json validation",
													"pm.test(\"Response is valid JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"// Perform status code validation",
													"pm.test(\"Status code is 400\",()=>{",
													"pm.response.to.have.status(400);",
													"});",
													"// Perform status validation",
													"pm.test(\"Check Status as Bad Request\",()=>{",
													"pm.response.to.have.status('Bad Request')",
													"});",
													"//Define expected Data",
													"const expectedData = {",
													"    \"message\": \"programName must begin with alphabet and can contain only alphanumeric characters\",",
													"    \"success\": false",
													"};",
													"if (pm.response.code === 400) {",
													"// Validate the response body",
													"pm.test(\"Response body contains expected error message and success flag\", function() {",
													"    pm.expect(resp.message).to.equal(expectedData.message);",
													"    pm.expect(resp.success).to.equal(expectedData.success);",
													"});}",
													"// Perform response time validation",
													"pm.test(\"response time is less than 700ms\", ()=>{",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "239507f7-a4a5-4b7b-a5e7-7c92ca4f9094",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{programModuleToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"programName\": \"{{UpdateToOnlyNumbers}}\",\n    \"programDescription\": \"{{UpdateProgramDescription_ID}}\",\n    \"programStatus\": \"{{UpdateProgramStatus_ID}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/putprogram"
									},
									"response": []
								},
								{
									"name": "UpdateProgramNameToExistingProgramNameByID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4bb42460-35f2-4984-b0b2-369d41c05860",
												"exec": [
													"// Get the request URL",
													"const requestUrl = pm.request.url.toString();",
													"",
													"// Extract the base URL from the request URL",
													"const baseUrl = requestUrl.split(\"?\")[0];",
													"",
													"// Get the request body",
													"const requestBody = pm.request.body;",
													"",
													"// Validate the presence of the request body",
													"if (!requestBody || !requestBody.raw || requestBody.raw.length === 0) {",
													"    //throw new Error(\"Request body is missing\");",
													"    console.log(\"ERROR : Request body is missing\");",
													"}",
													"else{",
													"// Log the request body",
													"console.log(\"Request body:\", requestBody.raw);",
													"// Define the path parameter value",
													"var pathParamValue =pm.environment.get(\"programModule_programID\");",
													"",
													"// Validate the path parameter value",
													"if (!pathParamValue) {",
													"    //throw new Error(\"Path parameter value is missing\");",
													"    console.log(\"ERROR : Path parameter value is missing\");",
													"}",
													"else{",
													"// Log the path parameter value",
													"console.log(\"Path parameter value:\", pathParamValue);",
													"",
													"// Construct the complete URL with the path parameter",
													"const url = `${baseUrl}/${pathParamValue}`;",
													"",
													"// Set the request URL",
													"pm.request.url = url;",
													"} }"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b6e1c603-adec-445d-90fb-153389dfeafb",
												"exec": [
													"var resp = pm.response.json();",
													"// Perform response json validation",
													"pm.test(\"Response is valid JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"// Perform status code validation",
													"pm.test(\"Status code is 400\",()=>{",
													"pm.response.to.have.status(400);",
													"// Perform actions based on the response code",
													"    if (pm.response.code === 500) {",
													"        // Get the request name",
													"        const requestName = pm.info.requestName;",
													"        console.log(\"Unexpected 500 Internal Server Error occurred while executing \"+requestName+\" request\");",
													"        // Handle the 500 error",
													"        console.log(\"API couldn't give appropriate error message\");",
													"        ",
													"    }",
													"    if (pm.response.code === 200) {",
													"        // Get the request name",
													"        const requestName = pm.info.requestName;",
													"        console.log(\"FAILED : \"+requestName+\" request\");",
													"        // Handle the unexpected updation",
													"        console.log(\"ProgramName is updated to existing/repeated program name\");",
													"    }",
													"});",
													"// Perform status validation",
													"pm.test(\"Check Status as Bad Request\",()=>{",
													"pm.response.to.have.status('Bad Request')",
													"});",
													"//Define expected Data",
													"const expectedData = {",
													"    \"message\": \"cannot create program , since already exists\",",
													"    \"success\": false",
													"};",
													"// Check if the response status code is 500",
													"pm.test(\"Check for 500 Internal Server Error\", function () {",
													"    ",
													"});",
													"// Check if the response status code is 400",
													"if (pm.response.code === 400) {",
													"// Validate the response body",
													"pm.test(\"Response body contains expected error message and success flag\", function() {",
													"    pm.expect(resp.message).to.equal(expectedData.message);",
													"    pm.expect(resp.success).to.equal(expectedData.success);",
													"});",
													"}",
													"// Perform response time validation",
													"pm.test(\"response time is less than 700ms\", ()=>{",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f4205ddc-4f17-4231-9e2e-bd19eb31f493",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{programModuleToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"programName\": \"{{ExistingProgramName}}\",\n    \"programDescription\": \"{{UpdateProgramDescription_ID}}\",\n    \"programStatus\": \"{{UpdateProgramStatus_ID}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/putprogram"
									},
									"response": []
								},
								{
									"name": "UpdateProgramDescriptionWithSpecialCharsByID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "07fa9362-7c3e-4bf3-8230-84a6d917c2ce",
												"exec": [
													"// Get the request URL",
													"const requestUrl = pm.request.url.toString();",
													"",
													"// Extract the base URL from the request URL",
													"const baseUrl = requestUrl.split(\"?\")[0];",
													"",
													"// Get the request body",
													"const requestBody = pm.request.body;",
													"",
													"// Validate the presence of the request body",
													"if (!requestBody || !requestBody.raw || requestBody.raw.length === 0) {",
													"    //throw new Error(\"Request body is missing\");",
													"    console.log(\"ERROR : Request body is missing\");",
													"}",
													"else{",
													"// Log the request body",
													"console.log(\"Request body:\", requestBody.raw);",
													"// Define the path parameter value",
													"var pathParamValue =pm.environment.get(\"programModule_programID\");",
													"",
													"// Validate the path parameter value",
													"if (!pathParamValue) {",
													"    //throw new Error(\"Path parameter value is missing\");",
													"    console.log(\"ERROR : Path parameter value is missing\");",
													"}",
													"else{",
													"// Log the path parameter value",
													"console.log(\"Path parameter value:\", pathParamValue);",
													"",
													"// Construct the complete URL with the path parameter",
													"const url = `${baseUrl}/${pathParamValue}`;",
													"",
													"// Set the request URL",
													"pm.request.url = url;",
													"} }"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fca0da2f-379c-49e5-9122-4a5bd3cca042",
												"exec": [
													"resp = pm.response.json();",
													"pm.test(\"Response is valid JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"// Perform statuc code validation",
													"pm.test(\"Status code is 400\",()=>{",
													"pm.response.to.have.status(400);",
													"});",
													"// Perform status validation",
													"pm.test(\"Check Status as Bad Request\",()=>{",
													"pm.response.to.have.status('Bad Request')",
													"});",
													"//Define expected Data",
													"const expectedData = {",
													"    \"message\": \"programDescription must begin with alphabet and can contain only alphanumeric characters\",",
													"    \"success\": false",
													"};",
													"if (pm.response.code === 400) {",
													"// Validate the response body",
													"pm.test(\"Response body contains expected error message and success flag\", function() {",
													"    pm.expect(resp.message).to.equal(expectedData.message);",
													"    pm.expect(resp.success).to.equal(expectedData.success);",
													"});}",
													"// Perform response time validation",
													"pm.test(\"response time is less than 700ms\", ()=>{",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "93bf9b7f-8ce8-4e38-a74b-ceb01ab9f04b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{programModuleToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"programName\": \"{{UpdateProgramNameValid_ID}}\",\n    \"programDescription\": \"{{UpdateToSpecialChar}}\",\n    \"programStatus\": \"{{UpdateProgramStatus_ID}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/putprogram"
									},
									"response": []
								},
								{
									"name": "UpdateProgramDescriptionWithOnlyNumbersByID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "07fa9362-7c3e-4bf3-8230-84a6d917c2ce",
												"exec": [
													"// Get the request URL",
													"const requestUrl = pm.request.url.toString();",
													"",
													"// Extract the base URL from the request URL",
													"const baseUrl = requestUrl.split(\"?\")[0];",
													"",
													"// Get the request body",
													"const requestBody = pm.request.body;",
													"",
													"// Validate the presence of the request body",
													"if (!requestBody || !requestBody.raw || requestBody.raw.length === 0) {",
													"    //throw new Error(\"Request body is missing\");",
													"    console.log(\"ERROR : Request body is missing\");",
													"}",
													"else{",
													"// Log the request body",
													"console.log(\"Request body:\", requestBody.raw);",
													"// Define the path parameter value",
													"var pathParamValue =pm.environment.get(\"programModule_programID\");",
													"",
													"// Validate the path parameter value",
													"if (!pathParamValue) {",
													"    //throw new Error(\"Path parameter value is missing\");",
													"    console.log(\"ERROR : Path parameter value is missing\");",
													"}",
													"else{",
													"// Log the path parameter value",
													"console.log(\"Path parameter value:\", pathParamValue);",
													"",
													"// Construct the complete URL with the path parameter",
													"const url = `${baseUrl}/${pathParamValue}`;",
													"",
													"// Set the request URL",
													"pm.request.url = url;",
													"} }"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e681bf54-c50d-4e49-ba56-a5eb6fcfdb54",
												"exec": [
													"resp = pm.response.json();",
													"pm.test(\"Response is valid JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"// Perform statuc code validation",
													"pm.test(\"Status code is 400\",()=>{",
													"pm.response.to.have.status(400);",
													"});",
													"// Perform status validation",
													"pm.test(\"Check Status as Bad Request\",()=>{",
													"pm.response.to.have.status('Bad Request')",
													"});",
													"//Define expected Data",
													"const expectedData = {",
													"    \"message\": \"programDescription must begin with alphabet and can contain only alphanumeric characters\",",
													"    \"success\": false",
													"};",
													"if (pm.response.code === 400) {",
													"// Validate the response body",
													"pm.test(\"Response body contains expected error message and success flag\", function() {",
													"    pm.expect(resp.message).to.equal(expectedData.message);",
													"    pm.expect(resp.success).to.equal(expectedData.success);",
													"});}",
													"// Perform response time validation",
													"pm.test(\"response time is less than 700ms\", ()=>{",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "437a8be0-eb6c-45d1-b777-eca76ef2f935",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{programModuleToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"programName\": \"{{UpdateProgramNameValid_ID}}\",\n    \"programDescription\": \"{{UpdateToOnlyNumbers}}\",\n    \"programStatus\": \"{{UpdateProgramStatus_ID}}\"\n}\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/putprogram"
									},
									"response": []
								},
								{
									"name": "UpdateProgramStatusWithInvalidValueByID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f6e6817f-984b-43c3-8c4d-a6fc2f20514d",
												"exec": [
													"// Get the request URL",
													"const requestUrl = pm.request.url.toString();",
													"",
													"// Extract the base URL from the request URL",
													"const baseUrl = requestUrl.split(\"?\")[0];",
													"",
													"// Get the request body",
													"const requestBody = pm.request.body;",
													"",
													"// Validate the presence of the request body",
													"if (!requestBody || !requestBody.raw || requestBody.raw.length === 0) {",
													"    //throw new Error(\"Request body is missing\");",
													"    console.log(\"ERROR : Request body is missing\");",
													"}",
													"else{",
													"// Log the request body",
													"console.log(\"Request body:\", requestBody.raw);",
													"// Define the path parameter value",
													"var pathParamValue =pm.environment.get(\"programModule_programID\");",
													"",
													"// Validate the path parameter value",
													"if (!pathParamValue) {",
													"    //throw new Error(\"Path parameter value is missing\");",
													"    console.log(\"ERROR : Path parameter value is missing\");",
													"}",
													"else{",
													"// Log the path parameter value",
													"console.log(\"Path parameter value:\", pathParamValue);",
													"",
													"// Construct the complete URL with the path parameter",
													"const url = `${baseUrl}/${pathParamValue}`;",
													"",
													"// Set the request URL",
													"pm.request.url = url;",
													"} }"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "80a62695-27c5-46bf-8269-58f1f175dcf6",
												"exec": [
													"resp = pm.response.json();",
													"pm.test(\"Response is valid JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"// Perform status code validation",
													"pm.test(\"Status code is 400\",()=>{",
													"pm.response.to.have.status(400);",
													"});",
													"// Perform status validation",
													"pm.test(\"Check Status as Bad Request\",()=>{",
													"pm.response.to.have.status('Bad Request')",
													"});",
													"//Define expected Data",
													"const expectedData = {",
													"    \"message\": \"Invalid Status: must be Active or Inactive\",",
													"    \"success\": false",
													"};",
													"if (pm.response.code === 400) {",
													"// Validate the response body",
													"pm.test(\"Response body contains expected error message and success flag\", function() {",
													"    pm.expect(resp.message).to.equal(expectedData.message);",
													"    pm.expect(resp.success).to.equal(expectedData.success);",
													"});}",
													"// Perform response time validation",
													"pm.test(\"response time is less than 700ms\", ()=>{",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d469c745-f0f1-4be0-b8c0-9e36d19a0bdb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{programModuleToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"programName\": \"{{UpdateProgramNameValid_ID}}\",\n    \"programDescription\": \"{{UpdateProgramDescription_ID}}\",\n    \"programStatus\": \"{{InvalidProgramStatus}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/putprogram"
									},
									"response": []
								},
								{
									"name": "InvalidProgramId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f6e6817f-984b-43c3-8c4d-a6fc2f20514d",
												"exec": [
													"//Get the request URL",
													"const requestUrl = pm.request.url.toString();",
													"",
													"// Extract the base URL from the request URL",
													"const baseUrl = requestUrl.split(\"?\")[0];",
													"",
													"// Extract request values from environment var",
													"const ProgramName = pm.environment.get(\"Program1_ProgramName\");",
													"const ProgramStatus = pm.environment.get(\"Program1_programStatus\");",
													"const ProgramDescription = pm.environment.get(\"Program1_ProgramDescription\");",
													"",
													"// Create the request body object",
													"const requestBody = {",
													"    programName: ProgramName,",
													"    programDescription: ProgramDescription,",
													"    programStatus: \"ACTIVE\"",
													"};",
													"// Set the request body",
													"pm.request.body.update(JSON.stringify(requestBody));",
													"",
													"// Set the \"Content-Type\" header",
													"pm.request.headers.add({",
													"    key: \"Content-Type\",",
													"    value: \"application/json\"",
													"});",
													"",
													"// Log the request body",
													"console.log(\"Request body:\", pm.request.body.toString());",
													"// Validate the presence of the request body",
													"if (!pm.request.body.toString() || Object.keys(requestBody).length === 0) {",
													"    console.log(\"ERROR: Request body is missing\");",
													"} else {",
													"    // Log the request body",
													"    console.log(\"Request body:\", pm.request.body.raw);",
													"",
													"    // Define the path parameter value",
													"",
													"    //var pathParamValue = pm.environment.get(\"Program1_programID\");",
													"    pm.environment.set(\"InvalidProgramID\",0);",
													"    var pathParamValue = 0;",
													"    console.log(\"PathParam value:\", pathParamValue);",
													"",
													"    // Validate the path parameter value",
													"    if (!pathParamValue) {",
													"        console.log(\"ERROR: Path parameter value is missing\");",
													"    } else {",
													"        // Log the path parameter value",
													"        console.log(\"Path parameter value:\", pathParamValue);",
													"",
													"        // Construct the complete URL with the path parameter",
													"        const url = `${baseUrl}/${pathParamValue}`;",
													"",
													"        // Set the request URL",
													"        pm.request.url = url;",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "80a62695-27c5-46bf-8269-58f1f175dcf6",
												"exec": [
													"var resp = pm.response.json();",
													"// Perform statuc code validation",
													"pm.test(\"Status code is 404\",()=>{",
													"pm.response.to.have.status(404);",
													"});",
													"// Perform status validation",
													"pm.test(\"Check Status as Not Found\",()=>{",
													"pm.response.to.have.status('Not Found')",
													"});",
													"//Define expected Data",
													"var programID = Number(pm.environment.get(\"InvalidProgramID\"));",
													"const expectedData = {",
													"    \"message\": \"program with id\"+programID+\"not found\",",
													"  \"success\": false",
													"};",
													"// Validate the response body",
													"pm.test(\"Response body contains expected error message and success flag\", function() {",
													"    pm.expect(resp.message).to.equal(expectedData.message);",
													"    pm.expect(resp.success).to.equal(expectedData.success);",
													"});",
													"// Perform response time validation",
													"pm.test(\"response time is less than 700ms\", ()=>{",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "238cb005-fd14-457d-887f-ef027d302c07",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{programModuleToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"programName\": \"{{ProgramName}}\",\n    \"programDescription\": \"{{ProgramDescription}}\",\n    \"programStatus\": \"ACTIVE\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/putprogram"
									},
									"response": []
								}
							],
							"id": "09991d51-b5eb-4deb-97f4-61dfa9162d55"
						},
						{
							"name": "Update by programName",
							"item": [
								{
									"name": "UpdateProgramStatusWithInvalidValue_ByProgramName",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "711c6b19-ac38-4d94-8e66-7aede753ef67",
												"exec": [
													"resp = pm.response.json();",
													"pm.test(\"Response is valid JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"// Perform statuc code validation",
													"pm.test(\"Status code is 400\",()=>{",
													"pm.response.to.have.status(400);",
													"});",
													"// Perform status validation",
													"pm.test(\"Check Status as Bad Request\",()=>{",
													"pm.response.to.have.status('Bad Request')",
													"});",
													"//Define expected Data",
													"const expectedData = {",
													"    \"message\": \"Invalid Status: must be Active or Inactive\",",
													"    \"success\": false",
													"};",
													"if (pm.response.code === 400) {",
													"// Validate the response body",
													"pm.test(\"Response body contains expected error message and success flag\", function() {",
													"    pm.expect(resp.message).to.equal(expectedData.message);",
													"    pm.expect(resp.success).to.equal(expectedData.success);",
													"});}",
													"",
													"// Perform response time validation",
													"pm.test(\"response time is less than 700ms\", ()=>{",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fa59fbeb-dd1d-431b-a322-6cbac42cee10",
												"exec": [
													"// Get the request URL",
													"const requestUrl = pm.request.url.toString();",
													"",
													"// Extract the base URL from the request URL",
													"const baseUrl = requestUrl.split(\"?\")[0];",
													"",
													"// Get the request body",
													"const requestBody = pm.request.body;",
													"",
													"// Validate the presence of the request body",
													"if (!requestBody || !requestBody.raw || requestBody.raw.length === 0) {",
													"    //throw new Error(\"Request body is missing\");",
													"    console.log(\"ERROR : Request body is missing\");",
													"}",
													"else{",
													"// Log the request body",
													"console.log(\"Request body:\", requestBody.raw);",
													"// Define the path parameter value",
													"var pathParamValue =pm.environment.get(\"programModule_programName\");",
													"",
													"// Validate the path parameter value",
													"if (!pathParamValue) {",
													"    //throw new Error(\"Path parameter value is missing\");",
													"    console.log(\"ERROR : Path parameter value is missing\");",
													"}",
													"else{",
													"// Log the path parameter value",
													"console.log(\"Path parameter value:\", pathParamValue);",
													"",
													"// Construct the complete URL with the path parameter",
													"const url = `${baseUrl}/${pathParamValue}`;",
													"",
													"// Set the request URL",
													"pm.request.url = url;",
													"} }"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "40e53518-6751-4111-b804-736401494370",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{programModuleToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"programDescription\": \"{{UpdateProgramDescription_Name}}\",\n  \"programName\": \"{{programModule_programName}}\",\n  \"programStatus\": \"{{InvalidProgramStatus}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/program"
									},
									"response": []
								},
								{
									"name": "UpdateProgramDescriptionWithSpecialChar_ByProgramName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "166a0cab-4e4f-4cab-8411-bb8233b86936",
												"exec": [
													"// Get the request URL",
													"const requestUrl = pm.request.url.toString();",
													"",
													"// Extract the base URL from the request URL",
													"const baseUrl = requestUrl.split(\"?\")[0];",
													"",
													"// Get the request body",
													"const requestBody = pm.request.body;",
													"",
													"// Validate the presence of the request body",
													"if (!requestBody || !requestBody.raw || requestBody.raw.length === 0) {",
													"    //throw new Error(\"Request body is missing\");",
													"    console.log(\"ERROR : Request body is missing\");",
													"}",
													"else{",
													"// Log the request body",
													"console.log(\"Request body:\", requestBody.raw);",
													"// Define the path parameter value",
													"var pathParamValue =pm.environment.get(\"programModule_programName\");",
													"",
													"// Validate the path parameter value",
													"if (!pathParamValue) {",
													"    //throw new Error(\"Path parameter value is missing\");",
													"    console.log(\"ERROR : Path parameter value is missing\");",
													"}",
													"else{",
													"// Log the path parameter value",
													"console.log(\"Path parameter value:\", pathParamValue);",
													"",
													"// Construct the complete URL with the path parameter",
													"const url = `${baseUrl}/${pathParamValue}`;",
													"",
													"// Set the request URL",
													"pm.request.url = url;",
													"} }"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9dfa551d-2fb0-4436-8158-a7cbaf524fab",
												"exec": [
													"resp = pm.response.json();",
													"pm.test(\"Response is valid JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"// Perform statuc code validation",
													"pm.test(\"Status code is 400\",()=>{",
													"pm.response.to.have.status(400);",
													"});",
													"// Perform status validation",
													"pm.test(\"Check Status as Bad Request\",()=>{",
													"pm.response.to.have.status('Bad Request')",
													"});",
													"//Define expected Data",
													"const expectedData = {",
													"    \"message\": \"programDescription must begin with alphabet and can contain only alphanumeric characters\",",
													"    \"success\": false",
													"};",
													"if (pm.response.code === 400) {",
													"// Validate the response body",
													"    pm.test(\"Response body contains expected error message and success flag\", function() {",
													"    pm.expect(resp.message).to.equal(expectedData.message);",
													"    pm.expect(resp.success).to.equal(expectedData.success);",
													"    }); ",
													"}",
													"// Perform response time validation",
													"pm.test(\"response time is less than 700ms\", ()=>{",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "efae2e75-2459-4b69-956f-4e1cd22ea7f5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{programModuleToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"programDescription\": \"{{UpdateToSpecialChar}}\",\n  \"programName\": \"{{programModule_programName}}\",\n  \"programStatus\": \"{{UpdateProgramStatus_Name}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/program"
									},
									"response": []
								},
								{
									"name": "UpdateProgramNameWithSpecialChars_ByProgramName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8e138ebe-e0e6-41b3-a68c-a4647033c6ee",
												"exec": [
													"// Get the request URL",
													"const requestUrl = pm.request.url.toString();",
													"",
													"// Extract the base URL from the request URL",
													"const baseUrl = requestUrl.split(\"?\")[0];",
													"",
													"// Get the request body",
													"const requestBody = pm.request.body;",
													"",
													"// Validate the presence of the request body",
													"if (!requestBody || !requestBody.raw || requestBody.raw.length === 0) {",
													"    //throw new Error(\"Request body is missing\");",
													"    console.log(\"ERROR : Request body is missing\");",
													"}",
													"else{",
													"// Log the request body",
													"console.log(\"Request body:\", requestBody.raw);",
													"// Define the path parameter value",
													"var pathParamValue =pm.environment.get(\"programModule_programName\");",
													"",
													"// Validate the path parameter value",
													"if (!pathParamValue) {",
													"    //throw new Error(\"Path parameter value is missing\");",
													"    console.log(\"ERROR : Path parameter value is missing\");",
													"}",
													"else{",
													"// Log the path parameter value",
													"console.log(\"Path parameter value:\", pathParamValue);",
													"",
													"// Construct the complete URL with the path parameter",
													"const url = `${baseUrl}/${pathParamValue}`;",
													"",
													"// Set the request URL",
													"pm.request.url = url;",
													"} }"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "67655810-7b82-461a-8701-fed91f1f8e66",
												"exec": [
													"resp = pm.response.json();",
													"// Perform response json validation",
													"pm.test(\"Response is valid JSON\", function () {",
													"    pm.response.to.be.json;",
													"});",
													"// Perform statuc code validation",
													"pm.test(\"Status code is 400\",()=>{",
													"pm.response.to.have.status(400);",
													"});",
													"// Perform status validation",
													"pm.test(\"Check Status as Bad Request\",()=>{",
													"pm.response.to.have.status('Bad Request')",
													"});",
													"//Define expected Data",
													"const expectedData = {",
													"    \"message\": \"programName must begin with alphabet and can contain only alphanumeric characters\",",
													"    \"success\": false",
													"};",
													"if (pm.response.code === 400) {",
													"// Validate the response body",
													"pm.test(\"Response body contains expected error message and success flag\", function() {",
													"    pm.expect(resp.message).to.equal(expectedData.message);",
													"    pm.expect(resp.success).to.equal(expectedData.success);",
													"});",
													"}",
													"// Perform response time validation",
													"pm.test(\"response time is less than 700ms\", ()=>{",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "378742e4-c1f7-49c5-99f6-a24e5525a503",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{programModuleToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"programDescription\": \"{{UpdateProgramDescription_Name}}\",\n  \"programName\": \"{{UpdateToSpecialChar}}\",\n  \"programStatus\": \"{{UpdateProgramStatus_Name}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/program"
									},
									"response": []
								},
								{
									"name": "InvalidProgramName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8e138ebe-e0e6-41b3-a68c-a4647033c6ee",
												"exec": [
													"//Get the request URL",
													"const requestUrl = pm.request.url.toString();",
													"",
													"// Extract the base URL from the request URL",
													"const baseUrl = requestUrl.split(\"?\")[0];",
													"",
													"// Extract request values from environment var",
													"const ProgramName = pm.environment.get(\"Program1_ProgramName\");",
													"const ProgramStatus = pm.environment.get(\"Program1_programStatus\");",
													"const ProgramDescription = pm.environment.get(\"Program1_ProgramDescription\");",
													"//const updatedProgramDescription = ProgramDescription + \"_Updated\";",
													"",
													"// Create the request body object",
													"const requestBody = {",
													"    programName: ProgramName,",
													"    programDescription: ProgramDescription,",
													"    programStatus: \"InACTIVE\"",
													"};",
													"// Set the request body",
													"pm.request.body.update(JSON.stringify(requestBody));",
													"",
													"// Set the \"Content-Type\" header",
													"pm.request.headers.add({",
													"    key: \"Content-Type\",",
													"    value: \"application/json\"",
													"});",
													"",
													"// Log the request body",
													"console.log(\"Request body:\", pm.request.body.toString());",
													"// Validate the presence of the request body",
													"if (!pm.request.body.toString() || Object.keys(requestBody).length === 0) {",
													"    console.log(\"ERROR: Request body is missing\");",
													"} else {",
													"    // Log the request body",
													"    console.log(\"Request body:\", pm.request.body.raw);",
													"",
													"    // Define the path parameter value",
													"    var pathParamValue = pm.environment.get(\"InvalidProgramNAME\");",
													"    console.log(\"PathParam value:\", pathParamValue);",
													"",
													"    // Validate the path parameter value",
													"    if (!pathParamValue) {",
													"        console.log(\"ERROR: Path parameter value is missing\");",
													"    } else {",
													"        // Log the path parameter value",
													"        console.log(\"Path parameter value:\", pathParamValue);",
													"",
													"        // Construct the complete URL with the path parameter",
													"        const url = `${baseUrl}/${pathParamValue}`;",
													"",
													"        // Set the request URL",
													"        pm.request.url = url;",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "67655810-7b82-461a-8701-fed91f1f8e66",
												"exec": [
													"var resp = pm.response.json();",
													"",
													"// Perform statuc code validation",
													"pm.test(\"Status code is 404\",()=>{",
													"pm.response.to.have.status(404);",
													"});",
													"// Perform status validation",
													"pm.test(\"Check Status as Not Found\",()=>{",
													"pm.response.to.have.status('Not Found')",
													"});",
													"//Define expected Data",
													"var ProgramName = Number(pm.environment.get(\"InvalidProgramNAME\"));",
													"const expectedData = {",
													"    \"message\": \"no list with such program name \"+ProgramName+\"\",",
													"    \"success\": false",
													"};",
													"// Validate the response body",
													"pm.test(\"Response body contains expected error message and success flag\", function() {",
													"    pm.expect(resp.message).to.equal(expectedData.message);",
													"    pm.expect(resp.success).to.equal(expectedData.success);",
													"});",
													"// Perform response time validation",
													"pm.test(\"response time is less than 700ms\", ()=>{",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5821bdd7-7b59-4cf7-8b55-887bb381fa1e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{programModuleToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"programName\": \"{{ProgramName}}\",\n    \"programDescription\": \"{{ProgramDescription}}\",\n    \"programStatus\": \"InACTIVE\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/program"
									},
									"response": []
								}
							],
							"id": "6b49ef67-2f59-4595-a1e2-780b7edc3974"
						}
					],
					"id": "3c75130b-efc7-435c-97ad-cbe82263d60e"
				}
			],
			"id": "39d7f45d-8ffa-43cb-9dd7-dc82b386faa6"
		},
		{
			"name": "Delete Programs",
			"item": [
				{
					"name": "Delete by programID",
					"item": [
						{
							"name": "DeleteProgram By Valid ProgramId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8496de19-7501-4053-a801-07b0a979bc58",
										"exec": [
											"var response = pm.response.text();",
											"",
											"// Perform statuc code validation",
											"pm.test(\"Status code is 200\",()=>{",
											"pm.response.to.have.status(200);",
											"});",
											"// Perform status validation",
											"pm.test(\"Check Status as OK\",()=>{",
											"pm.response.to.have.status('OK')",
											"});",
											"// Get the runtime programName from the environment variable",
											"const programID = pm.environment.get(\"programModule_programID\");",
											"",
											"// Update the response message with the program ID Define expected Data",
											"const expectedResponseMessage = \"Program Id-\"+programID+\" is deleted Successfully!\";",
											"",
											"// Validate the response body",
											"pm.test(\"Response body contains expected success message\", function() {",
											"    //pm.expect(response).to.equal(expectedResponseMessage);",
											"    pm.expect(response).to.include(expectedResponseMessage);",
											"});",
											"",
											"// Perform response time validation",
											"pm.test(\"response time is less than 700ms\", ()=>{",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"if(pm.environment.get(\"skip\") === \"true\"){",
											"postman.setNextRequest(\"Delete Nonexisting program by programId\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6b3912e5-c793-483d-9369-82810f90df9e",
										"exec": [
											"// Get the request URL",
											"const requestUrl = pm.request.url.toString();",
											"",
											"// Extract the base URL from the request URL",
											"const baseUrl = requestUrl.split(\"?\")[0];",
											"",
											"// Define the path parameter value",
											"var pathParamValue =pm.environment.get(\"programModule_programID\");",
											"",
											"// Validate the path parameter value",
											"if (!pathParamValue) {",
											"    //throw new Error(\"Path parameter value is missing\");",
											"    console.log(\"ERROR : Path parameter value is missing\");",
											"}",
											"else{",
											"// Log the path parameter value",
											"console.log(\"Path parameter value:\", pathParamValue);",
											"",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b046bfd0-8a8f-4f0d-8ae0-1424ac79f5c5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/deletebyprogid"
							},
							"response": []
						},
						{
							"name": "DeleteProgram By BugProgramId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab582363-89c5-43d9-b6a0-7f0e79cff09f",
										"exec": [
											"// Get the request URL",
											"const requestUrl = pm.request.url.toString();",
											"",
											"// Extract the base URL from the request URL",
											"const baseUrl = requestUrl.split(\"?\")[0];",
											"",
											"// Define the path parameter value",
											"var pathParamValue =pm.environment.get(\"Bug_programModule_programID\");",
											"",
											"// Validate the path parameter value",
											"if (!pathParamValue) {",
											"    //throw new Error(\"Path parameter value is missing\");",
											"    console.log(\"ERROR : Path parameter value is missing\");",
											"}",
											"else{",
											"// Log the path parameter value",
											"console.log(\"Path parameter value:\", pathParamValue);",
											"",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;",
											"} "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b682ad50-5f73-4809-a9a5-bcd70f7e6b6f",
										"exec": [
											"var response = pm.response.text();",
											"",
											"// Perform statuc code validation",
											"pm.test(\"Status code is 200\",()=>{",
											"pm.response.to.have.status(200);",
											"});",
											"// Perform status validation",
											"pm.test(\"Check Status as OK\",()=>{",
											"pm.response.to.have.status('OK')",
											"});",
											"// Get the runtime programId from the environment variable",
											"const programID = pm.environment.get(\"Bug_programModule_programID\");",
											"",
											"// Update the response message with the programId Define expected Data",
											"const expectedResponseMessage = \"Program Id-\"+programID+\" is deleted Successfully!\";",
											"",
											"// Validate the response body",
											"pm.test(\"Response body contains expected success message\", function() {",
											"    pm.expect(response).to.include(expectedResponseMessage);",
											"});",
											"",
											"// Perform response time validation",
											"pm.test(\"response time is less than 700ms\", ()=>{",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7b5a2db7-2f51-47cf-a7a2-caccc9fca45c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/deletebyprogid"
							},
							"response": []
						},
						{
							"name": "Delete Nonexisting program by programId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8f957547-f37d-42f1-a576-48b0cbfc7eba",
										"exec": [
											"// Get the request URL",
											"const requestUrl = pm.request.url.toString();",
											"",
											"// Extract the base URL from the request URL",
											"const baseUrl = requestUrl.split(\"?\")[0];",
											"",
											"// Define the path parameter value",
											"var pathParamValue =pm.environment.get(\"Nonexisting_programID_programModule\");",
											"",
											"// Validate the path parameter value",
											"if (!pathParamValue) {",
											"    //throw new Error(\"Path parameter value is missing\");",
											"    console.log(\"ERROR : Path parameter value is missing\");",
											"}",
											"else{",
											"// Log the path parameter value",
											"console.log(\"Path parameter value:\", pathParamValue);",
											"",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;",
											"} "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "da38c694-bb38-4260-9f8c-004f13e27e69",
										"exec": [
											"var resp = pm.response.json();",
											"",
											"// Perform status code validation",
											"pm.test(\"Status code is 404\",()=>{",
											"pm.response.to.have.status(404);",
											"});",
											"// Perform status validation",
											"pm.test(\"Check Status as Not Found\",()=>{",
											"pm.response.to.have.status('Not Found')",
											"});",
											"//Define expected Data",
											"const programId = pm.environment.get(\"Nonexisting_programID_programModule\");",
											"const expectedData = {",
											"    \"message\": \"no record found with programId\"+programId,",
											"    \"success\": false",
											"};",
											"",
											"// Validate the response body",
											"pm.test(\"Response body contains expected error message and success flag\", function() {",
											"    pm.expect(resp.message).to.equal(expectedData.message);",
											"    pm.expect(resp.success).to.equal(expectedData.success);",
											"});",
											"// Perform response time validation",
											"pm.test(\"response time is less than 700ms\", ()=>{",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "284a1db0-7b2f-456d-8f9e-1cbe2ba44fa8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/deletebyprogid"
							},
							"response": []
						},
						{
							"name": "Delete already deleted program by programId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f775d376-b095-4dad-a106-12226e8602d4",
										"exec": [
											"// Get the request URL",
											"const requestUrl = pm.request.url.toString();",
											"",
											"// Extract the base URL from the request URL",
											"const baseUrl = requestUrl.split(\"?\")[0];",
											"",
											"// Define the path parameter value",
											"var pathParamValue =pm.environment.get(\"programModule_programID\");",
											"",
											"// Validate the path parameter value",
											"if (!pathParamValue) {",
											"    //throw new Error(\"Path parameter value is missing\");",
											"    console.log(\"ERROR : Path parameter value is missing\");",
											"}",
											"else{",
											"// Log the path parameter value",
											"console.log(\"Path parameter value:\", pathParamValue);",
											"",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;",
											"} "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "54c43695-e96c-42b7-9260-fd6b206f34aa",
										"exec": [
											"var response = pm.response.text();",
											"",
											"// Perform statuc code validation",
											"pm.test(\"Status code is 200\",()=>{",
											"pm.response.to.have.status(200);",
											"});",
											"// Perform status validation",
											"pm.test(\"Check Status as OK\",()=>{",
											"pm.response.to.have.status('OK')",
											"});",
											"// Get the runtime programId from the environment variable",
											"const programID = pm.environment.get(\"programModule_programID\");",
											"",
											"// Update the response message with the programId Define expected Data",
											"const expectedResponseMessage = \"Program Id-\"+programID+\" is deleted Successfully!\";",
											"",
											"// Validate the response body",
											"pm.test(\"Response body contains expected success message\", function() {",
											"    pm.expect(response).to.include(expectedResponseMessage);",
											"});",
											"",
											"// Perform response time validation",
											"pm.test(\"response time is less than 700ms\", ()=>{",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3f2d668e-e5f6-43d5-8098-0f3d43fe8512",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/deletebyprogid"
							},
							"response": []
						}
					],
					"id": "9779f885-7de0-433d-9926-3d697e6a7298"
				},
				{
					"name": "Delete by programName",
					"item": [
						{
							"name": "DeleteExistingProgramByValidProgramName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2cd60f43-e210-4d07-a2df-47453130cd98",
										"exec": [
											"var resp = pm.response.text();",
											"",
											"// Perform statuc code validation",
											"pm.test(\"Status code is 200\",()=>{",
											"pm.response.to.have.status(200);",
											"});",
											"// Perform status validation",
											"pm.test(\"Check Status as OK\",()=>{",
											"pm.response.to.have.status('OK')",
											"});",
											"// Get the runtime programName from the environment variable",
											"const programName = pm.environment.get(\"programModule_programName\");",
											"",
											"",
											"// Update the response message with the program Name Define expected Data",
											"const expectedResponseMessage = \"Program Name -\"+programName+\" is deleted Successfully!\";",
											"",
											"// Validate the response body",
											"pm.test(\"Response body contains expected message\", function() {",
											"    pm.expect(resp).to.include(expectedResponseMessage);",
											"});",
											"// Perform response time validation",
											"pm.test(\"response time is less than 700ms\", ()=>{",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"if(pm.environment.get(\"skipBugDeleteProgramName\") === \"true\"){",
											"postman.setNextRequest(\"DeleteAlreadyDeletedProgramName\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6982ada3-16a5-41e7-a807-d5c4371a3274",
										"exec": [
											"// Get the request URL",
											"const requestUrl = pm.request.url.toString();",
											"",
											"// Extract the base URL from the request URL",
											"const baseUrl = requestUrl.split(\"?\")[0];",
											"",
											"// Define the path parameter value",
											"var pathParamValue =pm.environment.get(\"programModule_programName\");",
											"",
											"// Validate the path parameter value",
											"if (!pathParamValue) {",
											"    //throw new Error(\"Path parameter value is missing\");",
											"    console.log(\"ERROR : Path parameter value is missing\");",
											"}",
											"else{",
											"// Log the path parameter value",
											"console.log(\"Path parameter value:\", pathParamValue);",
											"",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f51a7eb7-2df0-4e76-b88f-e1f6f554f082",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/deletebyprogname"
							},
							"response": []
						},
						{
							"name": "DeleteExistingProgramByBugProgramName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2cd60f43-e210-4d07-a2df-47453130cd98",
										"exec": [
											"var resp = pm.response.text();",
											"",
											"// Perform statuc code validation",
											"pm.test(\"Status code is 200\",()=>{",
											"pm.response.to.have.status(200);",
											"});",
											"// Perform status validation",
											"pm.test(\"Check Status as OK\",()=>{",
											"pm.response.to.have.status('OK')",
											"});",
											"// Get the runtime programName from the environment variable",
											"const programName = pm.environment.get(\"Delete_programModule_programName\");",
											"",
											"",
											"// Update the response message with the program Name Define expected Data",
											"const expectedResponseMessage = \"Program Name -\"+programName+\" is deleted Successfully!\";",
											"",
											"// Validate the response body",
											"pm.test(\"Response body contains expected message\", function() {",
											"    pm.expect(resp).to.include(expectedResponseMessage);",
											"});",
											"// Perform response time validation",
											"pm.test(\"response time is less than 700ms\", ()=>{",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6982ada3-16a5-41e7-a807-d5c4371a3274",
										"exec": [
											"// Get the request URL",
											"const requestUrl = pm.request.url.toString();",
											"",
											"// Extract the base URL from the request URL",
											"const baseUrl = requestUrl.split(\"?\")[0];",
											"",
											"// Define the path parameter value",
											"var pathParamValue =pm.environment.get(\"Delete_programModule_programName\");",
											"",
											"// Validate the path parameter value",
											"if (!pathParamValue) {",
											"    //throw new Error(\"Path parameter value is missing\");",
											"    console.log(\"ERROR : Path parameter value is missing\");",
											"}",
											"else{",
											"// Log the path parameter value",
											"console.log(\"Path parameter value:\", pathParamValue);",
											"",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "49a03277-3484-45f2-afd8-539e7114093e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/deletebyprogname"
							},
							"response": []
						},
						{
							"name": "DeleteAlreadyDeletedProgramName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc03db18-4a16-49f0-a665-8efbc55bae58",
										"exec": [
											"var resp = pm.response.text();",
											"",
											"// Perform statuc code validation",
											"pm.test(\"Status code is 200\",()=>{",
											"pm.response.to.have.status(200);",
											"});",
											"// Perform status validation",
											"pm.test(\"Check Status as OK\",()=>{",
											"pm.response.to.have.status('OK')",
											"});",
											"// Get the runtime programName from the environment variable",
											"const programName = pm.environment.get(\"programModule_programName\");",
											"",
											"",
											"// Update the response message with the program Name Define expected Data",
											"const expectedResponseMessage = \"Program Name -\"+programName+\" is deleted Successfully!\";",
											"",
											"// Validate the response body",
											"pm.test(\"Response body contains expected message\", function() {",
											"    pm.expect(resp).to.include(expectedResponseMessage);",
											"});",
											"// Perform response time validation",
											"pm.test(\"response time is less than 700ms\", ()=>{",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7fe69b76-1111-4ee2-9c51-8555640ff669",
										"exec": [
											"// Get the request URL",
											"const requestUrl = pm.request.url.toString();",
											"",
											"// Extract the base URL from the request URL",
											"const baseUrl = requestUrl.split(\"?\")[0];",
											"",
											"// Define the path parameter value",
											"var pathParamValue =pm.environment.get(\"programModule_programName\");",
											"",
											"// Validate the path parameter value",
											"if (!pathParamValue) {",
											"    //throw new Error(\"Path parameter value is missing\");",
											"    console.log(\"ERROR : Path parameter value is missing\");",
											"}",
											"else{",
											"// Log the path parameter value",
											"console.log(\"Path parameter value:\", pathParamValue);",
											"",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2e91c1c7-b39e-4158-aa43-16500dd27ca5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/deletebyprogname"
							},
							"response": []
						},
						{
							"name": "DeleteNonexistingProgramName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "513e0b1b-68af-42cc-bcca-632f376b7f61",
										"exec": [
											"var resp = pm.response.json();",
											"",
											"// Perform status code validation",
											"pm.test(\"Status code is 404\",()=>{",
											"pm.response.to.have.status(404);",
											"});",
											"// Perform status validation",
											"pm.test(\"Check Status as Not Found\",()=>{",
											"pm.response.to.have.status('Not Found')",
											"});",
											"//Define expected Data",
											"const programId = pm.environment.get(\"Delete_NonexistingProgramName_programModule\");",
											"const expectedData = {",
											"    \"message\": \"no record found with programName\",",
											"    \"success\": false",
											"};",
											"",
											"// Validate the response body",
											"pm.test(\"Response body contains expected error message and success flag\", function() {",
											"    pm.expect(resp.message).to.equal(expectedData.message);",
											"    pm.expect(resp.success).to.equal(expectedData.success);",
											"});",
											"// Perform response time validation",
											"pm.test(\"response time is less than 700ms\", ()=>{",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c423129e-252e-4808-a514-cab7cb6f01e7",
										"exec": [
											"// Get the request URL",
											"const requestUrl = pm.request.url.toString();",
											"",
											"// Extract the base URL from the request URL",
											"const baseUrl = requestUrl.split(\"?\")[0];",
											"",
											"// Define the path parameter value",
											"var pathParamValue =pm.environment.get(\"Delete_NonexistingProgramName_programModule\");",
											"",
											"// Validate the path parameter value",
											"if (!pathParamValue) {",
											"    //throw new Error(\"Path parameter value is missing\");",
											"    console.log(\"ERROR : Path parameter value is missing\");",
											"}",
											"else{",
											"// Log the path parameter value",
											"console.log(\"Path parameter value:\", pathParamValue);",
											"",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ad967d3a-812d-4392-9b4b-5c3ec61639cf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/deletebyprogname"
							},
							"response": []
						}
					],
					"id": "ee9e8ba4-d008-4893-a46a-debac9624d5c"
				}
			],
			"id": "2e0c6dd7-c751-4727-a19c-0488e51cc42e"
		},
		{
			"name": "UnAuthorized Requests",
			"item": [
				{
					"name": "Get program by programId-Unauthorized request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a79cc95c-3221-48d8-8a98-57cee8e2957e",
								"exec": [
									"// Perform statuc code validation",
									"pm.test(\"Status code is 401\",()=>{",
									"pm.response.to.have.status(401);",
									"});",
									"",
									"// Perform status validation",
									"pm.test(\"Check Status as Unauthorized\",()=>{",
									"pm.response.to.have.status('Unauthorized')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fafeeba8-1419-45d4-a680-3f8dfdd4c6de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "token"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/programs/{{programModule_programID}}"
					},
					"response": []
				},
				{
					"name": "Get All Programs-Unauthorized request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ace8c01d-24f8-40b8-b1b1-1a4f58ff8540",
								"exec": [
									"// Perform statuc code validation",
									"pm.test(\"Status code is 401\",()=>{",
									"pm.response.to.have.status(401);",
									"});",
									"",
									"// Perform status validation",
									"pm.test(\"Check Status as Unauthorized\",()=>{",
									"pm.response.to.have.status('Unauthorized')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "43a01347-10bb-4e90-9e0f-449b29172ca4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "token"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "Get all programs with Users-UnauthorizedRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b04f8e73-df15-4025-9fb4-ddb6c57c39af",
								"exec": [
									"// Perform statuc code validation",
									"pm.test(\"Status code is 401\",()=>{",
									"pm.response.to.have.status(401);",
									"});",
									"",
									"// Perform status validation",
									"pm.test(\"Check Status as Unauthorized\",()=>{",
									"pm.response.to.have.status('Unauthorized')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ed0fdb94-2a2b-4692-82ab-c602b7ba520c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "token"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/allProgramsWithUsers"
					},
					"response": []
				},
				{
					"name": "Create new program-unauthorized request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
								"exec": [
									"// Perform statuc code validation",
									"pm.test(\"Status code is 401\",()=>{",
									"pm.response.to.have.status(401);",
									"});",
									"",
									"// Perform status validation",
									"pm.test(\"Check Status as Unauthorized\",()=>{",
									"pm.response.to.have.status('Unauthorized')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8a0c306e-7c9f-4a3c-8d4b-c074e6548255",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "token"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"Marchhackathon\",\n  \"programName\": \"March24_APIalchemist_SDET_132\",\n  \"programStatus\": \"Active\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "DeleteProgram By ProgramId-Unauthorized request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ca8ca81-6a54-4ce7-8427-92fef8433b1b",
								"exec": [
									"// Perform statuc code validation",
									"pm.test(\"Status code is 401\",()=>{",
									"pm.response.to.have.status(401);",
									"});",
									"",
									"// Perform status validation",
									"pm.test(\"Check Status as Unauthorized\",()=>{",
									"pm.response.to.have.status('Unauthorized')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2fc0c73d-b9b6-45e6-a798-e9dd074d8844",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "token"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/deletebyprogid/16375"
					},
					"response": []
				}
			],
			"id": "9ce61a7d-e8c3-4817-bf54-ca617f9881eb"
		},
		{
			"name": "ErrorHandling-InvalidEndpoints",
			"item": [
				{
					"name": "Get All Programs-invalid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "079c1528-d98b-4d31-82dd-b9f729a5b970",
								"exec": [
									"// Perform statuc code validation",
									"pm.test(\"Status code is 404\",()=>{",
									"pm.response.to.have.status(404);",
									"});",
									"",
									"// Perform status validation",
									"pm.test(\"Check Status as Not Found\",()=>{",
									"pm.response.to.have.status('Not Found')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3c156e9c-6807-4f12-87bd-4f23492ee0c7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/allProgram"
					},
					"response": []
				},
				{
					"name": "Get program by programId-invalid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6e81d61-2de8-4472-8b29-613a4a5d7016",
								"exec": [
									"// Perform statuc code validation",
									"pm.test(\"Status code is 404\",()=>{",
									"pm.response.to.have.status(404);",
									"});",
									"",
									"// Perform status validation",
									"pm.test(\"Check Status as Not Found\",()=>{",
									"pm.response.to.have.status('Not Found')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5351b941-d9c9-483c-87ed-20e204eaf2c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/program{{programModule_programID}}"
					},
					"response": []
				},
				{
					"name": "Get all programs with Users-invalid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b93cb8ed-c90e-4dbb-8915-6bb3874266ef",
								"exec": [
									"// Perform statuc code validation",
									"pm.test(\"Status code is 404\",()=>{",
									"pm.response.to.have.status(404);",
									"});",
									"",
									"// Perform status validation",
									"pm.test(\"Check Status as Not Found\",()=>{",
									"pm.response.to.have.status('Not Found')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2addf292-2d1b-47e7-b824-f9951f4fb6cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/allProgramsWithUser"
					},
					"response": []
				},
				{
					"name": "Create new program with invalid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
								"exec": [
									"// Perform statuc code validation",
									"pm.test(\"Status code is 404\",()=>{",
									"pm.response.to.have.status(404);",
									"});",
									"",
									"// Perform status validation",
									"pm.test(\"Check Status as Not Found\",()=>{",
									"pm.response.to.have.status('Not Found')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d8adb871-1d0e-4538-bda6-3662e064ff95",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"String\",\n  \"programName\": \"String\",\n  \"programStatus\": \"String\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/savprogram"
					},
					"response": []
				},
				{
					"name": "DeleteProgram-invalid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d6fa5dc9-f0d3-47c6-a22b-cefa1a33c23f",
								"exec": [
									"// Perform statuc code validation",
									"pm.test(\"Status code is 404\",()=>{",
									"pm.response.to.have.status(404);",
									"});",
									"",
									"// Perform status validation",
									"pm.test(\"Check Status as Not Found\",()=>{",
									"pm.response.to.have.status('Not Found')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a4dc840a-cea6-4c13-80e2-61a21d827758",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/deletebyproid/16375"
					},
					"response": []
				}
			],
			"id": "6cc80cf3-6836-4ce9-8b08-c473d2271c81"
		}
	],
	"variable": [
		{
			"key": "programModuleToken",
			"value": ""
		}
	]
}