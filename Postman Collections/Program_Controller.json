{
	"info": {
		"_postman_id": "6e17e152-fa7b-4996-b48e-93b9561b1421",
		"name": "Program_controller-bhagyashri",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Get Programs",
			"item": [
				{
					"name": "Get by programId",
					"item": [
						{
							"name": "Get Program by ProgramId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24dafda5-4c06-408b-ac81-124cb36d69c6",
										"exec": [
											"var resp = pm.response.json();",
											"",
											"//Validate the response body",
											"pm.test('Schema validation', () => {",
											"  pm.response.to.have.jsonSchema (schema);",
											"});",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"programId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"programName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"programDescription\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"programStatus\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"creationTime\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"lastModTime\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"programId\",",
											"    \"programName\",",
											"    \"programDescription\",",
											"    \"programStatus\",",
											"    \"creationTime\",",
											"    \"lastModTime\"",
											"  ]",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "36a16b16-d733-4518-9e4e-c5f8a3fdf065",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/programs/{{ProgramModule_Get_ProgramID}}"
							},
							"response": []
						},
						{
							"name": "Get program by deleted programId",
							"id": "85885faa-abbb-443f-bdc8-7d09028b0724",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/programs/{{deletedProgramId}}"
							},
							"response": []
						},
						{
							"name": "Get program by non existing programId",
							"id": "2686a9ba-d4bc-4e4a-8d38-9aaf3ee4cbb9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/programs/{{nonexistingprogramId}}"
							},
							"response": []
						}
					],
					"id": "a221793c-394e-4d68-8457-cf31d312f49d"
				},
				{
					"name": "Get all programs",
					"item": [
						{
							"name": "Get All Programs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7225bca6-f2df-4234-968b-c8d23ebded6e",
										"exec": [
											"// Perform validations",
											"pm.test(\"Response is valid JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"// Perform status validation",
											"pm.test(\"Check Status as OK\",()=>{",
											"pm.response.to.have.status('OK')",
											"});",
											"// Perform response time validation",
											"pm.test(\"response time is less than 700ms\", ()=>{",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"// Perform schema validation",
											"pm.test(\"Validate Response Schema\", function() {",
											"    // Define the JSON schema",
											"const schema ={",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"programId\": {\"type\": \"number\"},",
											"            \"programName\": {\"type\": \"string\"},",
											"            \"programDescription\": {\"type\": \"string\"},",
											"            \"programStatus\": {\"type\": \"string\"},",
											"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},",
											"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}",
											"        },",
											"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
											"    }",
											"}",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5b6b630c-f99f-40e7-af28-f62b132903d0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/allPrograms"
							},
							"response": []
						}
					],
					"id": "f706ddff-46bc-463f-bdbc-a2e0001186f8"
				},
				{
					"name": "Get all programs with Users",
					"item": [
						{
							"name": "Get all programs with Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f22cb71-5a95-44c9-a74d-09b2eaba82d0",
										"exec": [
											"// Perform validations",
											"pm.test(\"Response is valid JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"// Perform status validation",
											"pm.test(\"Check Status as OK\",()=>{",
											"pm.response.to.have.status('OK')",
											"});",
											"// Perform response time validation",
											"pm.test(\"response time is less than 700ms\", ()=>{",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});",
											"",
											"// Define the JSON schema",
											"const schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"programId\": { \"type\": \"number\" },",
											"            \"programName\": { \"type\": \"string\" },",
											"            \"programDescription\": { \"type\": \"string\" },",
											"            \"programStatus\": { \"type\": \"string\" },",
											"            \"creationTime\": { \"type\": \"string\", \"format\": \"date-time\" },",
											"            \"lastModTime\": { \"type\": \"string\", \"format\": \"date-time\" },",
											"            \"programUsers\": {",
											"                \"type\": \"array\",",
											"                \"items\": {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"userId\": { \"type\": \"string\" },",
											"                        \"userFirstName\": { \"type\": \"string\" },",
											"                        \"userLastName\": { \"type\": \"string\" },",
											"                        \"userMiddleName\": { \"type\": \"string\" },",
											"                        \"userPhoneNumber\": { \"type\": \"number\" },",
											"                        \"userLocation\": { \"type\": \"string\" },",
											"                        \"userTimeZone\": { \"type\": \"string\" },",
											"                        \"userLinkedinUrl\": { \"type\": \"string\"},",
											"                        \"userEduUg\": { \"type\": \"string\" },",
											"                        \"userEduPg\": { \"type\": \"string\" },",
											"                        \"userComments\": { \"type\": \"string\" },",
											"                        \"userVisaStatus\": { \"type\": \"string\" },",
											"                        \"userLoginEmail\": { \"type\": [\"string\", \"null\"] }",
											"                    },",
											"                    \"required\": [\"userId\", \"userFirstName\", \"userLastName\", \"userPhoneNumber\"]",
											"                }",
											"            }",
											"        },",
											"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
											"    }",
											"};",
											"",
											"// Perform schema validation",
											"pm.test(\"Schema Validation\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "45a01115-149d-4dc8-bf4e-ec2f88830329",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/allProgramsWithUsers"
							},
							"response": []
						}
					],
					"id": "f662d5b1-378d-42da-8b34-b8acdaa57ae1"
				}
			],
			"id": "c1526b18-b41e-4a4b-8bc0-8804741b2701"
		},
		{
			"name": "Post Program",
			"item": [
				{
					"name": "Create new program",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
								"exec": [
									"var resp = pm.response.json();",
									"var programID = resp.programId;",
									"pm.environment.set(\"programModule_programID\",programID);",
									"//pm.environment.set(\"UserModule_ProgramId\",programID);",
									"pm.environment.set(\"Delete_programName_programModule\",resp.programId)",
									"",
									"// Perform header-content-type validation",
									"pm.test(\"Content-Type header is present\", ()=> {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", ()=> {",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 201\",()=>{",
									"pm.response.to.have.status(201);",
									"});",
									"// Perform response json validation",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as created\",()=>{",
									"pm.response.to.have.status('Created')",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});",
									"// Perform schema validation",
									"pm.test(\"Validate Response Schema\", function() {",
									"    const schema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"programId\": {\"type\": \"number\"},",
									"            \"programName\": {\"type\": \"string\"},",
									"            \"programDescription\": {\"type\": \"string\"},",
									"            \"programStatus\": {\"type\": \"string\"},",
									"            \"creationTime\": {\"type\": \"string\", \"format\": \"date-time\"},",
									"            \"lastModTime\": {\"type\": \"string\", \"format\": \"date-time\"}",
									"        },",
									"        \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]",
									"    };",
									"",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"pm.test(\"Validate Data Types\", function() {",
									"    const response = pm.response.json();",
									"//pm.expect(pm.response.json().programId).to.not.be.empty;",
									"    pm.expect(response.programId).to.be.a(\"number\");",
									"    pm.expect(response.programName).to.be.a(\"string\");",
									"    pm.expect(response.programDescription).to.be.a(\"string\");",
									"    pm.expect(response.programStatus).to.be.a(\"string\");",
									"    pm.expect(response.creationTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
									"    pm.expect(response.lastModTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{2}:\\d{2}$/);",
									"});",
									"// Get the request body",
									"const requestBody = pm.request.body.raw;",
									"// Parse the request body as JSON",
									"const requestData = JSON.parse(requestBody);",
									"// Validate the data entered in the request",
									"pm.test(\"Response body contains entered data\", function() {",
									"    pm.expect(resp.programDescription).to.equal(requestData.programDescription);",
									"    pm.expect(resp.programName).to.equal(requestData.programName);",
									"    pm.expect(resp.programStatus).to.equal(requestData.programStatus);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "045410d9-c071-4df3-a09d-d0c226e7fbdb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"APIHackathon_Phase1\",\n  \"programName\": \"March24_API-Alchemist_SDET_004\",\n  \"programStatus\": \"Inactive\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "MissingProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
								"exec": [
									"// Perform header-content-type validation",
									"pm.test(\"Content-Type header is present\", ()=> {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", ()=> {",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform response json validation",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3171e6cf-c1af-43d4-a7ae-c93268375a8e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"Marchhackathon\",\n  \"programName\": \"\",\n  \"programStatus\": \"Active\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "ProgramNameWithNumbers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
								"exec": [
									"resp = pm.response.json();",
									"// Perform response json validation",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"programName must begin with alphabet and can contain only alphanumeric characters\",",
									"    \"success\": false",
									"};",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b076fff9-fe11-4f96-ac2a-4e20ae159bfc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"MarchHackathon\",\n  \"programName\": \"{{UpdateToOnlyNumbers}}\",\n  \"programStatus\": \"Active\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "ProgramName with invalid Combination",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "850fa9d6-4abe-4739-8e2c-74851edf428f",
								"exec": [
									"var resp = pm.response.json();",
									"var programID = resp.programId;",
									"pm.collectionVariables.set(\"Bug_programModule_programID\",programID);",
									"pm.collectionVariables.set(\"Delete_programModule_programName\",resp.programName);",
									"resp = pm.response.json();",
									"// Perform response json validation",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"programName must begin with alphabet and can contain only alphanumeric characters\",",
									"    \"success\": false",
									"};",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "11b61a23-a224-4850-803e-69e579c7b275",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"MarchHackathon\",\n  \"programName\": \"A%%^$#%%%%&&&**************************\",\n  \"programStatus\": \"Active\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "ProgramNameWithSpecialCharacters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a43fad2-3681-4c38-95f3-4e60915aa046",
								"exec": [
									"resp = pm.response.json();",
									"// Perform response json validation",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"programName must begin with alphabet and can contain only alphanumeric characters\",",
									"    \"success\": false",
									"};",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "05cd2b3b-8003-4bbb-a85c-e481303c5a20",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"MarchHackathon\",\n  \"programName\": \"{{UpdateToSpecialChar}}\",\n  \"programStatus\": \"Active\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "ExistingProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "483c273a-57b0-4d7c-83d1-01f5bc682e46",
								"exec": [
									"resp = pm.response.json();",
									"// Perform response json validation",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"cannot create program , since already exists\",",
									"    \"success\": false",
									"};",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e98879de-5ab8-4d0e-af71-b4f2aa497e7b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"MarchHackathon\",\n  \"programName\": \"{{ExistingProgramName}}\",\n  \"programStatus\": \"Inactive\"\n}\n\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "InvalidProgramStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa7a42ac-6cdf-4f23-9032-721c962db3ae",
								"exec": [
									"resp = pm.response.json();",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"Invalid Status: must be Active or Inactive\",",
									"    \"success\": false",
									"};",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9ee5a74c-6da6-44b4-a8e2-8e6899c40ed4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"MarchHackathon\",\n  \"programName\": \"March24_APIAlchemist_SDET132\",\n  \"programStatus\": \"{{InvalidProgramStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "MissingProgramStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
								"exec": [
									"resp = pm.response.json();",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"Invalid Status: must be Active or Inactive\",",
									"    \"success\": false",
									"};",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a07eaa96-e63c-4d52-b572-e33475f9b97f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"Marchhackathon\",\n  \"programName\": \"March24_APIalchemist_SDET_132\",\n  \"programStatus\": \"\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "OnlyNumbersProgramDescription",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
								"exec": [
									"resp = pm.response.json();",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"programDescription must begin with alphabet and can contain only alphanumeric characters\",",
									"    \"success\": false",
									"};",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "69190835-98a1-4aa1-9525-70101cc24c4f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{UpdateToOnlyNumbers}}\",\n  \"programName\": \"March24_APIalchemist_SDET_132\",\n  \"programStatus\": \"Inactive\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "SpecialCharactersInDescription",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5d0af6e-3ca4-475e-bc1a-52c73998b7b8",
								"exec": [
									"resp = pm.response.json();",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"programDescription must begin with alphabet and can contain only alphanumeric characters\",",
									"    \"success\": false",
									"};",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c8ec1673-2e3f-457a-b099-e78569f20475",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{UpdateToSpecialChar}}\",\n  \"programName\": \"March24-API-DAAAS-010\",\n  \"programStatus\": \"Inactive\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "InvalidCombinationInProgramDescription",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
								"exec": [
									"resp = pm.response.json();",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Perform statuc code validation",
									"pm.test(\"Status code is 400\",()=>{",
									"pm.response.to.have.status(400);",
									"});",
									"// Perform status validation",
									"pm.test(\"Check Status as Bad Request\",()=>{",
									"pm.response.to.have.status('Bad Request')",
									"});",
									"//Define expected Data",
									"const expectedData = {",
									"    \"message\": \"programDescription must begin with alphabet and can contain only alphanumeric characters\",",
									"    \"success\": false",
									"};",
									"// Validate the response body",
									"pm.test(\"Response body contains expected error message and success flag\", function() {",
									"    pm.expect(resp.message).to.equal(expectedData.message);",
									"    pm.expect(resp.success).to.equal(expectedData.success);",
									"});",
									"// Perform response time validation",
									"pm.test(\"response time is less than 700ms\", ()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c4caa146-75b4-42f1-8b52-e69057a89719",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"A^^^^^^^^^^^^^^^^\",\n  \"programName\": \"March24_APIalchemist_SDET_132\",\n  \"programStatus\": \"Inactive\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				}
			],
			"id": "d1ce667b-08cb-437b-a02f-b96b9a685822"
		},
		{
			"name": "Update Programs",
			"item": [
				{
					"name": "Update by programId",
					"item": [
						{
							"name": "UpdateProgramNameByProgramID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4bb42460-35f2-4984-b0b2-369d41c05860",
										"exec": [
											"// Get the request URL",
											"const requestUrl = pm.request.url.toString();",
											"",
											"// Extract the base URL from the request URL",
											"const baseUrl = requestUrl.split(\"?\")[0];",
											"",
											"// Log the base URL",
											"//console.log(\"Base URL:\", baseUrl);",
											"",
											"// Define the path parameter value",
											"const pathParamValue = \"16341\";",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "191b8027-55a9-4710-bd20-33632c5e0769",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"programName\": \"{{UpdateProgramNameValid_ID}}\",\n    \"programDescription\": \"MarchHackathon\",\n    \"programStatus\": \"Inactive\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/putprogram"
							},
							"response": []
						},
						{
							"name": "UpdateProgramDescriptionByProgramID",
							"id": "176fa377-3a99-4fdd-91ee-117d89eeb23b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"programName\": \"March24_APIAlchemist_API_001\",\n    \"programDescription\": \"{{UpdateProgramDescription_ID}}\",\n    \"programStatus\": \"Inactive\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/putprogram/16341"
							},
							"response": []
						},
						{
							"name": "UpdateProgramStatusByProgramID",
							"id": "4fb3da9a-3f2b-431d-b609-ad8eeeeee985",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"programName\": \"March24_APIAlchemist_API_001\",\n    \"programDescription\": \"March2024Hackathon_API\",\n    \"programStatus\": \"{{UpdateProgramStatus_ID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/putprogram/16341"
							},
							"response": []
						}
					],
					"id": "db789302-362f-41f8-9ef8-ae1edcca4a24"
				},
				{
					"name": "Update by programName",
					"item": [
						{
							"name": "UpdateProgramStatus ByProgramName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "711c6b19-ac38-4d94-8e66-7aede753ef67",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa59fbeb-dd1d-431b-a322-6cbac42cee10",
										"exec": [
											"// Get the base URL from the request",
											"const baseUrl = pm.request.url.getBaseURL();",
											"// Log the base URL",
											"console.log(\"Base URL:\", baseUrl);",
											"// Define the path parameter value",
											"const pathParamValue = \"March24_APIAlchemist_API_001\";",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url; "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a1732573-0ec6-46f8-9605-ee6085f343d7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"programName\": \"March24_APIAlchemist_API_001\",\n    \"programDescription\": \"March2024Hackathon_API\",\n    \"programStatus\": \"{{UpdateProgramStatus_Name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/program"
							},
							"response": []
						},
						{
							"name": "UpdateProgramDescriptionByProgramName",
							"id": "d644a1b3-ca2e-4aa8-8caa-acf828072798",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"programName\": \"March24_APIAlchemist_API_001\",\n    \"programDescription\": \"{{UpdateProgramDescription_Name}}\",\n    \"programStatus\": \"Inactive\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/program/March24_APIAlchemist_API_001"
							},
							"response": []
						},
						{
							"name": "UpdateProgramNameByProgramName",
							"id": "23bd2bd2-f28a-46f8-a4c4-dcd9e4fc7a8d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"programName\": \"{{UpdateProgramNameValid_Name}}\",\n    \"programDescription\": \"March2024Hackathon_API\",\n    \"programStatus\": \"Active\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/program/March24_APIAlchemist_API_001"
							},
							"response": []
						}
					],
					"id": "b32a06f5-b23a-4736-90ba-0d54dd329a00"
				}
			],
			"id": "39d7f45d-8ffa-43cb-9dd7-dc82b386faa6"
		},
		{
			"name": "Negative Update Programs CSV",
			"item": [
				{
					"name": "Update by programId",
					"item": [
						{
							"name": "UpdateProgramNameToSpecialCharacters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4bb42460-35f2-4984-b0b2-369d41c05860",
										"exec": [
											"// Get the request URL",
											"const requestUrl = pm.request.url.toString();",
											"",
											"// Extract the base URL from the request URL",
											"const baseUrl = requestUrl.split(\"?\")[0];",
											"",
											"// Log the base URL",
											"//console.log(\"Base URL:\", baseUrl);",
											"",
											"// Get the request body",
											"const requestBody = pm.request.body;",
											"",
											"// Validate the presence of the request body",
											"if (!requestBody || !requestBody.raw || requestBody.raw.length === 0) {",
											"    throw new Error(\"Request body is missing\");",
											"}",
											"// Log the request body",
											"//console.log(\"Request body:\", requestBody.raw);",
											"",
											"",
											"// Define the path parameter value",
											"const pathParamValue = pm.environment.get(ProgramModule_updateProgram_programId);",
											"",
											"// Validate the path parameter value",
											"if (!pathParamValue) {",
											"    throw new Error(\"Path parameter value is missing\");",
											"}",
											"",
											"// Log the path parameter value",
											"console.log(\"Path parameter value:\", pathParamValue);",
											"",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b6e1c603-adec-445d-90fb-153389dfeafb",
										"exec": [
											"resp = pm.response.json();",
											"// Perform response json validation",
											"pm.test(\"Response is valid JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"// Perform statuc code validation",
											"pm.test(\"Status code is 400\",()=>{",
											"pm.response.to.have.status(400);",
											"});",
											"// Perform status validation",
											"pm.test(\"Check Status as Bad Request\",()=>{",
											"pm.response.to.have.status('Bad Request')",
											"});",
											"//Define expected Data",
											"const expectedData = {",
											"    \"message\": \"programName must begin with alphabet and can contain only alphanumeric characters\",",
											"    \"success\": false",
											"};",
											"// Validate the response body",
											"pm.test(\"Response body contains expected error message and success flag\", function() {",
											"    pm.expect(resp.message).to.equal(expectedData.message);",
											"    pm.expect(resp.success).to.equal(expectedData.success);",
											"});",
											"// Perform response time validation",
											"pm.test(\"response time is less than 700ms\", ()=>{",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a7201673-435c-470b-89e9-d6f7bea00e0a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"programName\": \"{{UpdateToSpecialChar}}\",\n    \"programDescription\": \"March2024Hackathon_API\",\n    \"programStatus\": \"Inactive\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/putprogram"
							},
							"response": []
						},
						{
							"name": "UpdateProgramNameToOnlyNumbers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4bb42460-35f2-4984-b0b2-369d41c05860",
										"exec": [
											"// Get the request URL",
											"const requestUrl = pm.request.url.toString();",
											"",
											"// Extract the base URL from the request URL",
											"const baseUrl = requestUrl.split(\"?\")[0];",
											"",
											"// Log the base URL",
											"//console.log(\"Base URL:\", baseUrl);",
											"",
											"// Define the path parameter value",
											"const pathParamValue = pm.environment.get(ProgramModule_updateProgram_programId);",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b6e1c603-adec-445d-90fb-153389dfeafb",
										"exec": [
											"resp = pm.response.json();",
											"// Perform response json validation",
											"pm.test(\"Response is valid JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"// Perform statuc code validation",
											"pm.test(\"Status code is 400\",()=>{",
											"pm.response.to.have.status(400);",
											"});",
											"// Perform status validation",
											"pm.test(\"Check Status as Bad Request\",()=>{",
											"pm.response.to.have.status('Bad Request')",
											"});",
											"//Define expected Data",
											"const expectedData = {",
											"    \"message\": \"programName must begin with alphabet and can contain only alphanumeric characters\",",
											"    \"success\": false",
											"};",
											"// Validate the response body",
											"pm.test(\"Response body contains expected error message and success flag\", function() {",
											"    pm.expect(resp.message).to.equal(expectedData.message);",
											"    pm.expect(resp.success).to.equal(expectedData.success);",
											"});",
											"// Perform response time validation",
											"pm.test(\"response time is less than 700ms\", ()=>{",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "239507f7-a4a5-4b7b-a5e7-7c92ca4f9094",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"programName\": \"{{UpdateToOnlyNumbers}}\",\n    \"programDescription\": \"MarchHackathon\",\n    \"programStatus\": \"Inactive\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/putprogram"
							},
							"response": []
						},
						{
							"name": "UpdateProgramNameToExistingProgramName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4bb42460-35f2-4984-b0b2-369d41c05860",
										"exec": [
											"// Get the request URL",
											"const requestUrl = pm.request.url.toString();",
											"",
											"// Extract the base URL from the request URL",
											"const baseUrl = requestUrl.split(\"?\")[0];",
											"",
											"// Log the base URL",
											"//console.log(\"Base URL:\", baseUrl);",
											"",
											"// Define the path parameter value",
											"const pathParamValue = pm.environment.get(ProgramModule_updateProgram_programId);",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b6e1c603-adec-445d-90fb-153389dfeafb",
										"exec": [
											"resp = pm.response.json();",
											"// Perform response json validation",
											"pm.test(\"Response is valid JSON\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"// Perform statuc code validation",
											"pm.test(\"Status code is 400\",()=>{",
											"pm.response.to.have.status(400);",
											"});",
											"// Perform status validation",
											"pm.test(\"Check Status as Bad Request\",()=>{",
											"pm.response.to.have.status('Bad Request')",
											"});",
											"//Define expected Data",
											"const expectedData = {",
											"    \"message\": \"cannot create program , since already exists\",",
											"    \"success\": false",
											"};",
											"// Validate the response body",
											"pm.test(\"Response body contains expected error message and success flag\", function() {",
											"    pm.expect(resp.message).to.equal(expectedData.message);",
											"    pm.expect(resp.success).to.equal(expectedData.success);",
											"});",
											"// Perform response time validation",
											"pm.test(\"response time is less than 700ms\", ()=>{",
											"    pm.expect(pm.response.responseTime).to.be.below(700);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f4205ddc-4f17-4231-9e2e-bd19eb31f493",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"programName\": \"{{ExistingProgramName}}\",\n    \"programDescription\": \"MarchHackathon\",\n    \"programStatus\": \"Inactive\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/putprogram"
							},
							"response": []
						},
						{
							"name": "UpdateProgramDescriptionWithSpecialChars",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "07fa9362-7c3e-4bf3-8230-84a6d917c2ce",
										"exec": [
											"// Get the request URL",
											"const requestUrl = pm.request.url.toString();",
											"",
											"// Extract the base URL from the request URL",
											"const baseUrl = requestUrl.split(\"?\")[0];",
											"",
											"// Log the base URL",
											"//console.log(\"Base URL:\", baseUrl);",
											"",
											"// Define the path parameter value",
											"const pathParamValue = pm.environment.get(ProgramModule_updateProgram_programId);",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "93bf9b7f-8ce8-4e38-a74b-ceb01ab9f04b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"programName\": \"March24_APIAlchemist_API_002\",\n    \"programDescription\": \"{{UpdateToSpecialChar}}\",\n    \"programStatus\": \"Inactive\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/putprogram"
							},
							"response": []
						},
						{
							"name": "UpdateProgramDescriptionWithOnlyNumbers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "07fa9362-7c3e-4bf3-8230-84a6d917c2ce",
										"exec": [
											"// Get the request URL",
											"const requestUrl = pm.request.url.toString();",
											"",
											"// Extract the base URL from the request URL",
											"const baseUrl = requestUrl.split(\"?\")[0];",
											"",
											"// Log the base URL",
											"//console.log(\"Base URL:\", baseUrl);",
											"",
											"// Define the path parameter value",
											"const pathParamValue = pm.environment.get(ProgramModule_updateProgram_programId);",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "437a8be0-eb6c-45d1-b777-eca76ef2f935",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"programName\": \"March24_APIAlchemist_API_002\",\n    \"programDescription\": \"{{UpdateToOnlyNumbers}}\",\n    \"programStatus\": \"Inactive\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/putprogram"
							},
							"response": []
						},
						{
							"name": "UpdateProgramStatusWithInvalidValue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f6e6817f-984b-43c3-8c4d-a6fc2f20514d",
										"exec": [
											"// Get the request URL",
											"const requestUrl = pm.request.url.toString();",
											"",
											"// Extract the base URL from the request URL",
											"const baseUrl = requestUrl.split(\"?\")[0];",
											"",
											"// Log the base URL",
											"//console.log(\"Base URL:\", baseUrl);",
											"",
											"// Get the request body",
											"const requestBody = pm.request.body;",
											"",
											"// Validate the presence of the request body",
											"if (!requestBody || !requestBody.raw || requestBody.raw.length === 0) {",
											"    throw new Error(\"Request body is missing\");",
											"}",
											"// Log the request body",
											"//console.log(\"Request body:\", requestBody.raw);",
											"",
											"",
											"// Define the path parameter value",
											"const pathParamValue = pm.environment.get(ProgramModule_updateProgram_programId);",
											"",
											"// Validate the path parameter value",
											"if (!pathParamValue) {",
											"    throw new Error(\"Path parameter value is missing\");",
											"}",
											"",
											"// Log the path parameter value",
											"console.log(\"Path parameter value:\", pathParamValue);",
											"",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d469c745-f0f1-4be0-b8c0-9e36d19a0bdb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"programName\": \"March24_APIAlchemist_API_002\",\n    \"programDescription\": \"March2024Hackathon_API\",\n    \"programStatus\": \"{{UpdateToSpecialChar}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/putprogram"
							},
							"response": []
						}
					],
					"id": "09991d51-b5eb-4deb-97f4-61dfa9162d55"
				},
				{
					"name": "Update by programName",
					"item": [
						{
							"name": "UpdateProgramStatusWithInvalidValue_ByProgramName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "711c6b19-ac38-4d94-8e66-7aede753ef67",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa59fbeb-dd1d-431b-a322-6cbac42cee10",
										"exec": [
											"// Get the base URL from the request",
											"const baseUrl = pm.request.url.getBaseURL();",
											"// Log the base URL",
											"console.log(\"Base URL:\", baseUrl);",
											"// Define the path parameter value",
											"const pathParamValue = \"March24_APIAlchemist_API_002\";",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "40e53518-6751-4111-b804-736401494370",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"programName\": \"March24_APIAlchemist_API_002\",\n    \"programDescription\": \"March2024Hackathon_API\",\n    \"programStatus\": \"{{UpdateToOnlyNumbers}}\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/program"
							},
							"response": []
						},
						{
							"name": "UpdateProgramDescriptionWithSpecialChar_ByProgramName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "166a0cab-4e4f-4cab-8411-bb8233b86936",
										"exec": [
											"// Get the base URL from the request",
											"const baseUrl = pm.request.url.getBaseURL();",
											"// Log the base URL",
											"console.log(\"Base URL:\", baseUrl);",
											"// Define the path parameter value",
											"const pathParamValue = \"March24_APIAlchemist_API_002\";",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "efae2e75-2459-4b69-956f-4e1cd22ea7f5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"programName\": \"March24_APIAlchemist_API_002\",\n    \"programDescription\": \"{{UpdateToSpecialChar}}\",\n    \"programStatus\": \"Inactive\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/program"
							},
							"response": []
						},
						{
							"name": "UpdateProgramNameWithSpecialChars_ByProgramName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8e138ebe-e0e6-41b3-a68c-a4647033c6ee",
										"exec": [
											"// Get the base URL from the request",
											"const baseUrl = pm.request.url.getBaseURL();",
											"// Log the base URL",
											"console.log(\"Base URL:\", baseUrl);",
											"// Define the path parameter value",
											"const pathParamValue = \"March24_APIAlchemist_API_002\";",
											"// Construct the complete URL with the path parameter",
											"const url = `${baseUrl}/${pathParamValue}`;",
											"",
											"// Set the request URL",
											"pm.request.url = url;"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "378742e4-c1f7-49c5-99f6-a24e5525a503",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"programName\": \"{{UpdateToSpecialChar}}\",\n    \"programDescription\": \"March2024Hackathon_API\",\n    \"programStatus\": \"Active\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/program"
							},
							"response": []
						}
					],
					"id": "6b49ef67-2f59-4595-a1e2-780b7edc3974"
				}
			],
			"id": "32f01fbe-9f6e-4ae4-9e01-e34a0995dffa"
		},
		{
			"name": "Delete Programs",
			"item": [
				{
					"name": "Delete by programID",
					"item": [
						{
							"name": "DeleteProgram By ProgramId",
							"id": "7b5a2db7-2f51-47cf-a7a2-caccc9fca45c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/deletebyprogid/{{Bug_programModule_programID}}"
							},
							"response": []
						},
						{
							"name": "Delete Nonexisting program by programId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8f957547-f37d-42f1-a576-48b0cbfc7eba",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "284a1db0-7b2f-456d-8f9e-1cbe2ba44fa8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/deletebyprogid/{{Nonexisting_programID_programModule}}"
							},
							"response": []
						},
						{
							"name": "Delete already deleted program by programId",
							"id": "3f2d668e-e5f6-43d5-8098-0f3d43fe8512",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/deletebyprogid/{Bug_programModule_programID}"
							},
							"response": []
						}
					],
					"id": "9779f885-7de0-433d-9926-3d697e6a7298"
				},
				{
					"name": "Delete by programName",
					"item": [
						{
							"name": "DeleteExistingProgramByProgramName",
							"id": "f51a7eb7-2df0-4e76-b88f-e1f6f554f082",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/deletebyprogname/{{Delete_programName_programModule}}"
							},
							"response": []
						},
						{
							"name": "DeleteAlreadyDeletedProgramName",
							"id": "2e91c1c7-b39e-4158-aa43-16500dd27ca5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/deletebyprogname/{{Delete_alreadyDeletedprogramName_programModule}}"
							},
							"response": []
						},
						{
							"name": "DeleteNonexistingProgramName",
							"id": "ad967d3a-812d-4392-9b4b-5c3ec61639cf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{programModuleToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/deletebyprogname/{{Delete_NonexistingProgramName_programModule}}"
							},
							"response": []
						}
					],
					"id": "ee9e8ba4-d008-4893-a46a-debac9624d5c"
				}
			],
			"id": "2e0c6dd7-c751-4727-a19c-0488e51cc42e"
		},
		{
			"name": "UnAuthorized Requests",
			"item": [
				{
					"name": "Get program by programId-Unauthorized request",
					"id": "fafeeba8-1419-45d4-a680-3f8dfdd4c6de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "token"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/programs/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Get All Programs-Unauthorized request",
					"id": "43a01347-10bb-4e90-9e0f-449b29172ca4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "token"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "Get all programs with Users-UnauthorizedRequest",
					"id": "ed0fdb94-2a2b-4692-82ab-c602b7ba520c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "token"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/allProgramsWithUsers"
					},
					"response": []
				},
				{
					"name": "Create new program-unauthorized request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8a0c306e-7c9f-4a3c-8d4b-c074e6548255",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "token"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"Marchhackathon\",\n  \"programName\": \"March24_APIalchemist_SDET_132\",\n  \"programStatus\": \"Active\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "DeleteProgram By ProgramId-Unauthorized request",
					"id": "2fc0c73d-b9b6-45e6-a798-e9dd074d8844",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "token"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/deletebyprogid/16375"
					},
					"response": []
				}
			],
			"id": "9ce61a7d-e8c3-4817-bf54-ca617f9881eb"
		},
		{
			"name": "ErrorHandling-InvalidEndpoints",
			"item": [
				{
					"name": "Get All Programs-invalid endpoint",
					"id": "3c156e9c-6807-4f12-87bd-4f23492ee0c7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/allProgram"
					},
					"response": []
				},
				{
					"name": "Get program by programId-invalid endpoint",
					"id": "5351b941-d9c9-483c-87ed-20e204eaf2c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/program{{programId}}"
					},
					"response": []
				},
				{
					"name": "Get all programs with Users-invalid endpoint",
					"id": "2addf292-2d1b-47e7-b824-f9951f4fb6cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/allProgramsWithUser"
					},
					"response": []
				},
				{
					"name": "Create new program with invalid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f784d1a-a9e1-4f3f-b5c1-aa9d1d4a9456",
								"exec": [
									"var resp = pm.response.json();",
									"var programID = resp.programId;",
									"pm.environment.set(\"programModule_programID\",token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d8adb871-1d0e-4538-bda6-3662e064ff95",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"String\",\n  \"programName\": \"String\",\n  \"programStatus\": \"String\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/savprogram"
					},
					"response": []
				},
				{
					"name": "DeleteProgram-invalid endpoint",
					"id": "a4dc840a-cea6-4c13-80e2-61a21d827758",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{programModuleToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/deletebyproid/16375"
					},
					"response": []
				}
			],
			"id": "6cc80cf3-6836-4ce9-8b08-c473d2271c81"
		},
		{
			"name": "Login-Valid User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "23199d6a-ea53-4459-80ef-4efe21905c47",
						"exec": [
							"var resp = pm.response.json();",
							"var token = resp.token;",
							"pm.environment.set(\"programModuleToken\",token);",
							"//pm.globals.set(\"validUserID\",userID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "87dcef6d-e360-43bf-b80d-a50981da72df",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"password\": \"Numpyninja@1\",\n  \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/login"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "programModuleToken",
			"value": ""
		}
	]
}